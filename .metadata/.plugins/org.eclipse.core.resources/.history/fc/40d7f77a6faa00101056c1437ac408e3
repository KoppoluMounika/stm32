/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include "stm32l4xx_hal.h"
#include "lcd.h"

// Ultrasonic pins
#define TRIG_PIN GPIO_PIN_5
#define TRIG_PORT GPIOB
#define ECHO_PIN GPIO_PIN_4
#define ECHO_PORT GPIOB

// LCD pins
#define LCD_RS_PIN GPIO_PIN_8
#define LCD_RS_PORT GPIOA
#define LCD_EN_PIN GPIO_PIN_9
#define LCD_EN_PORT GPIOA
#define LCD_D4_PIN GPIO_PIN_3
#define LCD_D4_PORT GPIOB
#define LCD_D5_PIN GPIO_PIN_2
#define LCD_D5_PORT GPIOB
#define LCD_D6_PIN GPIO_PIN_1
#define LCD_D6_PORT GPIOB
#define LCD_D7_PIN GPIO_PIN_0
#define LCD_D7_PORT GPIOB

void SystemClock_Config(void);
void GPIO_Init(void);
long measure_distance(void);

int main(void)
{
    HAL_Init();
    SystemClock_Config();
    GPIO_Init();

    LCD_Init(LCD_RS_PORT, LCD_RS_PIN, LCD_EN_PORT, LCD_EN_PIN,
             LCD_D4_PORT, LCD_D4_PIN,
             LCD_D5_PORT, LCD_D5_PIN,
             LCD_D6_PORT, LCD_D6_PIN,
             LCD_D7_PORT, LCD_D7_PIN);

    LCD_Clear();
    LCD_SetCursor(0,0);
    LCD_Print("Ultrasonic Ready");
    HAL_Delay(1000);

    while(1)
    {
        long distance = measure_distance();
        LCD_Clear();
        LCD_SetCursor(0,0);

        if(distance > 0 && distance < 20)
            LCD_Print("Object Detected");
        else
            LCD_Print("Object Exit");

        HAL_Delay(500);
    }
}

long measure_distance()
{
    long duration;
    long distance_cm;

    // Trigger pulse 10us
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
    HAL_Delay(0.01);
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);

    // Wait for echo
    while(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_RESET);
    uint32_t start = HAL_GetTick();
    while(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_SET);
    uint32_t stop = HAL_GetTick();

    duration = stop - start;
    distance_cm = duration * 0.034 / 2;
    return distance_cm;
}

void GPIO_Init(void)
{
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();

    GPIO_InitTypeDef GPIO_InitStruct = {0};

    // TRIG output
    GPIO_InitStruct.Pin = TRIG_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(TRIG_PORT, &GPIO_InitStruct);

    // ECHO input
    GPIO_InitStruct.Pin = ECHO_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ECHO_PORT, &GPIO_InitStruct);
}

