#ifndef STM32_SPI_INTERRUPT_H
#define STM32_SPI_INTERRUPT_H

#include <stdint.h>

// RCC registers
#define RCC_BASE        0x40021000
#define RCC             ((RCC_TypeDef*) RCC_BASE)
typedef struct {
    volatile uint32_t CR;
    volatile uint32_t ICSCR;
    volatile uint32_t CFGR;
    volatile uint32_t PLLCFGR;
    volatile uint32_t PLLSAI1CFGR;
    volatile uint32_t CIER;
    volatile uint32_t CIFR;
    volatile uint32_t CICR;
    volatile uint32_t AHB1RSTR;
    volatile uint32_t AHB2RSTR;
    volatile uint32_t AHB3RSTR;
    uint32_t RESERVED0;
    volatile uint32_t APB1RSTR1;
    volatile uint32_t APB1RSTR2;
    volatile uint32_t APB2RSTR;
    uint32_t RESERVED1[2];
    volatile uint32_t AHB1ENR;
    volatile uint32_t AHB2ENR;
    volatile uint32_t AHB3ENR;
    uint32_t RESERVED2;
    volatile uint32_t APB1ENR1;
    volatile uint32_t APB1ENR2;
    volatile uint32_t APB2ENR;
} RCC_TypeDef;

// GPIO registers
#define GPIOA_BASE      0x48000000
#define GPIOC_BASE      0x48000800
#define GPIOA           ((GPIO_TypeDef*) GPIOA_BASE)
#define GPIOC           ((GPIO_TypeDef*) GPIOC_BASE)
typedef struct {
    volatile uint32_t MODER;
    volatile uint32_t OTYPER;
    volatile uint32_t OSPEEDR;
    volatile uint32_t PUPDR;
    volatile uint32_t IDR;
    volatile uint32_t ODR;
    volatile uint32_t BSRR;
    volatile uint32_t LCKR;
    volatile uint32_t AFR[2];
} GPIO_TypeDef;

// SPI registers
#define SPI1_BASE       0x40013000
#define SPI1            ((SPI_TypeDef*) SPI1_BASE)
typedef struct {
    volatile uint32_t CR1;
    volatile uint32_t CR2;
    volatile uint32_t SR;
    volatile uint32_t DR;
    volatile uint32_t CRCPR;
    volatile uint32_t RXCRCR;
    volatile uint32_t TXCRCR;
    volatile uint32_t I2SCFGR;
    volatile uint32_t I2SPR;
} SPI_TypeDef;

// NVIC (simplified)
#define NVIC_ISER0      ((volatile uint32_t*) 0xE000E100)

// RCC bits
#define RCC_AHB2ENR_GPIOAEN     (1<<0)
#define RCC_AHB2ENR_GPIOCEN     (1<<2)
#define RCC_APB2ENR_SPI1EN      (1<<12)

// GPIO alternate function
#define GPIO_AF5_SPI1    5

// SPI bits
#define SPI_CR1_MSTR      (1<<2)
#define SPI_CR1_SSM       (1<<9)
#define SPI_CR1_SSI       (1<<8)
#define SPI_CR1_SPE       (1<<6)
#define SPI_CR2_RXNEIE    (1<<6)
#define SPI_SR_RXNE       (1<<0)

// Function prototypes
void SPI1_Init(void);
uint8_t SPI1_TransmitReceive(uint8_t data);
void SPI1_EnableInterrupt(void);

#endif
