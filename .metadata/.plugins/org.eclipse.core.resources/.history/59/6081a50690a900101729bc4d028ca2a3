#include "lcd.h"
#include <util/delay.h> // if using bare-metal delay, otherwise implement your own delay

// Internal helper functions
static void LCD_EnablePulse(void)
{
    GPIO_WriteToOutputPin(LCD_EN_GPIO, LCD_EN_PIN, 1);
    for(volatile int i=0; i<500; i++);  // Short delay
    GPIO_WriteToOutputPin(LCD_EN_GPIO, LCD_EN_PIN, 0);
    for(volatile int i=0; i<500; i++);
}

static void LCD_Send4Bit(uint8_t data)
{
    GPIO_WriteToOutputPin(LCD_D4_GPIO, LCD_D4_PIN, (data >> 0) & 0x01);
    GPIO_WriteToOutputPin(LCD_D5_GPIO, LCD_D5_PIN, (data >> 1) & 0x01);
    GPIO_WriteToOutputPin(LCD_D6_GPIO, LCD_D6_PIN, (data >> 2) & 0x01);
    GPIO_WriteToOutputPin(LCD_D7_GPIO, LCD_D7_PIN, (data >> 3) & 0x01);
    LCD_EnablePulse();
}

// Send command to LCD
void LCD_SendCommand(uint8_t cmd)
{
    GPIO_WriteToOutputPin(LCD_RS_GPIO, LCD_RS_PIN, 0); // RS = 0 for command
    LCD_Send4Bit(cmd >> 4);
    LCD_Send4Bit(cmd & 0x0F);
    for(volatile int i=0; i<2000; i++); // delay
}

// Send data (character) to LCD
void LCD_SendData(uint8_t data)
{
    GPIO_WriteToOutputPin(LCD_RS_GPIO, LCD_RS_PIN, 1); // RS = 1 for data
    LCD_Send4Bit(data >> 4);
    LCD_Send4Bit(data & 0x0F);
    for(volatile int i=0; i<2000; i++); // delay
}

// Initialize LCD in 4-bit mode
void LCD_Init(void)
{
    // Short delay for LCD power up
    for(volatile int i=0; i<50000; i++);

    LCD_SendCommand(0x33); // Initialize
    LCD_SendCommand(0x32); // 4-bit mode
    LCD_SendCommand(0x28); // 2 lines, 5x8 dots
    LCD_SendCommand(0x0C); // Display on, cursor off
    LCD_SendCommand(0x06); // Entry mode, increment cursor
    LCD_Clear();
}

// Send string
void LCD_SendString(char *str)
{
    while(*str)
    {
        LCD_SendData(*str++);
    }
}

// Set cursor
void LCD_SetCursor(uint8_t row, uint8_t col)
{
    uint8_t addr = (row==0) ? col : (0x40 + col);
    LCD_SendCommand(0x80 | addr);
}

// Clear LCD
void LCD_Clear(void)
{
    LCD_SendCommand(0x01);
    for(volatile int i=0; i<20000; i++); // delay
}
