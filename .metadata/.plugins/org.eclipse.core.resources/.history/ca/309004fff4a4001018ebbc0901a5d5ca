#include "stm32l4_gpio_driver.h"

// Enable clock for GPIO port
void GPIO_EnableClock(GPIO_TypeDef *GPIOx)
{
    if(GPIOx == GPIOA) RCC->AHB2ENR |= (1U << 0);
    else if(GPIOx == GPIOB) RCC->AHB2ENR |= (1U << 1);
    else if(GPIOx == GPIOC) RCC->AHB2ENR |= (1U << 2);
    else if(GPIOx == GPIOD) RCC->AHB2ENR |= (1U << 3);
    else if(GPIOx == GPIOE) RCC->AHB2ENR |= (1U << 4);
    else if(GPIOx == GPIOH) RCC->AHB2ENR |= (1U << 7);
}

// Initialize GPIO pin
void GPIO_Init(GPIO_TypeDef *GPIOx, uint16_t pin, uint8_t mode, uint8_t otype, uint8_t pull, uint8_t speed)
{
    GPIO_EnableClock(GPIOx);

    // Configure mode
    GPIOx->MODER &= ~(0x3 << (2*pin));
    GPIOx->MODER |= (mode << (2*pin));

    // Configure output type
    GPIOx->OTYPER &= ~(1 << pin);
    GPIOx->OTYPER |= (otype << pin);

    // Configure speed
    GPIOx->OSPEEDR &= ~(0x3 << (2*pin));
    GPIOx->OSPEEDR |= (speed << (2*pin));

    // Configure pull-up/pull-down
    GPIOx->PUPDR &= ~(0x3 << (2*pin));
    GPIOx->PUPDR |= (pull << (2*pin));
}

// Write GPIO pin
void GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t pin, uint8_t state)
{
    if(state)
        GPIOx->ODR |= (1 << pin);
    else
        GPIOx->ODR &= ~(1 << pin);
}

// Toggle GPIO pin
void GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t pin)
{
    GPIOx->ODR ^= (1 << pin);
}

// Read GPIO pin
uint8_t GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t pin)
{
    return (GPIOx->IDR & (1 << pin)) ? 1 : 0;
}
