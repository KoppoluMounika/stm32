
10_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004b8  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000644  08000644  00001644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000654  08000654  0000165c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000654  08000654  0000165c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000654  0800065c  0000165c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000654  08000654  00001654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000658  08000658  00001658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000165c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000165c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000612  00000000  00000000  0000168c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002cc  00000000  00000000  00001c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  00001f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000007a  00000000  00000000  00002028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000111f  00000000  00000000  000020a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000100f  00000000  00000000  000031c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003f94  00000000  00000000  000041d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00008164  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000019c  00000000  00000000  000081a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  00008344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000000 	.word	0x20000000
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800062c 	.word	0x0800062c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000004 	.word	0x20000004
 80001c8:	0800062c 	.word	0x0800062c

080001cc <delay_ms>:
#include "lcd.h"
#include <stdint.h>

// Simple delay function (approximate)
void delay_ms(uint32_t ms)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b085      	sub	sp, #20
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
    for(uint32_t i = 0; i < ms * 4000; i++); // adjust for your clock
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
 80001d8:	e002      	b.n	80001e0 <delay_ms+0x14>
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	3301      	adds	r3, #1
 80001de:	60fb      	str	r3, [r7, #12]
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80001e6:	fb02 f303 	mul.w	r3, r2, r3
 80001ea:	68fa      	ldr	r2, [r7, #12]
 80001ec:	429a      	cmp	r2, r3
 80001ee:	d3f4      	bcc.n	80001da <delay_ms+0xe>
}
 80001f0:	bf00      	nop
 80001f2:	bf00      	nop
 80001f4:	3714      	adds	r7, #20
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
	...

08000200 <LCD_EnablePulse>:

void LCD_EnablePulse(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, EN_PIN, 1);
 8000204:	2201      	movs	r2, #1
 8000206:	2101      	movs	r1, #1
 8000208:	4807      	ldr	r0, [pc, #28]	@ (8000228 <LCD_EnablePulse+0x28>)
 800020a:	f000 f98f 	bl	800052c <GPIO_WriteToOutputPin>
    delay_ms(1);
 800020e:	2001      	movs	r0, #1
 8000210:	f7ff ffdc 	bl	80001cc <delay_ms>
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, EN_PIN, 0);
 8000214:	2200      	movs	r2, #0
 8000216:	2101      	movs	r1, #1
 8000218:	4803      	ldr	r0, [pc, #12]	@ (8000228 <LCD_EnablePulse+0x28>)
 800021a:	f000 f987 	bl	800052c <GPIO_WriteToOutputPin>
    delay_ms(1);
 800021e:	2001      	movs	r0, #1
 8000220:	f7ff ffd4 	bl	80001cc <delay_ms>
}
 8000224:	bf00      	nop
 8000226:	bd80      	pop	{r7, pc}
 8000228:	48000400 	.word	0x48000400

0800022c <LCD_Command>:

void LCD_Command(uint8_t cmd)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	71fb      	strb	r3, [r7, #7]
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, RS_PIN, 0); // RS = 0 for command
 8000236:	2200      	movs	r2, #0
 8000238:	2100      	movs	r1, #0
 800023a:	4830      	ldr	r0, [pc, #192]	@ (80002fc <LCD_Command+0xd0>)
 800023c:	f000 f976 	bl	800052c <GPIO_WriteToOutputPin>

    // High nibble
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, D4_PIN, (cmd >> 4) & 0x01);
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	091b      	lsrs	r3, r3, #4
 8000244:	b2db      	uxtb	r3, r3
 8000246:	f003 0301 	and.w	r3, r3, #1
 800024a:	b2db      	uxtb	r3, r3
 800024c:	461a      	mov	r2, r3
 800024e:	2102      	movs	r1, #2
 8000250:	482a      	ldr	r0, [pc, #168]	@ (80002fc <LCD_Command+0xd0>)
 8000252:	f000 f96b 	bl	800052c <GPIO_WriteToOutputPin>
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, D5_PIN, (cmd >> 5) & 0x01);
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	095b      	lsrs	r3, r3, #5
 800025a:	b2db      	uxtb	r3, r3
 800025c:	f003 0301 	and.w	r3, r3, #1
 8000260:	b2db      	uxtb	r3, r3
 8000262:	461a      	mov	r2, r3
 8000264:	2103      	movs	r1, #3
 8000266:	4825      	ldr	r0, [pc, #148]	@ (80002fc <LCD_Command+0xd0>)
 8000268:	f000 f960 	bl	800052c <GPIO_WriteToOutputPin>
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, D6_PIN, (cmd >> 6) & 0x01);
 800026c:	79fb      	ldrb	r3, [r7, #7]
 800026e:	099b      	lsrs	r3, r3, #6
 8000270:	b2db      	uxtb	r3, r3
 8000272:	f003 0301 	and.w	r3, r3, #1
 8000276:	b2db      	uxtb	r3, r3
 8000278:	461a      	mov	r2, r3
 800027a:	2104      	movs	r1, #4
 800027c:	481f      	ldr	r0, [pc, #124]	@ (80002fc <LCD_Command+0xd0>)
 800027e:	f000 f955 	bl	800052c <GPIO_WriteToOutputPin>
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, D7_PIN, (cmd >> 7) & 0x01);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	09db      	lsrs	r3, r3, #7
 8000286:	b2db      	uxtb	r3, r3
 8000288:	461a      	mov	r2, r3
 800028a:	2105      	movs	r1, #5
 800028c:	481b      	ldr	r0, [pc, #108]	@ (80002fc <LCD_Command+0xd0>)
 800028e:	f000 f94d 	bl	800052c <GPIO_WriteToOutputPin>
    LCD_EnablePulse();
 8000292:	f7ff ffb5 	bl	8000200 <LCD_EnablePulse>

    // Low nibble
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, D4_PIN, (cmd >> 0) & 0x01);
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	f003 0301 	and.w	r3, r3, #1
 800029c:	b2db      	uxtb	r3, r3
 800029e:	461a      	mov	r2, r3
 80002a0:	2102      	movs	r1, #2
 80002a2:	4816      	ldr	r0, [pc, #88]	@ (80002fc <LCD_Command+0xd0>)
 80002a4:	f000 f942 	bl	800052c <GPIO_WriteToOutputPin>
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, D5_PIN, (cmd >> 1) & 0x01);
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	085b      	lsrs	r3, r3, #1
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	f003 0301 	and.w	r3, r3, #1
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	461a      	mov	r2, r3
 80002b6:	2103      	movs	r1, #3
 80002b8:	4810      	ldr	r0, [pc, #64]	@ (80002fc <LCD_Command+0xd0>)
 80002ba:	f000 f937 	bl	800052c <GPIO_WriteToOutputPin>
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, D6_PIN, (cmd >> 2) & 0x01);
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	089b      	lsrs	r3, r3, #2
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	f003 0301 	and.w	r3, r3, #1
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	461a      	mov	r2, r3
 80002cc:	2104      	movs	r1, #4
 80002ce:	480b      	ldr	r0, [pc, #44]	@ (80002fc <LCD_Command+0xd0>)
 80002d0:	f000 f92c 	bl	800052c <GPIO_WriteToOutputPin>
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, D7_PIN, (cmd >> 3) & 0x01);
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	08db      	lsrs	r3, r3, #3
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	f003 0301 	and.w	r3, r3, #1
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	461a      	mov	r2, r3
 80002e2:	2105      	movs	r1, #5
 80002e4:	4805      	ldr	r0, [pc, #20]	@ (80002fc <LCD_Command+0xd0>)
 80002e6:	f000 f921 	bl	800052c <GPIO_WriteToOutputPin>
    LCD_EnablePulse();
 80002ea:	f7ff ff89 	bl	8000200 <LCD_EnablePulse>

    delay_ms(2); // wait for command to execute
 80002ee:	2002      	movs	r0, #2
 80002f0:	f7ff ff6c 	bl	80001cc <delay_ms>
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	48000400 	.word	0x48000400

08000300 <LCD_SendChar>:

void LCD_SendChar(char data)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	71fb      	strb	r3, [r7, #7]
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, RS_PIN, 1); // RS = 1 for data
 800030a:	2201      	movs	r2, #1
 800030c:	2100      	movs	r1, #0
 800030e:	4830      	ldr	r0, [pc, #192]	@ (80003d0 <LCD_SendChar+0xd0>)
 8000310:	f000 f90c 	bl	800052c <GPIO_WriteToOutputPin>

    // High nibble
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, D4_PIN, (data >> 4) & 0x01);
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	091b      	lsrs	r3, r3, #4
 8000318:	b2db      	uxtb	r3, r3
 800031a:	f003 0301 	and.w	r3, r3, #1
 800031e:	b2db      	uxtb	r3, r3
 8000320:	461a      	mov	r2, r3
 8000322:	2102      	movs	r1, #2
 8000324:	482a      	ldr	r0, [pc, #168]	@ (80003d0 <LCD_SendChar+0xd0>)
 8000326:	f000 f901 	bl	800052c <GPIO_WriteToOutputPin>
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, D5_PIN, (data >> 5) & 0x01);
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	095b      	lsrs	r3, r3, #5
 800032e:	b2db      	uxtb	r3, r3
 8000330:	f003 0301 	and.w	r3, r3, #1
 8000334:	b2db      	uxtb	r3, r3
 8000336:	461a      	mov	r2, r3
 8000338:	2103      	movs	r1, #3
 800033a:	4825      	ldr	r0, [pc, #148]	@ (80003d0 <LCD_SendChar+0xd0>)
 800033c:	f000 f8f6 	bl	800052c <GPIO_WriteToOutputPin>
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, D6_PIN, (data >> 6) & 0x01);
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	099b      	lsrs	r3, r3, #6
 8000344:	b2db      	uxtb	r3, r3
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	b2db      	uxtb	r3, r3
 800034c:	461a      	mov	r2, r3
 800034e:	2104      	movs	r1, #4
 8000350:	481f      	ldr	r0, [pc, #124]	@ (80003d0 <LCD_SendChar+0xd0>)
 8000352:	f000 f8eb 	bl	800052c <GPIO_WriteToOutputPin>
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, D7_PIN, (data >> 7) & 0x01);
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	09db      	lsrs	r3, r3, #7
 800035a:	b2db      	uxtb	r3, r3
 800035c:	461a      	mov	r2, r3
 800035e:	2105      	movs	r1, #5
 8000360:	481b      	ldr	r0, [pc, #108]	@ (80003d0 <LCD_SendChar+0xd0>)
 8000362:	f000 f8e3 	bl	800052c <GPIO_WriteToOutputPin>
    LCD_EnablePulse();
 8000366:	f7ff ff4b 	bl	8000200 <LCD_EnablePulse>

    // Low nibble
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, D4_PIN, (data >> 0) & 0x01);
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	f003 0301 	and.w	r3, r3, #1
 8000370:	b2db      	uxtb	r3, r3
 8000372:	461a      	mov	r2, r3
 8000374:	2102      	movs	r1, #2
 8000376:	4816      	ldr	r0, [pc, #88]	@ (80003d0 <LCD_SendChar+0xd0>)
 8000378:	f000 f8d8 	bl	800052c <GPIO_WriteToOutputPin>
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, D5_PIN, (data >> 1) & 0x01);
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	085b      	lsrs	r3, r3, #1
 8000380:	b2db      	uxtb	r3, r3
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	b2db      	uxtb	r3, r3
 8000388:	461a      	mov	r2, r3
 800038a:	2103      	movs	r1, #3
 800038c:	4810      	ldr	r0, [pc, #64]	@ (80003d0 <LCD_SendChar+0xd0>)
 800038e:	f000 f8cd 	bl	800052c <GPIO_WriteToOutputPin>
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, D6_PIN, (data >> 2) & 0x01);
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	089b      	lsrs	r3, r3, #2
 8000396:	b2db      	uxtb	r3, r3
 8000398:	f003 0301 	and.w	r3, r3, #1
 800039c:	b2db      	uxtb	r3, r3
 800039e:	461a      	mov	r2, r3
 80003a0:	2104      	movs	r1, #4
 80003a2:	480b      	ldr	r0, [pc, #44]	@ (80003d0 <LCD_SendChar+0xd0>)
 80003a4:	f000 f8c2 	bl	800052c <GPIO_WriteToOutputPin>
    GPIO_WriteToOutputPin(LCD_GPIO_PORT, D7_PIN, (data >> 3) & 0x01);
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	08db      	lsrs	r3, r3, #3
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	461a      	mov	r2, r3
 80003b6:	2105      	movs	r1, #5
 80003b8:	4805      	ldr	r0, [pc, #20]	@ (80003d0 <LCD_SendChar+0xd0>)
 80003ba:	f000 f8b7 	bl	800052c <GPIO_WriteToOutputPin>
    LCD_EnablePulse();
 80003be:	f7ff ff1f 	bl	8000200 <LCD_EnablePulse>

    delay_ms(2);
 80003c2:	2002      	movs	r0, #2
 80003c4:	f7ff ff02 	bl	80001cc <delay_ms>
}
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	48000400 	.word	0x48000400

080003d4 <LCD_SendString>:

void LCD_SendString(char *str)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
    while(*str)
 80003dc:	e006      	b.n	80003ec <LCD_SendString+0x18>
        LCD_SendChar(*str++);
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	1c5a      	adds	r2, r3, #1
 80003e2:	607a      	str	r2, [r7, #4]
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ff8a 	bl	8000300 <LCD_SendChar>
    while(*str)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d1f4      	bne.n	80003de <LCD_SendString+0xa>
}
 80003f4:	bf00      	nop
 80003f6:	bf00      	nop
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
	...

08000400 <LCD_Init>:

void LCD_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
    GPIO_PeriClockControl(LCD_GPIO_PORT, ENABLE);
 8000406:	2101      	movs	r1, #1
 8000408:	481c      	ldr	r0, [pc, #112]	@ (800047c <LCD_Init+0x7c>)
 800040a:	f000 f839 	bl	8000480 <GPIO_PeriClockControl>

    // Set PB0-PB5 as output
    for(int i=0;i<=5;i++)
 800040e:	2300      	movs	r3, #0
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	e019      	b.n	8000448 <LCD_Init+0x48>
    {
        LCD_GPIO_PORT->MODER &= ~(0x3 << (i*2)); // clear mode
 8000414:	4b19      	ldr	r3, [pc, #100]	@ (800047c <LCD_Init+0x7c>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	0052      	lsls	r2, r2, #1
 800041c:	2103      	movs	r1, #3
 800041e:	fa01 f202 	lsl.w	r2, r1, r2
 8000422:	43d2      	mvns	r2, r2
 8000424:	4611      	mov	r1, r2
 8000426:	4a15      	ldr	r2, [pc, #84]	@ (800047c <LCD_Init+0x7c>)
 8000428:	400b      	ands	r3, r1
 800042a:	6013      	str	r3, [r2, #0]
        LCD_GPIO_PORT->MODER |=  (0x1 << (i*2)); // output
 800042c:	4b13      	ldr	r3, [pc, #76]	@ (800047c <LCD_Init+0x7c>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	0052      	lsls	r2, r2, #1
 8000434:	2101      	movs	r1, #1
 8000436:	fa01 f202 	lsl.w	r2, r1, r2
 800043a:	4611      	mov	r1, r2
 800043c:	4a0f      	ldr	r2, [pc, #60]	@ (800047c <LCD_Init+0x7c>)
 800043e:	430b      	orrs	r3, r1
 8000440:	6013      	str	r3, [r2, #0]
    for(int i=0;i<=5;i++)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	3301      	adds	r3, #1
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2b05      	cmp	r3, #5
 800044c:	dde2      	ble.n	8000414 <LCD_Init+0x14>
    }

    delay_ms(20); // Wait for LCD to power up
 800044e:	2014      	movs	r0, #20
 8000450:	f7ff febc 	bl	80001cc <delay_ms>

    LCD_Command(0x02); // 4-bit mode
 8000454:	2002      	movs	r0, #2
 8000456:	f7ff fee9 	bl	800022c <LCD_Command>
    LCD_Command(0x28); // 2 lines, 5x7
 800045a:	2028      	movs	r0, #40	@ 0x28
 800045c:	f7ff fee6 	bl	800022c <LCD_Command>
    LCD_Command(0x0C); // Display on, cursor off
 8000460:	200c      	movs	r0, #12
 8000462:	f7ff fee3 	bl	800022c <LCD_Command>
    LCD_Command(0x06); // Entry mode increment
 8000466:	2006      	movs	r0, #6
 8000468:	f7ff fee0 	bl	800022c <LCD_Command>
    LCD_Command(0x01); // Clear display
 800046c:	2001      	movs	r0, #1
 800046e:	f7ff fedd 	bl	800022c <LCD_Command>
}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	48000400 	.word	0x48000400

08000480 <GPIO_PeriClockControl>:
#include "stm32l4xx_gpio_driver.h"

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	460b      	mov	r3, r1
 800048a:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 800048c:	78fb      	ldrb	r3, [r7, #3]
 800048e:	2b01      	cmp	r3, #1
 8000490:	d120      	bne.n	80004d4 <GPIO_PeriClockControl+0x54>
    {
        if(pGPIOx == GPIOA) RCC->AHB2ENR |= (1 << 0);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000498:	d106      	bne.n	80004a8 <GPIO_PeriClockControl+0x28>
 800049a:	4b21      	ldr	r3, [pc, #132]	@ (8000520 <GPIO_PeriClockControl+0xa0>)
 800049c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800049e:	4a20      	ldr	r2, [pc, #128]	@ (8000520 <GPIO_PeriClockControl+0xa0>)
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	6493      	str	r3, [r2, #72]	@ 0x48
    {
        if(pGPIOx == GPIOA) RCC->AHB2ENR &= ~(1 << 0);
        else if(pGPIOx == GPIOB) RCC->AHB2ENR &= ~(1 << 1);
        else if(pGPIOx == GPIOC) RCC->AHB2ENR &= ~(1 << 2);
    }
}
 80004a6:	e035      	b.n	8000514 <GPIO_PeriClockControl+0x94>
        else if(pGPIOx == GPIOB) RCC->AHB2ENR |= (1 << 1);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000524 <GPIO_PeriClockControl+0xa4>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d106      	bne.n	80004be <GPIO_PeriClockControl+0x3e>
 80004b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000520 <GPIO_PeriClockControl+0xa0>)
 80004b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004b4:	4a1a      	ldr	r2, [pc, #104]	@ (8000520 <GPIO_PeriClockControl+0xa0>)
 80004b6:	f043 0302 	orr.w	r3, r3, #2
 80004ba:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80004bc:	e02a      	b.n	8000514 <GPIO_PeriClockControl+0x94>
        else if(pGPIOx == GPIOC) RCC->AHB2ENR |= (1 << 2);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4a19      	ldr	r2, [pc, #100]	@ (8000528 <GPIO_PeriClockControl+0xa8>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d126      	bne.n	8000514 <GPIO_PeriClockControl+0x94>
 80004c6:	4b16      	ldr	r3, [pc, #88]	@ (8000520 <GPIO_PeriClockControl+0xa0>)
 80004c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004ca:	4a15      	ldr	r2, [pc, #84]	@ (8000520 <GPIO_PeriClockControl+0xa0>)
 80004cc:	f043 0304 	orr.w	r3, r3, #4
 80004d0:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80004d2:	e01f      	b.n	8000514 <GPIO_PeriClockControl+0x94>
        if(pGPIOx == GPIOA) RCC->AHB2ENR &= ~(1 << 0);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80004da:	d106      	bne.n	80004ea <GPIO_PeriClockControl+0x6a>
 80004dc:	4b10      	ldr	r3, [pc, #64]	@ (8000520 <GPIO_PeriClockControl+0xa0>)
 80004de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004e0:	4a0f      	ldr	r2, [pc, #60]	@ (8000520 <GPIO_PeriClockControl+0xa0>)
 80004e2:	f023 0301 	bic.w	r3, r3, #1
 80004e6:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80004e8:	e014      	b.n	8000514 <GPIO_PeriClockControl+0x94>
        else if(pGPIOx == GPIOB) RCC->AHB2ENR &= ~(1 << 1);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000524 <GPIO_PeriClockControl+0xa4>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d106      	bne.n	8000500 <GPIO_PeriClockControl+0x80>
 80004f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000520 <GPIO_PeriClockControl+0xa0>)
 80004f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000520 <GPIO_PeriClockControl+0xa0>)
 80004f8:	f023 0302 	bic.w	r3, r3, #2
 80004fc:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80004fe:	e009      	b.n	8000514 <GPIO_PeriClockControl+0x94>
        else if(pGPIOx == GPIOC) RCC->AHB2ENR &= ~(1 << 2);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4a09      	ldr	r2, [pc, #36]	@ (8000528 <GPIO_PeriClockControl+0xa8>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d105      	bne.n	8000514 <GPIO_PeriClockControl+0x94>
 8000508:	4b05      	ldr	r3, [pc, #20]	@ (8000520 <GPIO_PeriClockControl+0xa0>)
 800050a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800050c:	4a04      	ldr	r2, [pc, #16]	@ (8000520 <GPIO_PeriClockControl+0xa0>)
 800050e:	f023 0304 	bic.w	r3, r3, #4
 8000512:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	40021000 	.word	0x40021000
 8000524:	48000400 	.word	0x48000400
 8000528:	48000800 	.word	0x48000800

0800052c <GPIO_WriteToOutputPin>:

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t pin, uint8_t value)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	460b      	mov	r3, r1
 8000536:	70fb      	strb	r3, [r7, #3]
 8000538:	4613      	mov	r3, r2
 800053a:	70bb      	strb	r3, [r7, #2]
    if(value)
 800053c:	78bb      	ldrb	r3, [r7, #2]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d009      	beq.n	8000556 <GPIO_WriteToOutputPin+0x2a>
        pGPIOx->ODR |= (1 << pin);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	78fa      	ldrb	r2, [r7, #3]
 8000548:	2101      	movs	r1, #1
 800054a:	fa01 f202 	lsl.w	r2, r1, r2
 800054e:	431a      	orrs	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	615a      	str	r2, [r3, #20]
    else
        pGPIOx->ODR &= ~(1 << pin);
}
 8000554:	e009      	b.n	800056a <GPIO_WriteToOutputPin+0x3e>
        pGPIOx->ODR &= ~(1 << pin);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	78fa      	ldrb	r2, [r7, #3]
 800055c:	2101      	movs	r1, #1
 800055e:	fa01 f202 	lsl.w	r2, r1, r2
 8000562:	43d2      	mvns	r2, r2
 8000564:	401a      	ands	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	615a      	str	r2, [r3, #20]
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
	...

08000578 <main>:
 ******************************************************************************
 */
#include "lcd.h"

int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
    LCD_Init();
 800057c:	f7ff ff40 	bl	8000400 <LCD_Init>
    LCD_SendString("Hello STM32!");
 8000580:	4802      	ldr	r0, [pc, #8]	@ (800058c <main+0x14>)
 8000582:	f7ff ff27 	bl	80003d4 <LCD_SendString>
    while(1);
 8000586:	bf00      	nop
 8000588:	e7fd      	b.n	8000586 <main+0xe>
 800058a:	bf00      	nop
 800058c:	08000644 	.word	0x08000644

08000590 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000590:	480d      	ldr	r0, [pc, #52]	@ (80005c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000592:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000594:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000598:	480c      	ldr	r0, [pc, #48]	@ (80005cc <LoopForever+0x6>)
  ldr r1, =_edata
 800059a:	490d      	ldr	r1, [pc, #52]	@ (80005d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800059c:	4a0d      	ldr	r2, [pc, #52]	@ (80005d4 <LoopForever+0xe>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a0:	e002      	b.n	80005a8 <LoopCopyDataInit>

080005a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a6:	3304      	adds	r3, #4

080005a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ac:	d3f9      	bcc.n	80005a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ae:	4a0a      	ldr	r2, [pc, #40]	@ (80005d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b0:	4c0a      	ldr	r4, [pc, #40]	@ (80005dc <LoopForever+0x16>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b4:	e001      	b.n	80005ba <LoopFillZerobss>

080005b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b8:	3204      	adds	r2, #4

080005ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005bc:	d3fb      	bcc.n	80005b6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80005be:	f000 f811 	bl	80005e4 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80005c2:	f7ff ffd9 	bl	8000578 <main>

080005c6 <LoopForever>:

LoopForever:
  b LoopForever
 80005c6:	e7fe      	b.n	80005c6 <LoopForever>
  ldr   r0, =_estack
 80005c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005d4:	0800065c 	.word	0x0800065c
  ldr r2, =_sbss
 80005d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005dc:	2000001c 	.word	0x2000001c

080005e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e0:	e7fe      	b.n	80005e0 <ADC1_2_IRQHandler>
	...

080005e4 <__libc_init_array>:
 80005e4:	b570      	push	{r4, r5, r6, lr}
 80005e6:	4d0d      	ldr	r5, [pc, #52]	@ (800061c <__libc_init_array+0x38>)
 80005e8:	4c0d      	ldr	r4, [pc, #52]	@ (8000620 <__libc_init_array+0x3c>)
 80005ea:	1b64      	subs	r4, r4, r5
 80005ec:	10a4      	asrs	r4, r4, #2
 80005ee:	2600      	movs	r6, #0
 80005f0:	42a6      	cmp	r6, r4
 80005f2:	d109      	bne.n	8000608 <__libc_init_array+0x24>
 80005f4:	4d0b      	ldr	r5, [pc, #44]	@ (8000624 <__libc_init_array+0x40>)
 80005f6:	4c0c      	ldr	r4, [pc, #48]	@ (8000628 <__libc_init_array+0x44>)
 80005f8:	f000 f818 	bl	800062c <_init>
 80005fc:	1b64      	subs	r4, r4, r5
 80005fe:	10a4      	asrs	r4, r4, #2
 8000600:	2600      	movs	r6, #0
 8000602:	42a6      	cmp	r6, r4
 8000604:	d105      	bne.n	8000612 <__libc_init_array+0x2e>
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f855 3b04 	ldr.w	r3, [r5], #4
 800060c:	4798      	blx	r3
 800060e:	3601      	adds	r6, #1
 8000610:	e7ee      	b.n	80005f0 <__libc_init_array+0xc>
 8000612:	f855 3b04 	ldr.w	r3, [r5], #4
 8000616:	4798      	blx	r3
 8000618:	3601      	adds	r6, #1
 800061a:	e7f2      	b.n	8000602 <__libc_init_array+0x1e>
 800061c:	08000654 	.word	0x08000654
 8000620:	08000654 	.word	0x08000654
 8000624:	08000654 	.word	0x08000654
 8000628:	08000658 	.word	0x08000658

0800062c <_init>:
 800062c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062e:	bf00      	nop
 8000630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000632:	bc08      	pop	{r3}
 8000634:	469e      	mov	lr, r3
 8000636:	4770      	bx	lr

08000638 <_fini>:
 8000638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063a:	bf00      	nop
 800063c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800063e:	bc08      	pop	{r3}
 8000640:	469e      	mov	lr, r3
 8000642:	4770      	bx	lr
