
12_LCD_With_Ultrasonic_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000550  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  080006dc  080006dc  000016dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080006f0  080006f0  000016f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080006f0  080006f0  000016f8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080006f0  080006f8  000016f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006f0  080006f0  000016f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080006f4  080006f4  000016f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000016f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000016f8  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000771  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000386  00000000  00000000  00001e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d0  00000000  00000000  00002220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008b  00000000  00000000  000022f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001bef  00000000  00000000  0000237b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001232  00000000  00000000  00003f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000075a1  00000000  00000000  0000519c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000c73d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000208  00000000  00000000  0000c780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008c  00000000  00000000  0000c988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000000 	.word	0x20000000
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080006c4 	.word	0x080006c4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000004 	.word	0x20000004
 80001c8:	080006c4 	.word	0x080006c4

080001cc <delay_ms>:
#include <string.h>
#include "stm32l476xx.h"

// ---- lcd_gpio.c ----
void delay_ms(uint32_t ms)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b085      	sub	sp, #20
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < ms * 4000; i++)
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
 80001d8:	e003      	b.n	80001e2 <delay_ms+0x16>
        __asm volatile ("nop");
 80001da:	bf00      	nop
    for (uint32_t i = 0; i < ms * 4000; i++)
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	3301      	adds	r3, #1
 80001e0:	60fb      	str	r3, [r7, #12]
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80001e8:	fb02 f303 	mul.w	r3, r2, r3
 80001ec:	68fa      	ldr	r2, [r7, #12]
 80001ee:	429a      	cmp	r2, r3
 80001f0:	d3f3      	bcc.n	80001da <delay_ms+0xe>
}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	3714      	adds	r7, #20
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <GPIO_WritePin>:


static void GPIO_WritePin(GPIO_TypeDef *port, uint8_t pin, uint8_t value) {
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	460b      	mov	r3, r1
 800020a:	70fb      	strb	r3, [r7, #3]
 800020c:	4613      	mov	r3, r2
 800020e:	70bb      	strb	r3, [r7, #2]
    if(value)
 8000210:	78bb      	ldrb	r3, [r7, #2]
 8000212:	2b00      	cmp	r3, #0
 8000214:	d009      	beq.n	800022a <GPIO_WritePin+0x2a>
        port->ODR |= (1 << pin);
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	695b      	ldr	r3, [r3, #20]
 800021a:	78fa      	ldrb	r2, [r7, #3]
 800021c:	2101      	movs	r1, #1
 800021e:	fa01 f202 	lsl.w	r2, r1, r2
 8000222:	431a      	orrs	r2, r3
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	615a      	str	r2, [r3, #20]
    else
        port->ODR &= ~(1 << pin);
}
 8000228:	e009      	b.n	800023e <GPIO_WritePin+0x3e>
        port->ODR &= ~(1 << pin);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	78fa      	ldrb	r2, [r7, #3]
 8000230:	2101      	movs	r1, #1
 8000232:	fa01 f202 	lsl.w	r2, r1, r2
 8000236:	43d2      	mvns	r2, r2
 8000238:	401a      	ands	r2, r3
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	615a      	str	r2, [r3, #20]
}
 800023e:	bf00      	nop
 8000240:	370c      	adds	r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
	...

0800024c <LCD_Send4Bits>:

static void LCD_Send4Bits(uint8_t data) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
    GPIO_WritePin(LCD_PORTB, LCD_D4_PIN, (data >> 0) & 1);
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	f003 0301 	and.w	r3, r3, #1
 800025c:	b2db      	uxtb	r3, r3
 800025e:	461a      	mov	r2, r3
 8000260:	2103      	movs	r1, #3
 8000262:	481d      	ldr	r0, [pc, #116]	@ (80002d8 <LCD_Send4Bits+0x8c>)
 8000264:	f7ff ffcc 	bl	8000200 <GPIO_WritePin>
    GPIO_WritePin(LCD_PORTB, LCD_D5_PIN, (data >> 1) & 1);
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	085b      	lsrs	r3, r3, #1
 800026c:	b2db      	uxtb	r3, r3
 800026e:	f003 0301 	and.w	r3, r3, #1
 8000272:	b2db      	uxtb	r3, r3
 8000274:	461a      	mov	r2, r3
 8000276:	2102      	movs	r1, #2
 8000278:	4817      	ldr	r0, [pc, #92]	@ (80002d8 <LCD_Send4Bits+0x8c>)
 800027a:	f7ff ffc1 	bl	8000200 <GPIO_WritePin>
    GPIO_WritePin(LCD_PORTB, LCD_D6_PIN, (data >> 2) & 1);
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	089b      	lsrs	r3, r3, #2
 8000282:	b2db      	uxtb	r3, r3
 8000284:	f003 0301 	and.w	r3, r3, #1
 8000288:	b2db      	uxtb	r3, r3
 800028a:	461a      	mov	r2, r3
 800028c:	2101      	movs	r1, #1
 800028e:	4812      	ldr	r0, [pc, #72]	@ (80002d8 <LCD_Send4Bits+0x8c>)
 8000290:	f7ff ffb6 	bl	8000200 <GPIO_WritePin>
    GPIO_WritePin(LCD_PORTB, LCD_D7_PIN, (data >> 3) & 1);
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	08db      	lsrs	r3, r3, #3
 8000298:	b2db      	uxtb	r3, r3
 800029a:	f003 0301 	and.w	r3, r3, #1
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	461a      	mov	r2, r3
 80002a2:	2100      	movs	r1, #0
 80002a4:	480c      	ldr	r0, [pc, #48]	@ (80002d8 <LCD_Send4Bits+0x8c>)
 80002a6:	f7ff ffab 	bl	8000200 <GPIO_WritePin>

    GPIO_WritePin(LCD_PORTA, LCD_EN_PIN, 1);
 80002aa:	2201      	movs	r2, #1
 80002ac:	2109      	movs	r1, #9
 80002ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002b2:	f7ff ffa5 	bl	8000200 <GPIO_WritePin>
    delay_ms(1);
 80002b6:	2001      	movs	r0, #1
 80002b8:	f7ff ff88 	bl	80001cc <delay_ms>
    GPIO_WritePin(LCD_PORTA, LCD_EN_PIN, 0);
 80002bc:	2200      	movs	r2, #0
 80002be:	2109      	movs	r1, #9
 80002c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002c4:	f7ff ff9c 	bl	8000200 <GPIO_WritePin>
    delay_ms(1);
 80002c8:	2001      	movs	r0, #1
 80002ca:	f7ff ff7f 	bl	80001cc <delay_ms>
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	48000400 	.word	0x48000400

080002dc <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
    GPIO_WritePin(LCD_PORTA, LCD_RS_PIN, 0);
 80002e6:	2200      	movs	r2, #0
 80002e8:	2108      	movs	r1, #8
 80002ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ee:	f7ff ff87 	bl	8000200 <GPIO_WritePin>
    LCD_Send4Bits(cmd >> 4);
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	091b      	lsrs	r3, r3, #4
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	4618      	mov	r0, r3
 80002fa:	f7ff ffa7 	bl	800024c <LCD_Send4Bits>
    LCD_Send4Bits(cmd & 0x0F);
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	f003 030f 	and.w	r3, r3, #15
 8000304:	b2db      	uxtb	r3, r3
 8000306:	4618      	mov	r0, r3
 8000308:	f7ff ffa0 	bl	800024c <LCD_Send4Bits>
    delay_ms(2);
 800030c:	2002      	movs	r0, #2
 800030e:	f7ff ff5d 	bl	80001cc <delay_ms>
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 800031a:	b580      	push	{r7, lr}
 800031c:	b082      	sub	sp, #8
 800031e:	af00      	add	r7, sp, #0
 8000320:	4603      	mov	r3, r0
 8000322:	71fb      	strb	r3, [r7, #7]
    GPIO_WritePin(LCD_PORTA, LCD_RS_PIN, 1);
 8000324:	2201      	movs	r2, #1
 8000326:	2108      	movs	r1, #8
 8000328:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800032c:	f7ff ff68 	bl	8000200 <GPIO_WritePin>
    LCD_Send4Bits(data >> 4);
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	091b      	lsrs	r3, r3, #4
 8000334:	b2db      	uxtb	r3, r3
 8000336:	4618      	mov	r0, r3
 8000338:	f7ff ff88 	bl	800024c <LCD_Send4Bits>
    LCD_Send4Bits(data & 0x0F);
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	f003 030f 	and.w	r3, r3, #15
 8000342:	b2db      	uxtb	r3, r3
 8000344:	4618      	mov	r0, r3
 8000346:	f7ff ff81 	bl	800024c <LCD_Send4Bits>
    delay_ms(2);
 800034a:	2002      	movs	r0, #2
 800034c:	f7ff ff3e 	bl	80001cc <delay_ms>
}
 8000350:	bf00      	nop
 8000352:	3708      	adds	r7, #8
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <LCD_Init>:

void LCD_Init(void) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOBEN;
 800035e:	4b2f      	ldr	r3, [pc, #188]	@ (800041c <LCD_Init+0xc4>)
 8000360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000362:	4a2e      	ldr	r2, [pc, #184]	@ (800041c <LCD_Init+0xc4>)
 8000364:	f043 0303 	orr.w	r3, r3, #3
 8000368:	6393      	str	r3, [r2, #56]	@ 0x38

    // PA8, PA9 output
    LCD_PORTA->MODER &= ~((3 << (2 * LCD_RS_PIN)) | (3 << (2 * LCD_EN_PIN)));
 800036a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000374:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000378:	6013      	str	r3, [r2, #0]
    LCD_PORTA->MODER |=  ((1 << (2 * LCD_RS_PIN)) | (1 << (2 * LCD_EN_PIN)));
 800037a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000384:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000388:	6013      	str	r3, [r2, #0]

    // PB0–PB3 output
    for (int i = 0; i <= 3; i++) {
 800038a:	2300      	movs	r3, #0
 800038c:	607b      	str	r3, [r7, #4]
 800038e:	e019      	b.n	80003c4 <LCD_Init+0x6c>
        LCD_PORTB->MODER &= ~(3 << (2 * i));
 8000390:	4b23      	ldr	r3, [pc, #140]	@ (8000420 <LCD_Init+0xc8>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	687a      	ldr	r2, [r7, #4]
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	2103      	movs	r1, #3
 800039a:	fa01 f202 	lsl.w	r2, r1, r2
 800039e:	43d2      	mvns	r2, r2
 80003a0:	4611      	mov	r1, r2
 80003a2:	4a1f      	ldr	r2, [pc, #124]	@ (8000420 <LCD_Init+0xc8>)
 80003a4:	400b      	ands	r3, r1
 80003a6:	6013      	str	r3, [r2, #0]
        LCD_PORTB->MODER |=  (1 << (2 * i));
 80003a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000420 <LCD_Init+0xc8>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	2101      	movs	r1, #1
 80003b2:	fa01 f202 	lsl.w	r2, r1, r2
 80003b6:	4611      	mov	r1, r2
 80003b8:	4a19      	ldr	r2, [pc, #100]	@ (8000420 <LCD_Init+0xc8>)
 80003ba:	430b      	orrs	r3, r1
 80003bc:	6013      	str	r3, [r2, #0]
    for (int i = 0; i <= 3; i++) {
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	3301      	adds	r3, #1
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	2b03      	cmp	r3, #3
 80003c8:	dde2      	ble.n	8000390 <LCD_Init+0x38>
    }

    delay_ms(20);
 80003ca:	2014      	movs	r0, #20
 80003cc:	f7ff fefe 	bl	80001cc <delay_ms>
    LCD_Send4Bits(0x03);
 80003d0:	2003      	movs	r0, #3
 80003d2:	f7ff ff3b 	bl	800024c <LCD_Send4Bits>
    delay_ms(5);
 80003d6:	2005      	movs	r0, #5
 80003d8:	f7ff fef8 	bl	80001cc <delay_ms>
    LCD_Send4Bits(0x03);
 80003dc:	2003      	movs	r0, #3
 80003de:	f7ff ff35 	bl	800024c <LCD_Send4Bits>
    delay_ms(1);
 80003e2:	2001      	movs	r0, #1
 80003e4:	f7ff fef2 	bl	80001cc <delay_ms>
    LCD_Send4Bits(0x02); // 4-bit mode
 80003e8:	2002      	movs	r0, #2
 80003ea:	f7ff ff2f 	bl	800024c <LCD_Send4Bits>

    LCD_SendCommand(0x28); // 4-bit, 2 lines
 80003ee:	2028      	movs	r0, #40	@ 0x28
 80003f0:	f7ff ff74 	bl	80002dc <LCD_SendCommand>
    LCD_SendCommand(0x0C); // Display ON, Cursor OFF
 80003f4:	200c      	movs	r0, #12
 80003f6:	f7ff ff71 	bl	80002dc <LCD_SendCommand>
    LCD_SendCommand(0x06); // Entry mode
 80003fa:	2006      	movs	r0, #6
 80003fc:	f7ff ff6e 	bl	80002dc <LCD_SendCommand>
    LCD_SendCommand(0x01); // Clear
 8000400:	2001      	movs	r0, #1
 8000402:	f7ff ff6b 	bl	80002dc <LCD_SendCommand>
    delay_ms(5);
 8000406:	2005      	movs	r0, #5
 8000408:	f7ff fee0 	bl	80001cc <delay_ms>

    // Show "READY" immediately
    LCD_Print("READY");
 800040c:	4805      	ldr	r0, [pc, #20]	@ (8000424 <LCD_Init+0xcc>)
 800040e:	f000 f815 	bl	800043c <LCD_Print>
}
 8000412:	bf00      	nop
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40021000 	.word	0x40021000
 8000420:	48000400 	.word	0x48000400
 8000424:	080006dc 	.word	0x080006dc

08000428 <LCD_Clear>:

void LCD_Clear(void) {
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
    LCD_SendCommand(0x01);
 800042c:	2001      	movs	r0, #1
 800042e:	f7ff ff55 	bl	80002dc <LCD_SendCommand>
    delay_ms(2);
 8000432:	2002      	movs	r0, #2
 8000434:	f7ff feca 	bl	80001cc <delay_ms>
}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}

0800043c <LCD_Print>:

void LCD_Print(char *str) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000444:	e006      	b.n	8000454 <LCD_Print+0x18>
        LCD_SendData(*str++);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	1c5a      	adds	r2, r3, #1
 800044a:	607a      	str	r2, [r7, #4]
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff ff63 	bl	800031a <LCD_SendData>
    while (*str) {
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d1f4      	bne.n	8000446 <LCD_Print+0xa>
    }
}
 800045c:	bf00      	nop
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <delay_us>:
 */
#include "ultrasonic_gpio.h"
#include "stm32l476xx.h"

void delay_us(uint32_t us)
{
 8000466:	b480      	push	{r7}
 8000468:	b085      	sub	sp, #20
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < us * 4; i++)
 800046e:	2300      	movs	r3, #0
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	e003      	b.n	800047c <delay_us+0x16>
        __asm volatile ("nop");
 8000474:	bf00      	nop
    for (uint32_t i = 0; i < us * 4; i++)
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	3301      	adds	r3, #1
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	68fa      	ldr	r2, [r7, #12]
 8000482:	429a      	cmp	r2, r3
 8000484:	d3f6      	bcc.n	8000474 <delay_us+0xe>
}
 8000486:	bf00      	nop
 8000488:	bf00      	nop
 800048a:	3714      	adds	r7, #20
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr

08000494 <Ultrasonic_Init>:

void Ultrasonic_Init(void) {
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000498:	4b0e      	ldr	r3, [pc, #56]	@ (80004d4 <Ultrasonic_Init+0x40>)
 800049a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800049c:	4a0d      	ldr	r2, [pc, #52]	@ (80004d4 <Ultrasonic_Init+0x40>)
 800049e:	f043 0302 	orr.w	r3, r3, #2
 80004a2:	6393      	str	r3, [r2, #56]	@ 0x38

    // TRIG = Output
    TRIG_PORT->MODER &= ~(3 << (2 * TRIG_PIN));
 80004a4:	4b0c      	ldr	r3, [pc, #48]	@ (80004d8 <Ultrasonic_Init+0x44>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a0b      	ldr	r2, [pc, #44]	@ (80004d8 <Ultrasonic_Init+0x44>)
 80004aa:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80004ae:	6013      	str	r3, [r2, #0]
    TRIG_PORT->MODER |=  (1 << (2 * TRIG_PIN));
 80004b0:	4b09      	ldr	r3, [pc, #36]	@ (80004d8 <Ultrasonic_Init+0x44>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a08      	ldr	r2, [pc, #32]	@ (80004d8 <Ultrasonic_Init+0x44>)
 80004b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004ba:	6013      	str	r3, [r2, #0]

    // ECHO = Input
    ECHO_PORT->MODER &= ~(3 << (2 * ECHO_PIN));
 80004bc:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <Ultrasonic_Init+0x44>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a05      	ldr	r2, [pc, #20]	@ (80004d8 <Ultrasonic_Init+0x44>)
 80004c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80004c6:	6013      	str	r3, [r2, #0]
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000
 80004d8:	48000400 	.word	0x48000400

080004dc <Ultrasonic_Read>:

uint32_t Ultrasonic_Read(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
    uint32_t count = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]

    // Send trigger pulse
    TRIG_PORT->ODR &= ~(1 << TRIG_PIN);
 80004e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000550 <Ultrasonic_Read+0x74>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	4a19      	ldr	r2, [pc, #100]	@ (8000550 <Ultrasonic_Read+0x74>)
 80004ec:	f023 0320 	bic.w	r3, r3, #32
 80004f0:	6153      	str	r3, [r2, #20]
    delay_us(2);
 80004f2:	2002      	movs	r0, #2
 80004f4:	f7ff ffb7 	bl	8000466 <delay_us>
    TRIG_PORT->ODR |= (1 << TRIG_PIN);
 80004f8:	4b15      	ldr	r3, [pc, #84]	@ (8000550 <Ultrasonic_Read+0x74>)
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	4a14      	ldr	r2, [pc, #80]	@ (8000550 <Ultrasonic_Read+0x74>)
 80004fe:	f043 0320 	orr.w	r3, r3, #32
 8000502:	6153      	str	r3, [r2, #20]
    delay_us(10);
 8000504:	200a      	movs	r0, #10
 8000506:	f7ff ffae 	bl	8000466 <delay_us>
    TRIG_PORT->ODR &= ~(1 << TRIG_PIN);
 800050a:	4b11      	ldr	r3, [pc, #68]	@ (8000550 <Ultrasonic_Read+0x74>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	4a10      	ldr	r2, [pc, #64]	@ (8000550 <Ultrasonic_Read+0x74>)
 8000510:	f023 0320 	bic.w	r3, r3, #32
 8000514:	6153      	str	r3, [r2, #20]

    // Wait for ECHO HIGH
    while(!(ECHO_PORT->IDR & (1 << ECHO_PIN)));
 8000516:	bf00      	nop
 8000518:	4b0d      	ldr	r3, [pc, #52]	@ (8000550 <Ultrasonic_Read+0x74>)
 800051a:	691b      	ldr	r3, [r3, #16]
 800051c:	f003 0310 	and.w	r3, r3, #16
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0f9      	beq.n	8000518 <Ultrasonic_Read+0x3c>
    while(ECHO_PORT->IDR & (1 << ECHO_PIN)) {
 8000524:	e005      	b.n	8000532 <Ultrasonic_Read+0x56>
        count++;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	3301      	adds	r3, #1
 800052a:	607b      	str	r3, [r7, #4]
        delay_us(1);
 800052c:	2001      	movs	r0, #1
 800052e:	f7ff ff9a 	bl	8000466 <delay_us>
    while(ECHO_PORT->IDR & (1 << ECHO_PIN)) {
 8000532:	4b07      	ldr	r3, [pc, #28]	@ (8000550 <Ultrasonic_Read+0x74>)
 8000534:	691b      	ldr	r3, [r3, #16]
 8000536:	f003 0310 	and.w	r3, r3, #16
 800053a:	2b00      	cmp	r3, #0
 800053c:	d1f3      	bne.n	8000526 <Ultrasonic_Read+0x4a>
    }

    // Convert to cm (approx)
    return (count / 58);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a04      	ldr	r2, [pc, #16]	@ (8000554 <Ultrasonic_Read+0x78>)
 8000542:	fba2 2303 	umull	r2, r3, r2, r3
 8000546:	095b      	lsrs	r3, r3, #5
}
 8000548:	4618      	mov	r0, r3
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	48000400 	.word	0x48000400
 8000554:	8d3dcb09 	.word	0x8d3dcb09

08000558 <main>:
#include "lcd_gpio.h"
#include "ultrasonic_gpio.h"


int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
    LCD_Init();          // LCD shows "READY"
 800055e:	f7ff fefb 	bl	8000358 <LCD_Init>
    Ultrasonic_Init();   // Initialize ultrasonic GPIO
 8000562:	f7ff ff97 	bl	8000494 <Ultrasonic_Init>

    while (1)
    {
        uint32_t distance = Ultrasonic_Read();
 8000566:	f7ff ffb9 	bl	80004dc <Ultrasonic_Read>
 800056a:	6138      	str	r0, [r7, #16]
        LCD_Clear();
 800056c:	f7ff ff5c 	bl	8000428 <LCD_Clear>

        LCD_Print("Dist:");
 8000570:	4829      	ldr	r0, [pc, #164]	@ (8000618 <main+0xc0>)
 8000572:	f7ff ff63 	bl	800043c <LCD_Print>
        char buf[10];
        int i = 0, temp = distance;
 8000576:	2300      	movs	r3, #0
 8000578:	61fb      	str	r3, [r7, #28]
 800057a:	693b      	ldr	r3, [r7, #16]
 800057c:	61bb      	str	r3, [r7, #24]
        if (temp == 0) buf[i++] = '0';
 800057e:	69bb      	ldr	r3, [r7, #24]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d126      	bne.n	80005d2 <main+0x7a>
 8000584:	69fb      	ldr	r3, [r7, #28]
 8000586:	1c5a      	adds	r2, r3, #1
 8000588:	61fa      	str	r2, [r7, #28]
 800058a:	3320      	adds	r3, #32
 800058c:	443b      	add	r3, r7
 800058e:	2230      	movs	r2, #48	@ 0x30
 8000590:	f803 2c1c 	strb.w	r2, [r3, #-28]
        while (temp > 0) {
 8000594:	e01d      	b.n	80005d2 <main+0x7a>
            buf[i++] = (temp % 10) + '0';
 8000596:	69ba      	ldr	r2, [r7, #24]
 8000598:	4b20      	ldr	r3, [pc, #128]	@ (800061c <main+0xc4>)
 800059a:	fb83 1302 	smull	r1, r3, r3, r2
 800059e:	1099      	asrs	r1, r3, #2
 80005a0:	17d3      	asrs	r3, r2, #31
 80005a2:	1ac9      	subs	r1, r1, r3
 80005a4:	460b      	mov	r3, r1
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	440b      	add	r3, r1
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	1ad1      	subs	r1, r2, r3
 80005ae:	b2ca      	uxtb	r2, r1
 80005b0:	69fb      	ldr	r3, [r7, #28]
 80005b2:	1c59      	adds	r1, r3, #1
 80005b4:	61f9      	str	r1, [r7, #28]
 80005b6:	3230      	adds	r2, #48	@ 0x30
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	3320      	adds	r3, #32
 80005bc:	443b      	add	r3, r7
 80005be:	f803 2c1c 	strb.w	r2, [r3, #-28]
            temp /= 10;
 80005c2:	69bb      	ldr	r3, [r7, #24]
 80005c4:	4a15      	ldr	r2, [pc, #84]	@ (800061c <main+0xc4>)
 80005c6:	fb82 1203 	smull	r1, r2, r2, r3
 80005ca:	1092      	asrs	r2, r2, #2
 80005cc:	17db      	asrs	r3, r3, #31
 80005ce:	1ad3      	subs	r3, r2, r3
 80005d0:	61bb      	str	r3, [r7, #24]
        while (temp > 0) {
 80005d2:	69bb      	ldr	r3, [r7, #24]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dcde      	bgt.n	8000596 <main+0x3e>
        }
        for (int j = i - 1; j >= 0; j--)
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	3b01      	subs	r3, #1
 80005dc:	617b      	str	r3, [r7, #20]
 80005de:	e009      	b.n	80005f4 <main+0x9c>
            LCD_SendData(buf[j]);
 80005e0:	1d3a      	adds	r2, r7, #4
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	4413      	add	r3, r2
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff fe96 	bl	800031a <LCD_SendData>
        for (int j = i - 1; j >= 0; j--)
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	3b01      	subs	r3, #1
 80005f2:	617b      	str	r3, [r7, #20]
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	daf2      	bge.n	80005e0 <main+0x88>
        LCD_Print("cm");
 80005fa:	4809      	ldr	r0, [pc, #36]	@ (8000620 <main+0xc8>)
 80005fc:	f7ff ff1e 	bl	800043c <LCD_Print>

        for (volatile int d = 0; d < 500000; d++);
 8000600:	2300      	movs	r3, #0
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	e002      	b.n	800060c <main+0xb4>
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	3301      	adds	r3, #1
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	4a05      	ldr	r2, [pc, #20]	@ (8000624 <main+0xcc>)
 8000610:	4293      	cmp	r3, r2
 8000612:	ddf8      	ble.n	8000606 <main+0xae>
    {
 8000614:	e7a7      	b.n	8000566 <main+0xe>
 8000616:	bf00      	nop
 8000618:	080006e4 	.word	0x080006e4
 800061c:	66666667 	.word	0x66666667
 8000620:	080006ec 	.word	0x080006ec
 8000624:	0007a11f 	.word	0x0007a11f

08000628 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000628:	480d      	ldr	r0, [pc, #52]	@ (8000660 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800062a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800062c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000630:	480c      	ldr	r0, [pc, #48]	@ (8000664 <LoopForever+0x6>)
  ldr r1, =_edata
 8000632:	490d      	ldr	r1, [pc, #52]	@ (8000668 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000634:	4a0d      	ldr	r2, [pc, #52]	@ (800066c <LoopForever+0xe>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000638:	e002      	b.n	8000640 <LoopCopyDataInit>

0800063a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800063c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063e:	3304      	adds	r3, #4

08000640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000644:	d3f9      	bcc.n	800063a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000646:	4a0a      	ldr	r2, [pc, #40]	@ (8000670 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000648:	4c0a      	ldr	r4, [pc, #40]	@ (8000674 <LoopForever+0x16>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800064c:	e001      	b.n	8000652 <LoopFillZerobss>

0800064e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000650:	3204      	adds	r2, #4

08000652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000654:	d3fb      	bcc.n	800064e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000656:	f000 f811 	bl	800067c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800065a:	f7ff ff7d 	bl	8000558 <main>

0800065e <LoopForever>:

LoopForever:
  b LoopForever
 800065e:	e7fe      	b.n	800065e <LoopForever>
  ldr   r0, =_estack
 8000660:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000668:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800066c:	080006f8 	.word	0x080006f8
  ldr r2, =_sbss
 8000670:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000674:	2000001c 	.word	0x2000001c

08000678 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000678:	e7fe      	b.n	8000678 <ADC1_2_IRQHandler>
	...

0800067c <__libc_init_array>:
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	4d0d      	ldr	r5, [pc, #52]	@ (80006b4 <__libc_init_array+0x38>)
 8000680:	4c0d      	ldr	r4, [pc, #52]	@ (80006b8 <__libc_init_array+0x3c>)
 8000682:	1b64      	subs	r4, r4, r5
 8000684:	10a4      	asrs	r4, r4, #2
 8000686:	2600      	movs	r6, #0
 8000688:	42a6      	cmp	r6, r4
 800068a:	d109      	bne.n	80006a0 <__libc_init_array+0x24>
 800068c:	4d0b      	ldr	r5, [pc, #44]	@ (80006bc <__libc_init_array+0x40>)
 800068e:	4c0c      	ldr	r4, [pc, #48]	@ (80006c0 <__libc_init_array+0x44>)
 8000690:	f000 f818 	bl	80006c4 <_init>
 8000694:	1b64      	subs	r4, r4, r5
 8000696:	10a4      	asrs	r4, r4, #2
 8000698:	2600      	movs	r6, #0
 800069a:	42a6      	cmp	r6, r4
 800069c:	d105      	bne.n	80006aa <__libc_init_array+0x2e>
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a4:	4798      	blx	r3
 80006a6:	3601      	adds	r6, #1
 80006a8:	e7ee      	b.n	8000688 <__libc_init_array+0xc>
 80006aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ae:	4798      	blx	r3
 80006b0:	3601      	adds	r6, #1
 80006b2:	e7f2      	b.n	800069a <__libc_init_array+0x1e>
 80006b4:	080006f0 	.word	0x080006f0
 80006b8:	080006f0 	.word	0x080006f0
 80006bc:	080006f0 	.word	0x080006f0
 80006c0:	080006f4 	.word	0x080006f4

080006c4 <_init>:
 80006c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c6:	bf00      	nop
 80006c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ca:	bc08      	pop	{r3}
 80006cc:	469e      	mov	lr, r3
 80006ce:	4770      	bx	lr

080006d0 <_fini>:
 80006d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d2:	bf00      	nop
 80006d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006d6:	bc08      	pop	{r3}
 80006d8:	469e      	mov	lr, r3
 80006da:	4770      	bx	lr
