
03_SPI_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e8  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000374  0800037c  0000137c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000374  08000374  0000137c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000374  08000374  0000137c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000374  0800037c  0000137c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000374  08000374  00001374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000378  08000378  00001378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000137c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000137c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000445  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000019f  00000000  00000000  000017f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000070  00000000  00000000  00001990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000046  00000000  00000000  00001a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000105b  00000000  00000000  00001a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000009f7  00000000  00000000  00002aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003fa2  00000000  00000000  00003498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000743a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000b4  00000000  00000000  00007480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00007534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000000 	.word	0x20000000
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800035c 	.word	0x0800035c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000004 	.word	0x20000004
 80001c8:	0800035c 	.word	0x0800035c

080001cc <SPI1_Init>:
#include "stm32l4_spi_driver.h"

void SPI1_Init(void)
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80001d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000250 <SPI1_Init+0x84>)
 80001d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80001d4:	4a1e      	ldr	r2, [pc, #120]	@ (8000250 <SPI1_Init+0x84>)
 80001d6:	f043 0301 	orr.w	r3, r3, #1
 80001da:	6493      	str	r3, [r2, #72]	@ 0x48
    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80001dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000250 <SPI1_Init+0x84>)
 80001de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80001e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000250 <SPI1_Init+0x84>)
 80001e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80001e6:	65d3      	str	r3, [r2, #92]	@ 0x5c

    // Configure PA5=SCK, PA6=MISO, PA7=MOSI (Alternate Function 5)
    GPIOA->MODER &= ~((3U << 10) | (3U << 12) | (3U << 14));
 80001e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80001f2:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 80001f6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  ((2U << 10) | (2U << 12) | (2U << 14));
 80001f8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000202:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 8000206:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (5U << 20) | (5U << 24) | (5U << 28);
 8000208:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800020c:	6a1b      	ldr	r3, [r3, #32]
 800020e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000212:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000216:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 800021a:	6213      	str	r3, [r2, #32]

    // SPI1 Config
    SPI1->CR1 = 0;
 800021c:	4b0d      	ldr	r3, [pc, #52]	@ (8000254 <SPI1_Init+0x88>)
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
    SPI1->CR1 |= (1U << 2);   // Master mode
 8000222:	4b0c      	ldr	r3, [pc, #48]	@ (8000254 <SPI1_Init+0x88>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a0b      	ldr	r2, [pc, #44]	@ (8000254 <SPI1_Init+0x88>)
 8000228:	f043 0304 	orr.w	r3, r3, #4
 800022c:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (3U << 3);   // Baud rate = fPCLK/16
 800022e:	4b09      	ldr	r3, [pc, #36]	@ (8000254 <SPI1_Init+0x88>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a08      	ldr	r2, [pc, #32]	@ (8000254 <SPI1_Init+0x88>)
 8000234:	f043 0318 	orr.w	r3, r3, #24
 8000238:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (1U << 6);   // SPI enable
 800023a:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <SPI1_Init+0x88>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a05      	ldr	r2, [pc, #20]	@ (8000254 <SPI1_Init+0x88>)
 8000240:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000244:	6013      	str	r3, [r2, #0]
}
 8000246:	bf00      	nop
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	40021000 	.word	0x40021000
 8000254:	40013000 	.word	0x40013000

08000258 <SPI1_TransmitReceive>:

uint8_t SPI1_TransmitReceive(uint8_t data)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]
    SPI1->DR = data;                     // Transmit
 8000262:	4a09      	ldr	r2, [pc, #36]	@ (8000288 <SPI1_TransmitReceive+0x30>)
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	60d3      	str	r3, [r2, #12]
    while (!(SPI1->SR & (1U << 0)));     // Wait for RXNE flag
 8000268:	bf00      	nop
 800026a:	4b07      	ldr	r3, [pc, #28]	@ (8000288 <SPI1_TransmitReceive+0x30>)
 800026c:	689b      	ldr	r3, [r3, #8]
 800026e:	f003 0301 	and.w	r3, r3, #1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d0f9      	beq.n	800026a <SPI1_TransmitReceive+0x12>
    return SPI1->DR;                     // Return received data
 8000276:	4b04      	ldr	r3, [pc, #16]	@ (8000288 <SPI1_TransmitReceive+0x30>)
 8000278:	68db      	ldr	r3, [r3, #12]
 800027a:	b2db      	uxtb	r3, r3
}
 800027c:	4618      	mov	r0, r3
 800027e:	370c      	adds	r7, #12
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	40013000 	.word	0x40013000

0800028c <main>:
 */

#include "stm32l4_spi_driver.h"

int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
    SPI1_Init();
 8000292:	f7ff ff9b 	bl	80001cc <SPI1_Init>

    uint8_t tx = 0x55;
 8000296:	2355      	movs	r3, #85	@ 0x55
 8000298:	71fb      	strb	r3, [r7, #7]
    uint8_t rx;

    while (1)
    {
        rx = SPI1_TransmitReceive(tx);
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	4618      	mov	r0, r3
 800029e:	f7ff ffdb 	bl	8000258 <SPI1_TransmitReceive>
 80002a2:	4603      	mov	r3, r0
 80002a4:	71bb      	strb	r3, [r7, #6]
        for (volatile int i = 0; i < 100000; i++); // small delay
 80002a6:	2300      	movs	r3, #0
 80002a8:	603b      	str	r3, [r7, #0]
 80002aa:	e002      	b.n	80002b2 <main+0x26>
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	3301      	adds	r3, #1
 80002b0:	603b      	str	r3, [r7, #0]
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	4a01      	ldr	r2, [pc, #4]	@ (80002bc <main+0x30>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	ddf8      	ble.n	80002ac <main+0x20>
        rx = SPI1_TransmitReceive(tx);
 80002ba:	e7ee      	b.n	800029a <main+0xe>
 80002bc:	0001869f 	.word	0x0001869f

080002c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c0:	480d      	ldr	r0, [pc, #52]	@ (80002f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c8:	480c      	ldr	r0, [pc, #48]	@ (80002fc <LoopForever+0x6>)
  ldr r1, =_edata
 80002ca:	490d      	ldr	r1, [pc, #52]	@ (8000300 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000304 <LoopForever+0xe>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d0:	e002      	b.n	80002d8 <LoopCopyDataInit>

080002d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d6:	3304      	adds	r3, #4

080002d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002dc:	d3f9      	bcc.n	80002d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002de:	4a0a      	ldr	r2, [pc, #40]	@ (8000308 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e0:	4c0a      	ldr	r4, [pc, #40]	@ (800030c <LoopForever+0x16>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e4:	e001      	b.n	80002ea <LoopFillZerobss>

080002e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e8:	3204      	adds	r2, #4

080002ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002ec:	d3fb      	bcc.n	80002e6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80002ee:	f000 f811 	bl	8000314 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80002f2:	f7ff ffcb 	bl	800028c <main>

080002f6 <LoopForever>:

LoopForever:
  b LoopForever
 80002f6:	e7fe      	b.n	80002f6 <LoopForever>
  ldr   r0, =_estack
 80002f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000300:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000304:	0800037c 	.word	0x0800037c
  ldr r2, =_sbss
 8000308:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800030c:	2000001c 	.word	0x2000001c

08000310 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000310:	e7fe      	b.n	8000310 <ADC1_2_IRQHandler>
	...

08000314 <__libc_init_array>:
 8000314:	b570      	push	{r4, r5, r6, lr}
 8000316:	4d0d      	ldr	r5, [pc, #52]	@ (800034c <__libc_init_array+0x38>)
 8000318:	4c0d      	ldr	r4, [pc, #52]	@ (8000350 <__libc_init_array+0x3c>)
 800031a:	1b64      	subs	r4, r4, r5
 800031c:	10a4      	asrs	r4, r4, #2
 800031e:	2600      	movs	r6, #0
 8000320:	42a6      	cmp	r6, r4
 8000322:	d109      	bne.n	8000338 <__libc_init_array+0x24>
 8000324:	4d0b      	ldr	r5, [pc, #44]	@ (8000354 <__libc_init_array+0x40>)
 8000326:	4c0c      	ldr	r4, [pc, #48]	@ (8000358 <__libc_init_array+0x44>)
 8000328:	f000 f818 	bl	800035c <_init>
 800032c:	1b64      	subs	r4, r4, r5
 800032e:	10a4      	asrs	r4, r4, #2
 8000330:	2600      	movs	r6, #0
 8000332:	42a6      	cmp	r6, r4
 8000334:	d105      	bne.n	8000342 <__libc_init_array+0x2e>
 8000336:	bd70      	pop	{r4, r5, r6, pc}
 8000338:	f855 3b04 	ldr.w	r3, [r5], #4
 800033c:	4798      	blx	r3
 800033e:	3601      	adds	r6, #1
 8000340:	e7ee      	b.n	8000320 <__libc_init_array+0xc>
 8000342:	f855 3b04 	ldr.w	r3, [r5], #4
 8000346:	4798      	blx	r3
 8000348:	3601      	adds	r6, #1
 800034a:	e7f2      	b.n	8000332 <__libc_init_array+0x1e>
 800034c:	08000374 	.word	0x08000374
 8000350:	08000374 	.word	0x08000374
 8000354:	08000374 	.word	0x08000374
 8000358:	08000378 	.word	0x08000378

0800035c <_init>:
 800035c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035e:	bf00      	nop
 8000360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000362:	bc08      	pop	{r3}
 8000364:	469e      	mov	lr, r3
 8000366:	4770      	bx	lr

08000368 <_fini>:
 8000368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036a:	bf00      	nop
 800036c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036e:	bc08      	pop	{r3}
 8000370:	469e      	mov	lr, r3
 8000372:	4770      	bx	lr
