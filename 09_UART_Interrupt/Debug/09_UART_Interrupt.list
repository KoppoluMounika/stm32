
09_UART_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d58  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ee4  08000ee4  00002024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ee4  08000ee4  00002024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000ee4  08000ee4  00001ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000eec  08000eec  00002024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000eec  08000eec  00001eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ef0  08000ef0  00001ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08000ef4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00002024  2**0
                  CONTENTS
 10 .bss          00000064  20000024  20000024  00002024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000088  20000088  00002024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002024  2**0
                  CONTENTS, READONLY
 13 .debug_info   000016dd  00000000  00000000  00002054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005db  00000000  00000000  00003731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000170  00000000  00000000  00003d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000010b  00000000  00000000  00003e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002dc1  00000000  00000000  00003f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001c04  00000000  00000000  00006d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a3d9  00000000  00000000  00008950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00012d29  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000520  00000000  00000000  00012d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  0001328c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000024 	.word	0x20000024
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08000ecc 	.word	0x08000ecc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000028 	.word	0x20000028
 80001c8:	08000ecc 	.word	0x08000ecc

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <GPIO_PeriClockControl>:
  * @param[in] pGPIOx  - Base address of GPIO peripheral (e.g., GPIOA, GPIOB, etc.)
  * @param[in] EnorDi  - Enable or disable macros: ENABLE = 1, DISABLE = 0
  * @return    - None
  * @note      - Must be called before accessing GPIO registers.
  */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	460b      	mov	r3, r1
 80001e6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80001e8:	78fb      	ldrb	r3, [r7, #3]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d157      	bne.n	800029e <GPIO_PeriClockControl+0xc2>
		if(pGPIOx==GPIOA){
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80001f4:	d106      	bne.n	8000204 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80001f6:	4b58      	ldr	r3, [pc, #352]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80001f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001fa:	4a57      	ldr	r2, [pc, #348]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80001fc:	f043 0301 	orr.w	r3, r3, #1
 8000200:	64d3      	str	r3, [r2, #76]	@ 0x4c
		}
		else if(pGPIOx==GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 8000202:	e0a3      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOB){
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4a55      	ldr	r2, [pc, #340]	@ (800035c <GPIO_PeriClockControl+0x180>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d106      	bne.n	800021a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800020c:	4b52      	ldr	r3, [pc, #328]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800020e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000210:	4a51      	ldr	r2, [pc, #324]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000212:	f043 0302 	orr.w	r3, r3, #2
 8000216:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000218:	e098      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOC){
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4a50      	ldr	r2, [pc, #320]	@ (8000360 <GPIO_PeriClockControl+0x184>)
 800021e:	4293      	cmp	r3, r2
 8000220:	d106      	bne.n	8000230 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000222:	4b4d      	ldr	r3, [pc, #308]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000226:	4a4c      	ldr	r2, [pc, #304]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000228:	f043 0304 	orr.w	r3, r3, #4
 800022c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800022e:	e08d      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOD){
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4a4c      	ldr	r2, [pc, #304]	@ (8000364 <GPIO_PeriClockControl+0x188>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d106      	bne.n	8000246 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000238:	4b47      	ldr	r3, [pc, #284]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800023a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800023c:	4a46      	ldr	r2, [pc, #280]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800023e:	f043 0308 	orr.w	r3, r3, #8
 8000242:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000244:	e082      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOE){
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	4a47      	ldr	r2, [pc, #284]	@ (8000368 <GPIO_PeriClockControl+0x18c>)
 800024a:	4293      	cmp	r3, r2
 800024c:	d106      	bne.n	800025c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800024e:	4b42      	ldr	r3, [pc, #264]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000252:	4a41      	ldr	r2, [pc, #260]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000254:	f043 0310 	orr.w	r3, r3, #16
 8000258:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800025a:	e077      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOF){
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	4a43      	ldr	r2, [pc, #268]	@ (800036c <GPIO_PeriClockControl+0x190>)
 8000260:	4293      	cmp	r3, r2
 8000262:	d106      	bne.n	8000272 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000264:	4b3c      	ldr	r3, [pc, #240]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000268:	4a3b      	ldr	r2, [pc, #236]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800026a:	f043 0320 	orr.w	r3, r3, #32
 800026e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000270:	e06c      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOG){
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4a3e      	ldr	r2, [pc, #248]	@ (8000370 <GPIO_PeriClockControl+0x194>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d106      	bne.n	8000288 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800027a:	4b37      	ldr	r3, [pc, #220]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800027c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800027e:	4a36      	ldr	r2, [pc, #216]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000284:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000286:	e061      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOH){
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4a3a      	ldr	r2, [pc, #232]	@ (8000374 <GPIO_PeriClockControl+0x198>)
 800028c:	4293      	cmp	r3, r2
 800028e:	d15d      	bne.n	800034c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000290:	4b31      	ldr	r3, [pc, #196]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000294:	4a30      	ldr	r2, [pc, #192]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800029a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800029c:	e056      	b.n	800034c <GPIO_PeriClockControl+0x170>
		if(pGPIOx==GPIOA){
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80002a4:	d106      	bne.n	80002b4 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 80002a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002aa:	4a2b      	ldr	r2, [pc, #172]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002ac:	f023 0301 	bic.w	r3, r3, #1
 80002b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002b2:	e04b      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOB){
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4a29      	ldr	r2, [pc, #164]	@ (800035c <GPIO_PeriClockControl+0x180>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d106      	bne.n	80002ca <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80002bc:	4b26      	ldr	r3, [pc, #152]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002c0:	4a25      	ldr	r2, [pc, #148]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002c2:	f023 0302 	bic.w	r3, r3, #2
 80002c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002c8:	e040      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOC){
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4a24      	ldr	r2, [pc, #144]	@ (8000360 <GPIO_PeriClockControl+0x184>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d106      	bne.n	80002e0 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80002d2:	4b21      	ldr	r3, [pc, #132]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002d6:	4a20      	ldr	r2, [pc, #128]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002d8:	f023 0304 	bic.w	r3, r3, #4
 80002dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002de:	e035      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOD){
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4a20      	ldr	r2, [pc, #128]	@ (8000364 <GPIO_PeriClockControl+0x188>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d106      	bne.n	80002f6 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80002e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ec:	4a1a      	ldr	r2, [pc, #104]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002ee:	f023 0308 	bic.w	r3, r3, #8
 80002f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002f4:	e02a      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOE){
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000368 <GPIO_PeriClockControl+0x18c>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d106      	bne.n	800030c <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80002fe:	4b16      	ldr	r3, [pc, #88]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000302:	4a15      	ldr	r2, [pc, #84]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000304:	f023 0310 	bic.w	r3, r3, #16
 8000308:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800030a:	e01f      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOF){
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4a17      	ldr	r2, [pc, #92]	@ (800036c <GPIO_PeriClockControl+0x190>)
 8000310:	4293      	cmp	r3, r2
 8000312:	d106      	bne.n	8000322 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000314:	4b10      	ldr	r3, [pc, #64]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000318:	4a0f      	ldr	r2, [pc, #60]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800031a:	f023 0320 	bic.w	r3, r3, #32
 800031e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000320:	e014      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOG){
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4a12      	ldr	r2, [pc, #72]	@ (8000370 <GPIO_PeriClockControl+0x194>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d106      	bne.n	8000338 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 800032a:	4b0b      	ldr	r3, [pc, #44]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800032e:	4a0a      	ldr	r2, [pc, #40]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000330:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000334:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000336:	e009      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOH){
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a0e      	ldr	r2, [pc, #56]	@ (8000374 <GPIO_PeriClockControl+0x198>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d105      	bne.n	800034c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000340:	4b05      	ldr	r3, [pc, #20]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000344:	4a04      	ldr	r2, [pc, #16]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000346:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800034a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	40021000 	.word	0x40021000
 800035c:	48000400 	.word	0x48000400
 8000360:	48000800 	.word	0x48000800
 8000364:	48000c00 	.word	0x48000c00
 8000368:	48001000 	.word	0x48001000
 800036c:	48001400 	.word	0x48001400
 8000370:	48001800 	.word	0x48001800
 8000374:	48001c00 	.word	0x48001c00

08000378 <GPIO_Init>:
  * @param[in] pGPIOHandle - Handle structure that contains GPIO configuration information.
  * @return    - None
  * @note      - Make sure peripheral clock for GPIO is enabled before calling this function.
  */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000378:	b480      	push	{r7}
 800037a:	b087      	sub	sp, #28
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]

    // 1. Configure the mode of GPIO pin
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	795b      	ldrb	r3, [r3, #5]
 8000388:	2b03      	cmp	r3, #3
 800038a:	d822      	bhi.n	80003d2 <GPIO_Init+0x5a>
    {
        // non-interrupt mode
        temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	795b      	ldrb	r3, [r3, #5]
 8000390:	461a      	mov	r2, r3
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	791b      	ldrb	r3, [r3, #4]
 8000396:	005b      	lsls	r3, r3, #1
 8000398:	fa02 f303 	lsl.w	r3, r2, r3
 800039c:	617b      	str	r3, [r7, #20]
        pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	791b      	ldrb	r3, [r3, #4]
 80003a8:	005b      	lsls	r3, r3, #1
 80003aa:	2103      	movs	r1, #3
 80003ac:	fa01 f303 	lsl.w	r3, r1, r3
 80003b0:	43db      	mvns	r3, r3
 80003b2:	4619      	mov	r1, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	400a      	ands	r2, r1
 80003ba:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= temp;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	6819      	ldr	r1, [r3, #0]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	697a      	ldr	r2, [r7, #20]
 80003c8:	430a      	orrs	r2, r1
 80003ca:	601a      	str	r2, [r3, #0]
        temp = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
 80003d0:	e0cb      	b.n	800056a <GPIO_Init+0x1f2>
    }
    else
    {
        // interrupt mode
        if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	795b      	ldrb	r3, [r3, #5]
 80003d6:	2b04      	cmp	r3, #4
 80003d8:	d117      	bne.n	800040a <GPIO_Init+0x92>
        {
        	EXTI->FTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003da:	4b47      	ldr	r3, [pc, #284]	@ (80004f8 <GPIO_Init+0x180>)
 80003dc:	68db      	ldr	r3, [r3, #12]
 80003de:	687a      	ldr	r2, [r7, #4]
 80003e0:	7912      	ldrb	r2, [r2, #4]
 80003e2:	4611      	mov	r1, r2
 80003e4:	2201      	movs	r2, #1
 80003e6:	408a      	lsls	r2, r1
 80003e8:	4611      	mov	r1, r2
 80003ea:	4a43      	ldr	r2, [pc, #268]	@ (80004f8 <GPIO_Init+0x180>)
 80003ec:	430b      	orrs	r3, r1
 80003ee:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR1 &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003f0:	4b41      	ldr	r3, [pc, #260]	@ (80004f8 <GPIO_Init+0x180>)
 80003f2:	689b      	ldr	r3, [r3, #8]
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	7912      	ldrb	r2, [r2, #4]
 80003f8:	4611      	mov	r1, r2
 80003fa:	2201      	movs	r2, #1
 80003fc:	408a      	lsls	r2, r1
 80003fe:	43d2      	mvns	r2, r2
 8000400:	4611      	mov	r1, r2
 8000402:	4a3d      	ldr	r2, [pc, #244]	@ (80004f8 <GPIO_Init+0x180>)
 8000404:	400b      	ands	r3, r1
 8000406:	6093      	str	r3, [r2, #8]
 8000408:	e035      	b.n	8000476 <GPIO_Init+0xfe>

        }
        else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	795b      	ldrb	r3, [r3, #5]
 800040e:	2b05      	cmp	r3, #5
 8000410:	d117      	bne.n	8000442 <GPIO_Init+0xca>
        {
        	EXTI->RTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000412:	4b39      	ldr	r3, [pc, #228]	@ (80004f8 <GPIO_Init+0x180>)
 8000414:	689b      	ldr	r3, [r3, #8]
 8000416:	687a      	ldr	r2, [r7, #4]
 8000418:	7912      	ldrb	r2, [r2, #4]
 800041a:	4611      	mov	r1, r2
 800041c:	2201      	movs	r2, #1
 800041e:	408a      	lsls	r2, r1
 8000420:	4611      	mov	r1, r2
 8000422:	4a35      	ldr	r2, [pc, #212]	@ (80004f8 <GPIO_Init+0x180>)
 8000424:	430b      	orrs	r3, r1
 8000426:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR1 &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000428:	4b33      	ldr	r3, [pc, #204]	@ (80004f8 <GPIO_Init+0x180>)
 800042a:	68db      	ldr	r3, [r3, #12]
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	7912      	ldrb	r2, [r2, #4]
 8000430:	4611      	mov	r1, r2
 8000432:	2201      	movs	r2, #1
 8000434:	408a      	lsls	r2, r1
 8000436:	43d2      	mvns	r2, r2
 8000438:	4611      	mov	r1, r2
 800043a:	4a2f      	ldr	r2, [pc, #188]	@ (80004f8 <GPIO_Init+0x180>)
 800043c:	400b      	ands	r3, r1
 800043e:	60d3      	str	r3, [r2, #12]
 8000440:	e019      	b.n	8000476 <GPIO_Init+0xfe>
        }
        else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	795b      	ldrb	r3, [r3, #5]
 8000446:	2b06      	cmp	r3, #6
 8000448:	d115      	bne.n	8000476 <GPIO_Init+0xfe>
        {
        	EXTI->FTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800044a:	4b2b      	ldr	r3, [pc, #172]	@ (80004f8 <GPIO_Init+0x180>)
 800044c:	68db      	ldr	r3, [r3, #12]
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	7912      	ldrb	r2, [r2, #4]
 8000452:	4611      	mov	r1, r2
 8000454:	2201      	movs	r2, #1
 8000456:	408a      	lsls	r2, r1
 8000458:	4611      	mov	r1, r2
 800045a:	4a27      	ldr	r2, [pc, #156]	@ (80004f8 <GPIO_Init+0x180>)
 800045c:	430b      	orrs	r3, r1
 800045e:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000460:	4b25      	ldr	r3, [pc, #148]	@ (80004f8 <GPIO_Init+0x180>)
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	7912      	ldrb	r2, [r2, #4]
 8000468:	4611      	mov	r1, r2
 800046a:	2201      	movs	r2, #1
 800046c:	408a      	lsls	r2, r1
 800046e:	4611      	mov	r1, r2
 8000470:	4a21      	ldr	r2, [pc, #132]	@ (80004f8 <GPIO_Init+0x180>)
 8000472:	430b      	orrs	r3, r1
 8000474:	6093      	str	r3, [r2, #8]
        }
        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	791b      	ldrb	r3, [r3, #4]
 800047a:	089b      	lsrs	r3, r3, #2
 800047c:	74fb      	strb	r3, [r7, #19]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	791b      	ldrb	r3, [r3, #4]
 8000482:	f003 0303 	and.w	r3, r3, #3
 8000486:	74bb      	strb	r3, [r7, #18]
        uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000490:	d042      	beq.n	8000518 <GPIO_Init+0x1a0>
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a19      	ldr	r2, [pc, #100]	@ (80004fc <GPIO_Init+0x184>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d02b      	beq.n	80004f4 <GPIO_Init+0x17c>
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a17      	ldr	r2, [pc, #92]	@ (8000500 <GPIO_Init+0x188>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d024      	beq.n	80004f0 <GPIO_Init+0x178>
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a16      	ldr	r2, [pc, #88]	@ (8000504 <GPIO_Init+0x18c>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d01d      	beq.n	80004ec <GPIO_Init+0x174>
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a14      	ldr	r2, [pc, #80]	@ (8000508 <GPIO_Init+0x190>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d016      	beq.n	80004e8 <GPIO_Init+0x170>
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a13      	ldr	r2, [pc, #76]	@ (800050c <GPIO_Init+0x194>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d00f      	beq.n	80004e4 <GPIO_Init+0x16c>
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a11      	ldr	r2, [pc, #68]	@ (8000510 <GPIO_Init+0x198>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d008      	beq.n	80004e0 <GPIO_Init+0x168>
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a10      	ldr	r2, [pc, #64]	@ (8000514 <GPIO_Init+0x19c>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d101      	bne.n	80004dc <GPIO_Init+0x164>
 80004d8:	2307      	movs	r3, #7
 80004da:	e01e      	b.n	800051a <GPIO_Init+0x1a2>
 80004dc:	2300      	movs	r3, #0
 80004de:	e01c      	b.n	800051a <GPIO_Init+0x1a2>
 80004e0:	2306      	movs	r3, #6
 80004e2:	e01a      	b.n	800051a <GPIO_Init+0x1a2>
 80004e4:	2305      	movs	r3, #5
 80004e6:	e018      	b.n	800051a <GPIO_Init+0x1a2>
 80004e8:	2304      	movs	r3, #4
 80004ea:	e016      	b.n	800051a <GPIO_Init+0x1a2>
 80004ec:	2303      	movs	r3, #3
 80004ee:	e014      	b.n	800051a <GPIO_Init+0x1a2>
 80004f0:	2302      	movs	r3, #2
 80004f2:	e012      	b.n	800051a <GPIO_Init+0x1a2>
 80004f4:	2301      	movs	r3, #1
 80004f6:	e010      	b.n	800051a <GPIO_Init+0x1a2>
 80004f8:	40010400 	.word	0x40010400
 80004fc:	48000400 	.word	0x48000400
 8000500:	48000800 	.word	0x48000800
 8000504:	48000c00 	.word	0x48000c00
 8000508:	48001000 	.word	0x48001000
 800050c:	48001400 	.word	0x48001400
 8000510:	48001800 	.word	0x48001800
 8000514:	48001c00 	.word	0x48001c00
 8000518:	2300      	movs	r3, #0
 800051a:	747b      	strb	r3, [r7, #17]
        SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2 * 4));
 800051c:	4a63      	ldr	r2, [pc, #396]	@ (80006ac <GPIO_Init+0x334>)
 800051e:	7cfb      	ldrb	r3, [r7, #19]
 8000520:	3302      	adds	r3, #2
 8000522:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000526:	7cbb      	ldrb	r3, [r7, #18]
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	210f      	movs	r1, #15
 800052c:	fa01 f303 	lsl.w	r3, r1, r3
 8000530:	43db      	mvns	r3, r3
 8000532:	4618      	mov	r0, r3
 8000534:	495d      	ldr	r1, [pc, #372]	@ (80006ac <GPIO_Init+0x334>)
 8000536:	7cfb      	ldrb	r3, [r7, #19]
 8000538:	4002      	ands	r2, r0
 800053a:	3302      	adds	r3, #2
 800053c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        SYSCFG -> EXTICR[temp1] = portcode << (temp2 * 4);
 8000540:	7c7a      	ldrb	r2, [r7, #17]
 8000542:	7cbb      	ldrb	r3, [r7, #18]
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	fa02 f103 	lsl.w	r1, r2, r3
 800054a:	4a58      	ldr	r2, [pc, #352]	@ (80006ac <GPIO_Init+0x334>)
 800054c:	7cfb      	ldrb	r3, [r7, #19]
 800054e:	3302      	adds	r3, #2
 8000550:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        EXTI -> IMR1 |= 1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000554:	4b56      	ldr	r3, [pc, #344]	@ (80006b0 <GPIO_Init+0x338>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	7912      	ldrb	r2, [r2, #4]
 800055c:	4611      	mov	r1, r2
 800055e:	2201      	movs	r2, #1
 8000560:	408a      	lsls	r2, r1
 8000562:	4611      	mov	r1, r2
 8000564:	4a52      	ldr	r2, [pc, #328]	@ (80006b0 <GPIO_Init+0x338>)
 8000566:	430b      	orrs	r3, r1
 8000568:	6013      	str	r3, [r2, #0]
    }

    // 2. Configure speed
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	799b      	ldrb	r3, [r3, #6]
 800056e:	461a      	mov	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	791b      	ldrb	r3, [r3, #4]
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	fa02 f303 	lsl.w	r3, r2, r3
 800057a:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	689a      	ldr	r2, [r3, #8]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	791b      	ldrb	r3, [r3, #4]
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	2103      	movs	r1, #3
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	43db      	mvns	r3, r3
 8000590:	4619      	mov	r1, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	400a      	ands	r2, r1
 8000598:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	6899      	ldr	r1, [r3, #8]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	697a      	ldr	r2, [r7, #20]
 80005a6:	430a      	orrs	r2, r1
 80005a8:	609a      	str	r2, [r3, #8]
    temp = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]

    // 3. Configure pull-up/pull-down
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	79db      	ldrb	r3, [r3, #7]
 80005b2:	461a      	mov	r2, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	791b      	ldrb	r3, [r3, #4]
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	fa02 f303 	lsl.w	r3, r2, r3
 80005be:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	68da      	ldr	r2, [r3, #12]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	791b      	ldrb	r3, [r3, #4]
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	2103      	movs	r1, #3
 80005ce:	fa01 f303 	lsl.w	r3, r1, r3
 80005d2:	43db      	mvns	r3, r3
 80005d4:	4619      	mov	r1, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	400a      	ands	r2, r1
 80005dc:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	68d9      	ldr	r1, [r3, #12]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	697a      	ldr	r2, [r7, #20]
 80005ea:	430a      	orrs	r2, r1
 80005ec:	60da      	str	r2, [r3, #12]
    temp = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]

    // 4. Configure output type
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7a1b      	ldrb	r3, [r3, #8]
 80005f6:	461a      	mov	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	791b      	ldrb	r3, [r3, #4]
 80005fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000600:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	685a      	ldr	r2, [r3, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	791b      	ldrb	r3, [r3, #4]
 800060c:	4619      	mov	r1, r3
 800060e:	2301      	movs	r3, #1
 8000610:	408b      	lsls	r3, r1
 8000612:	43db      	mvns	r3, r3
 8000614:	4619      	mov	r1, r3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	400a      	ands	r2, r1
 800061c:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	6859      	ldr	r1, [r3, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	697a      	ldr	r2, [r7, #20]
 800062a:	430a      	orrs	r2, r1
 800062c:	605a      	str	r2, [r3, #4]
    temp = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]

    // 5. Configure alternate function if needed
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	795b      	ldrb	r3, [r3, #5]
 8000636:	2b02      	cmp	r3, #2
 8000638:	d131      	bne.n	800069e <GPIO_Init+0x326>
    {
        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;  // AFR[0] or AFR[1]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	791b      	ldrb	r3, [r3, #4]
 800063e:	08db      	lsrs	r3, r3, #3
 8000640:	743b      	strb	r3, [r7, #16]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;  // Position within register
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	791b      	ldrb	r3, [r3, #4]
 8000646:	f003 0307 	and.w	r3, r3, #7
 800064a:	73fb      	strb	r3, [r7, #15]

        pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	7c3a      	ldrb	r2, [r7, #16]
 8000652:	3208      	adds	r2, #8
 8000654:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	220f      	movs	r2, #15
 800065e:	fa02 f303 	lsl.w	r3, r2, r3
 8000662:	43db      	mvns	r3, r3
 8000664:	4618      	mov	r0, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	7c3a      	ldrb	r2, [r7, #16]
 800066c:	4001      	ands	r1, r0
 800066e:	3208      	adds	r2, #8
 8000670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	7c3a      	ldrb	r2, [r7, #16]
 800067a:	3208      	adds	r2, #8
 800067c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	7a5b      	ldrb	r3, [r3, #9]
 8000684:	461a      	mov	r2, r3
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	4618      	mov	r0, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	7c3a      	ldrb	r2, [r7, #16]
 8000696:	4301      	orrs	r1, r0
 8000698:	3208      	adds	r2, #8
 800069a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 800069e:	bf00      	nop
 80006a0:	371c      	adds	r7, #28
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40010000 	.word	0x40010000
 80006b0:	40010400 	.word	0x40010400

080006b4 <USART_PeriClockControl>:
 */

#include"stm32l4xx_uart_driver.h"

void USART_PeriClockControl(USART_TypeDef *pUSARTx, uint8_t EnOrDi)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	460b      	mov	r3, r1
 80006be:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80006c0:	78fb      	ldrb	r3, [r7, #3]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d136      	bne.n	8000734 <USART_PeriClockControl+0x80>
		{
			if(pUSARTx == USART1)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a38      	ldr	r2, [pc, #224]	@ (80007ac <USART_PeriClockControl+0xf8>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d106      	bne.n	80006dc <USART_PeriClockControl+0x28>
				USART1_PCLK_EN();
 80006ce:	4b38      	ldr	r3, [pc, #224]	@ (80007b0 <USART_PeriClockControl+0xfc>)
 80006d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006d2:	4a37      	ldr	r2, [pc, #220]	@ (80007b0 <USART_PeriClockControl+0xfc>)
 80006d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d8:	6613      	str	r3, [r2, #96]	@ 0x60
			else if(pUSARTx == UART4)
				UART4_PCLK_DI();
			else if(pUSARTx == UART5)
				UART5_PCLK_DI();
		}
}
 80006da:	e061      	b.n	80007a0 <USART_PeriClockControl+0xec>
			else if(pUSARTx == USART2)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a35      	ldr	r2, [pc, #212]	@ (80007b4 <USART_PeriClockControl+0x100>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d106      	bne.n	80006f2 <USART_PeriClockControl+0x3e>
				USART2_PCLK_EN();
 80006e4:	4b32      	ldr	r3, [pc, #200]	@ (80007b0 <USART_PeriClockControl+0xfc>)
 80006e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006e8:	4a31      	ldr	r2, [pc, #196]	@ (80007b0 <USART_PeriClockControl+0xfc>)
 80006ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006ee:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80006f0:	e056      	b.n	80007a0 <USART_PeriClockControl+0xec>
			else if(pUSARTx == USART3)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a30      	ldr	r2, [pc, #192]	@ (80007b8 <USART_PeriClockControl+0x104>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d106      	bne.n	8000708 <USART_PeriClockControl+0x54>
				USART3_PCLK_EN();
 80006fa:	4b2d      	ldr	r3, [pc, #180]	@ (80007b0 <USART_PeriClockControl+0xfc>)
 80006fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006fe:	4a2c      	ldr	r2, [pc, #176]	@ (80007b0 <USART_PeriClockControl+0xfc>)
 8000700:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000704:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000706:	e04b      	b.n	80007a0 <USART_PeriClockControl+0xec>
			else if(pUSARTx == UART4)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a2c      	ldr	r2, [pc, #176]	@ (80007bc <USART_PeriClockControl+0x108>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d106      	bne.n	800071e <USART_PeriClockControl+0x6a>
				UART4_PCLK_EN();
 8000710:	4b27      	ldr	r3, [pc, #156]	@ (80007b0 <USART_PeriClockControl+0xfc>)
 8000712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000714:	4a26      	ldr	r2, [pc, #152]	@ (80007b0 <USART_PeriClockControl+0xfc>)
 8000716:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800071a:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800071c:	e040      	b.n	80007a0 <USART_PeriClockControl+0xec>
			else if(pUSARTx == UART5)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a27      	ldr	r2, [pc, #156]	@ (80007c0 <USART_PeriClockControl+0x10c>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d13c      	bne.n	80007a0 <USART_PeriClockControl+0xec>
				UART5_PCLK_EN();
 8000726:	4b22      	ldr	r3, [pc, #136]	@ (80007b0 <USART_PeriClockControl+0xfc>)
 8000728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800072a:	4a21      	ldr	r2, [pc, #132]	@ (80007b0 <USART_PeriClockControl+0xfc>)
 800072c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000730:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000732:	e035      	b.n	80007a0 <USART_PeriClockControl+0xec>
			if(pUSARTx == USART1)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a1d      	ldr	r2, [pc, #116]	@ (80007ac <USART_PeriClockControl+0xf8>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d106      	bne.n	800074a <USART_PeriClockControl+0x96>
				USART1_PCLK_DI();
 800073c:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <USART_PeriClockControl+0xfc>)
 800073e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000740:	4a1b      	ldr	r2, [pc, #108]	@ (80007b0 <USART_PeriClockControl+0xfc>)
 8000742:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000746:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8000748:	e02a      	b.n	80007a0 <USART_PeriClockControl+0xec>
			else if(pUSARTx == USART2)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a19      	ldr	r2, [pc, #100]	@ (80007b4 <USART_PeriClockControl+0x100>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d106      	bne.n	8000760 <USART_PeriClockControl+0xac>
				USART2_PCLK_DI();
 8000752:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <USART_PeriClockControl+0xfc>)
 8000754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000756:	4a16      	ldr	r2, [pc, #88]	@ (80007b0 <USART_PeriClockControl+0xfc>)
 8000758:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800075c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800075e:	e01f      	b.n	80007a0 <USART_PeriClockControl+0xec>
			else if(pUSARTx == USART3)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a15      	ldr	r2, [pc, #84]	@ (80007b8 <USART_PeriClockControl+0x104>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d106      	bne.n	8000776 <USART_PeriClockControl+0xc2>
				USART3_PCLK_DI();
 8000768:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <USART_PeriClockControl+0xfc>)
 800076a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800076c:	4a10      	ldr	r2, [pc, #64]	@ (80007b0 <USART_PeriClockControl+0xfc>)
 800076e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000772:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000774:	e014      	b.n	80007a0 <USART_PeriClockControl+0xec>
			else if(pUSARTx == UART4)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a10      	ldr	r2, [pc, #64]	@ (80007bc <USART_PeriClockControl+0x108>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d106      	bne.n	800078c <USART_PeriClockControl+0xd8>
				UART4_PCLK_DI();
 800077e:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <USART_PeriClockControl+0xfc>)
 8000780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000782:	4a0b      	ldr	r2, [pc, #44]	@ (80007b0 <USART_PeriClockControl+0xfc>)
 8000784:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000788:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800078a:	e009      	b.n	80007a0 <USART_PeriClockControl+0xec>
			else if(pUSARTx == UART5)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a0c      	ldr	r2, [pc, #48]	@ (80007c0 <USART_PeriClockControl+0x10c>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d105      	bne.n	80007a0 <USART_PeriClockControl+0xec>
				UART5_PCLK_DI();
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <USART_PeriClockControl+0xfc>)
 8000796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000798:	4a05      	ldr	r2, [pc, #20]	@ (80007b0 <USART_PeriClockControl+0xfc>)
 800079a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800079e:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	40013800 	.word	0x40013800
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40004400 	.word	0x40004400
 80007b8:	40004800 	.word	0x40004800
 80007bc:	40004c00 	.word	0x40004c00
 80007c0:	40005000 	.word	0x40005000

080007c4 <USART_Init>:

/*
 * Init and De-init
 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	uint32_t tempCR =0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2101      	movs	r1, #1
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ff6c 	bl	80006b4 <USART_PeriClockControl>

	//Disable USART
	USART_PeripheralControl(pUSARTHandle->pUSARTx, DISABLE);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 f8a6 	bl	8000934 <USART_PeripheralControl>
	//Configure CR1

	//Tx and Rx Configuration
	if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	791b      	ldrb	r3, [r3, #4]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d104      	bne.n	80007fa <USART_Init+0x36>
	{
		tempCR |= USART_CR1_RE;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	e010      	b.n	800081c <USART_Init+0x58>
	}
	else if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d104      	bne.n	800080c <USART_Init+0x48>
	{
		tempCR |= USART_CR1_TE;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	f043 0308 	orr.w	r3, r3, #8
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	e007      	b.n	800081c <USART_Init+0x58>
	}
	else if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	791b      	ldrb	r3, [r3, #4]
 8000810:	2b02      	cmp	r3, #2
 8000812:	d103      	bne.n	800081c <USART_Init+0x58>
	{
		tempCR |= (USART_CR1_TE | USART_CR1_RE);
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f043 030c 	orr.w	r3, r3, #12
 800081a:	60fb      	str	r3, [r7, #12]
	}

	//Configure Wordlenth
	if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_8BITS)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	7b5b      	ldrb	r3, [r3, #13]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d104      	bne.n	800082e <USART_Init+0x6a>
	{
		tempCR &= ~(USART_CR1_M0 | USART_CR1_M1);
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	e007      	b.n	800083e <USART_Init+0x7a>
	}
	else
	{
		tempCR |= USART_CR1_M0;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000834:	60fb      	str	r3, [r7, #12]
		tempCR &= ~(USART_CR1_M1);
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800083c:	60fb      	str	r3, [r7, #12]
	}
	//Configure Parity
	if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	7b9b      	ldrb	r3, [r3, #14]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d104      	bne.n	8000850 <USART_Init+0x8c>
	{
		tempCR &= ~(USART_CR1_PCE);
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	e014      	b.n	800087a <USART_Init+0xb6>
	}
	else if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	7b9b      	ldrb	r3, [r3, #14]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d108      	bne.n	800086a <USART_Init+0xa6>
	{
		tempCR |= USART_CR1_PCE;
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800085e:	60fb      	str	r3, [r7, #12]
		tempCR &= ~USART_CR1_PS;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	e007      	b.n	800087a <USART_Init+0xb6>
	}
	else
	{
		tempCR |= USART_CR1_PCE;
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000870:	60fb      	str	r3, [r7, #12]
		tempCR |= USART_CR1_PS;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000878:	60fb      	str	r3, [r7, #12]
	}

	pUSARTHandle->pUSARTx->CR1 = tempCR;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	68fa      	ldr	r2, [r7, #12]
 8000880:	601a      	str	r2, [r3, #0]

	//Configure CR2
	tempCR &= ~USART_CR2_STOP;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000888:	60fb      	str	r3, [r7, #12]

	if(pUSARTHandle->USART_Config.USART_NoOfStopBits == USART_STOPBITS_1)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	7b1b      	ldrb	r3, [r3, #12]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d015      	beq.n	80008be <USART_Init+0xfa>
	{
	    tempCR |= (USART_STOPBITS_1 << USART_CR2_STOP_Pos);
	}
	else if(pUSARTHandle->USART_Config.USART_NoOfStopBits == USART_STOPBITS_2)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	7b1b      	ldrb	r3, [r3, #12]
 8000896:	2b02      	cmp	r3, #2
 8000898:	d104      	bne.n	80008a4 <USART_Init+0xe0>
	{
	    tempCR |= (USART_STOPBITS_2 << USART_CR2_STOP_Pos);
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	e00c      	b.n	80008be <USART_Init+0xfa>
	}
	else if(pUSARTHandle->USART_Config.USART_NoOfStopBits == USART_STOPBITS_0_5)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	7b1b      	ldrb	r3, [r3, #12]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d104      	bne.n	80008b6 <USART_Init+0xf2>
	{
	    tempCR |= (USART_STOPBITS_0_5 << USART_CR2_STOP_Pos);
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	e003      	b.n	80008be <USART_Init+0xfa>
	}
	else // 1.5 stop bits
	{
	    tempCR |= (USART_STOPBITS_1_5 << USART_CR2_STOP_Pos);
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80008bc:	60fb      	str	r3, [r7, #12]
	}
	pUSARTHandle->pUSARTx->CR2 = tempCR;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	605a      	str	r2, [r3, #4]

	//Configure CR3
	tempCR = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
	//Hardware flow control configuration
	if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_NONE)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	7bdb      	ldrb	r3, [r3, #15]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d104      	bne.n	80008dc <USART_Init+0x118>
		tempCR &= ~(USART_CR3_CTSE | USART_CR3_RTSE);
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	e015      	b.n	8000908 <USART_Init+0x144>
	else if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	7bdb      	ldrb	r3, [r3, #15]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d104      	bne.n	80008ee <USART_Init+0x12a>
		tempCR |= USART_CR3_CTSE;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	e00c      	b.n	8000908 <USART_Init+0x144>
	else if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	7bdb      	ldrb	r3, [r3, #15]
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d104      	bne.n	8000900 <USART_Init+0x13c>
		tempCR |= USART_CR3_CTSE;
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	e003      	b.n	8000908 <USART_Init+0x144>
	else
		tempCR |= (USART_CR3_CTSE | USART_CR3_RTSE);
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000906:	60fb      	str	r3, [r7, #12]

	pUSARTHandle->pUSARTx->CR3 = tempCR;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	609a      	str	r2, [r3, #8]
	/*
	 * USARTDIV = 16,000,000 / (16 * 9600) = 104.1667
	 * Mantissa = 104 (integer part of USARTDIV) --> 0x68 Hex
	 * Fraction = (0.1667 * 16) = 2.667, rounded to 0x3
	 */
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	4619      	mov	r1, r3
 800091a:	4610      	mov	r0, r2
 800091c:	f000 f826 	bl	800096c <USART_SetBaudRate>
	//pUSARTHandle->pUSARTx->BRR = 0x3 << USART_BRR_DIV_FRACTION_Pos;
	//pUSARTHandle->pUSARTx->BRR = 0x68 << USART_BRR_DIV_MANTISSA_Pos;

	//Enable USART
	USART_PeripheralControl(pUSARTHandle->pUSARTx, ENABLE);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2101      	movs	r1, #1
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f804 	bl	8000934 <USART_PeripheralControl>

}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <USART_PeripheralControl>:
void USART_ClearFlag(USART_TypeDef *pUSARTx, uint16_t StatusFlagName)
{
	pUSARTx->ISR &= ~(1<<StatusFlagName);
}
void USART_PeripheralControl(USART_TypeDef *pUSARTx, uint8_t EnOrDi)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	460b      	mov	r3, r1
 800093e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000940:	78fb      	ldrb	r3, [r7, #3]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d106      	bne.n	8000954 <USART_PeripheralControl+0x20>
		pUSARTx->CR1 |= USART_CR1_UE;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f043 0201 	orr.w	r2, r3, #1
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	601a      	str	r2, [r3, #0]
	else
		pUSARTx->CR1 &= ~1<<USART_CR1_UE;
}
 8000952:	e005      	b.n	8000960 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~1<<USART_CR1_UE;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f023 0203 	bic.w	r2, r3, #3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	601a      	str	r2, [r3, #0]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <USART_SetBaudRate>:

    return pclk;
}

void USART_SetBaudRate(USART_TypeDef *pUSARTx, uint32_t BaudRate)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
	uint32_t pclk = 16000000; // Force HSI16 for debug
 8000976:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <USART_SetBaudRate+0x50>)
 8000978:	60bb      	str	r3, [r7, #8]
	    uint32_t usartdiv;

	    if ((pUSARTx->CR1 & USART_CR1_OVER8) == 0)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000982:	2b00      	cmp	r3, #0
 8000984:	d108      	bne.n	8000998 <USART_SetBaudRate+0x2c>
	        usartdiv = (pclk + (BaudRate/2U)) / BaudRate;  // Oversampling 16
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	085a      	lsrs	r2, r3, #1
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	441a      	add	r2, r3
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	fbb2 f3f3 	udiv	r3, r2, r3
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	e008      	b.n	80009aa <USART_SetBaudRate+0x3e>
	    else
	        usartdiv = ((2U * pclk) + (BaudRate/2U)) / BaudRate; // Oversampling 8
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	005a      	lsls	r2, r3, #1
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	085b      	lsrs	r3, r3, #1
 80009a0:	441a      	add	r2, r3
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a8:	60fb      	str	r3, [r7, #12]

	    pUSARTx->BRR = usartdiv;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	60da      	str	r2, [r3, #12]
}
 80009b0:	bf00      	nop
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	00f42400 	.word	0x00f42400

080009c0 <USART_SendDataIT>:
/*
 * interrupt send and receive data
 */
uint8_t USART_SendDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pTxBuffer, uint32_t len)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
	if(pUSARTHandle->TxBusyState != USART_BUSY_IN_TX)
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d013      	beq.n	80009fe <USART_SendDataIT+0x3e>
	{
		pUSARTHandle->pTxBuffer = pTxBuffer;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	68ba      	ldr	r2, [r7, #8]
 80009da:	611a      	str	r2, [r3, #16]
		pUSARTHandle->TxLen = len;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	619a      	str	r2, [r3, #24]
		pUSARTHandle->TxBusyState = USART_BUSY_IN_TX;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2202      	movs	r2, #2
 80009e6:	f883 2020 	strb.w	r2, [r3, #32]

		//enable txe interrupt
		pUSARTHandle->pUSARTx->CR1 |= USART_CR1_TXEIE;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80009f8:	601a      	str	r2, [r3, #0]

		return 1;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e000      	b.n	8000a00 <USART_SendDataIT+0x40>
	}
	return 0;
 80009fe:	2300      	movs	r3, #0

}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <USART_ReceiveDataIT>:
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t len)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
	if(pUSARTHandle->RxBusyState != USART_BUSY_IN_RX)
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d013      	beq.n	8000a4a <USART_ReceiveDataIT+0x3e>
		{
			pUSARTHandle->pRxBuffer = pRxBuffer;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	68ba      	ldr	r2, [r7, #8]
 8000a26:	615a      	str	r2, [r3, #20]
			pUSARTHandle->RxLen = len;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	61da      	str	r2, [r3, #28]
			pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	2201      	movs	r2, #1
 8000a32:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

			//enable txe interrupt
			pUSARTHandle->pUSARTx->CR1 |= USART_CR1_RXNEIE;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f042 0220 	orr.w	r2, r2, #32
 8000a44:	601a      	str	r2, [r3, #0]

			return 1;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e000      	b.n	8000a4c <USART_ReceiveDataIT+0x40>
		}
		return 0;
 8000a4a:	2300      	movs	r3, #0
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <USART_IRQConfig>:
/*
 * IRQ Configuration and ISR handling
 */
void USART_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t EnorDi)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
 8000a62:	460b      	mov	r3, r1
 8000a64:	71bb      	strb	r3, [r7, #6]
 8000a66:	4613      	mov	r3, r2
 8000a68:	717b      	strb	r3, [r7, #5]
	if(EnorDi == ENABLE)
 8000a6a:	797b      	ldrb	r3, [r7, #5]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d120      	bne.n	8000ab2 <USART_IRQConfig+0x5a>
		{
		if(IRQNumber <= 31){
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	2b1f      	cmp	r3, #31
 8000a74:	d80a      	bhi.n	8000a8c <USART_IRQConfig+0x34>
			*NVIC_ISER0 |= (1<<IRQNumber);
 8000a76:	4b32      	ldr	r3, [pc, #200]	@ (8000b40 <USART_IRQConfig+0xe8>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	79fa      	ldrb	r2, [r7, #7]
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a82:	4611      	mov	r1, r2
 8000a84:	4a2e      	ldr	r2, [pc, #184]	@ (8000b40 <USART_IRQConfig+0xe8>)
 8000a86:	430b      	orrs	r3, r1
 8000a88:	6013      	str	r3, [r2, #0]
 8000a8a:	e032      	b.n	8000af2 <USART_IRQConfig+0x9a>
		}
		else if(IRQNumber >=32 && IRQNumber < 64){
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	2b1f      	cmp	r3, #31
 8000a90:	d92f      	bls.n	8000af2 <USART_IRQConfig+0x9a>
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a96:	d82c      	bhi.n	8000af2 <USART_IRQConfig+0x9a>
			*NVIC_ISER1 |= (1<<(IRQNumber%32));
 8000a98:	4b2a      	ldr	r3, [pc, #168]	@ (8000b44 <USART_IRQConfig+0xec>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	79fa      	ldrb	r2, [r7, #7]
 8000a9e:	f002 021f 	and.w	r2, r2, #31
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4a26      	ldr	r2, [pc, #152]	@ (8000b44 <USART_IRQConfig+0xec>)
 8000aac:	430b      	orrs	r3, r1
 8000aae:	6013      	str	r3, [r2, #0]
 8000ab0:	e01f      	b.n	8000af2 <USART_IRQConfig+0x9a>
		}
	}
	else
	{
		if(IRQNumber <= 31){
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	2b1f      	cmp	r3, #31
 8000ab6:	d80a      	bhi.n	8000ace <USART_IRQConfig+0x76>
			*NVIC_ICER0 |= (1<<IRQNumber);
 8000ab8:	4b23      	ldr	r3, [pc, #140]	@ (8000b48 <USART_IRQConfig+0xf0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	79fa      	ldrb	r2, [r7, #7]
 8000abe:	2101      	movs	r1, #1
 8000ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	4a20      	ldr	r2, [pc, #128]	@ (8000b48 <USART_IRQConfig+0xf0>)
 8000ac8:	430b      	orrs	r3, r1
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	e011      	b.n	8000af2 <USART_IRQConfig+0x9a>
		}
		else if(IRQNumber >=32 && IRQNumber < 64){
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	2b1f      	cmp	r3, #31
 8000ad2:	d90e      	bls.n	8000af2 <USART_IRQConfig+0x9a>
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ad8:	d80b      	bhi.n	8000af2 <USART_IRQConfig+0x9a>
			*NVIC_ICER1 |= (1<<(IRQNumber%32));
 8000ada:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <USART_IRQConfig+0xf4>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	79fa      	ldrb	r2, [r7, #7]
 8000ae0:	f002 021f 	and.w	r2, r2, #31
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aea:	4611      	mov	r1, r2
 8000aec:	4a17      	ldr	r2, [pc, #92]	@ (8000b4c <USART_IRQConfig+0xf4>)
 8000aee:	430b      	orrs	r3, r1
 8000af0:	6013      	str	r3, [r2, #0]
		}
	}
	uint8_t iprx = IRQNumber / 4;
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	089b      	lsrs	r3, r3, #2
 8000af6:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	f003 0303 	and.w	r3, r3, #3
 8000afe:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount  = (8*iprx_section) + (8-NO_PR_BITS_IMPLEMENTED);
 8000b00:	7bbb      	ldrb	r3, [r7, #14]
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	3304      	adds	r3, #4
 8000b08:	737b      	strb	r3, [r7, #13]

	*((volatile uint32_t*)(NVIC_PR_BASE_ADDR+(iprx*4))) |= (IRQPriority << shift_amount);
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	011b      	lsls	r3, r3, #4
 8000b0e:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000b12:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	79b9      	ldrb	r1, [r7, #6]
 8000b1a:	7b7b      	ldrb	r3, [r7, #13]
 8000b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b20:	4619      	mov	r1, r3
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	011b      	lsls	r3, r3, #4
 8000b26:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000b2a:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	601a      	str	r2, [r3, #0]

}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000e100 	.word	0xe000e100
 8000b44:	e000e104 	.word	0xe000e104
 8000b48:	e000e180 	.word	0xe000e180
 8000b4c:	e000e184 	.word	0xe000e184

08000b50 <USART_IRQHandling>:
void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	uint32_t isr = pUSARTHandle->pUSARTx->ISR;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	69db      	ldr	r3, [r3, #28]
 8000b5e:	60fb      	str	r3, [r7, #12]
	uint32_t cr1 = pUSARTHandle->pUSARTx->CR1;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	60bb      	str	r3, [r7, #8]

	// -------- TXE Interrupt Handling --------
	if ((isr & USART_ISR_TXE) && (cr1 & USART_CR1_TXEIE))
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d02c      	beq.n	8000bcc <USART_IRQHandling+0x7c>
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d027      	beq.n	8000bcc <USART_IRQHandling+0x7c>
	{
		if (pUSARTHandle->TxLen > 0)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d00f      	beq.n	8000ba4 <USART_IRQHandling+0x54>
		{
			pUSARTHandle->pUSARTx->TDR = *(pUSARTHandle->pTxBuffer);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	691b      	ldr	r3, [r3, #16]
 8000b88:	781a      	ldrb	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	629a      	str	r2, [r3, #40]	@ 0x28
			pUSARTHandle->pTxBuffer++;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	691b      	ldr	r3, [r3, #16]
 8000b94:	1c5a      	adds	r2, r3, #1
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	611a      	str	r2, [r3, #16]
			pUSARTHandle->TxLen--;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	1e5a      	subs	r2, r3, #1
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	619a      	str	r2, [r3, #24]
		}
		if (pUSARTHandle->TxLen == 0)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d10f      	bne.n	8000bcc <USART_IRQHandling+0x7c>
		{
			// Disable TXE, enable TC to finish last byte
			pUSARTHandle->pUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000bba:	601a      	str	r2, [r3, #0]
			pUSARTHandle->pUSARTx->CR1 |= USART_CR1_TCIE;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000bca:	601a      	str	r2, [r3, #0]
		}
	}
	// -------- TC Interrupt Handling --------
	if ((isr & USART_ISR_TC) && (cr1 & USART_CR1_TCIE))
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d01c      	beq.n	8000c10 <USART_IRQHandling+0xc0>
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d017      	beq.n	8000c10 <USART_IRQHandling+0xc0>
	{
		// Clear TC
		pUSARTHandle->pUSARTx->ICR |= USART_ICR_TCCF;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	6a1a      	ldr	r2, [r3, #32]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000bee:	621a      	str	r2, [r3, #32]

		// Transmission complete
		pUSARTHandle->TxBusyState = USART_READY;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f883 2020 	strb.w	r2, [r3, #32]
		pUSARTHandle->pUSARTx->CR1 &= ~USART_CR1_TCIE;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000c06:	601a      	str	r2, [r3, #0]
		USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_TX_CMPLT);
 8000c08:	2100      	movs	r1, #0
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f000 f8ea 	bl	8000de4 <USART_ApplicationEventCallback>
	}
	// -------- RXNE Interrupt Handling --------
	if ((isr & USART_ISR_RXNE) && (cr1 & USART_CR1_RXNEIE))
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f003 0320 	and.w	r3, r3, #32
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d029      	beq.n	8000c6e <USART_IRQHandling+0x11e>
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	f003 0320 	and.w	r3, r3, #32
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d024      	beq.n	8000c6e <USART_IRQHandling+0x11e>
	{
		pUSARTHandle->pRxBuffer[0] = (uint8_t)(pUSARTHandle->pUSARTx->RDR & 0xFF);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	701a      	strb	r2, [r3, #0]
		pUSARTHandle->pRxBuffer++;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxLen--;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69db      	ldr	r3, [r3, #28]
 8000c40:	1e5a      	subs	r2, r3, #1
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	61da      	str	r2, [r3, #28]

		if (pUSARTHandle->RxLen == 0)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10f      	bne.n	8000c6e <USART_IRQHandling+0x11e>
		{
			// Reception complete
			pUSARTHandle->RxBusyState = USART_READY;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2200      	movs	r2, #0
 8000c52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			pUSARTHandle->pUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f022 0220 	bic.w	r2, r2, #32
 8000c64:	601a      	str	r2, [r3, #0]
			USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_RX_CMPLT);
 8000c66:	2101      	movs	r1, #1
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f000 f8bb 	bl	8000de4 <USART_ApplicationEventCallback>
		}
	}
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <delay>:
uint8_t rx_buffer[32];
uint8_t txDone = 0;
uint8_t rxDone = 0;

void delay(uint32_t n)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b085      	sub	sp, #20
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
    uint32_t i, j;
    for (i = 0; i < n; i++)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	e00c      	b.n	8000c9e <delay+0x28>
        for (j = 0; j < 1000; j++);
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	e002      	b.n	8000c90 <delay+0x1a>
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c96:	d3f8      	bcc.n	8000c8a <delay+0x14>
    for (i = 0; i < n; i++)
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d3ee      	bcc.n	8000c84 <delay+0xe>
}
 8000ca6:	bf00      	nop
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <UART_GPIOInits>:

void UART_GPIOInits(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
    GPIO_PeriClockControl(GPIOA, ENABLE);
 8000cba:	2101      	movs	r1, #1
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc0:	f7ff fa8c 	bl	80001dc <GPIO_PeriClockControl>

    GPIO_Handle_t UARTPins;
    UARTPins.pGPIOx = GPIOA;
 8000cc4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000cc8:	607b      	str	r3, [r7, #4]
    UARTPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	727b      	strb	r3, [r7, #9]
    UARTPins.GPIO_PinConfig.GPIO_PinAltFunMode = 7; // AF7 = USART1
 8000cce:	2307      	movs	r3, #7
 8000cd0:	737b      	strb	r3, [r7, #13]
    UARTPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	733b      	strb	r3, [r7, #12]
    UARTPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	72fb      	strb	r3, [r7, #11]
    UARTPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	72bb      	strb	r3, [r7, #10]

    // TX (PA9)
    UARTPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 8000cde:	2309      	movs	r3, #9
 8000ce0:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&UARTPins);
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fb47 	bl	8000378 <GPIO_Init>

    // RX (PA10)
    UARTPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 8000cea:	230a      	movs	r3, #10
 8000cec:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&UARTPins);
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fb41 	bl	8000378 <GPIO_Init>
}
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <uart_init>:

void uart_init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
    pUARTHandle->pUSARTx = USART1;
 8000d04:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <uart_init+0x4c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a11      	ldr	r2, [pc, #68]	@ (8000d50 <uart_init+0x50>)
 8000d0a:	601a      	str	r2, [r3, #0]
    pUARTHandle->USART_Config.USART_Mode = USART_MODE_TXRX;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <uart_init+0x4c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2202      	movs	r2, #2
 8000d12:	711a      	strb	r2, [r3, #4]
    pUARTHandle->USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000d14:	4b0d      	ldr	r3, [pc, #52]	@ (8000d4c <uart_init+0x4c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	735a      	strb	r2, [r3, #13]
    pUARTHandle->USART_Config.USART_Baud = USART_STD_BAUD_9600;
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <uart_init+0x4c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d24:	609a      	str	r2, [r3, #8]
    pUARTHandle->USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000d26:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <uart_init+0x4c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	73da      	strb	r2, [r3, #15]
    pUARTHandle->USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000d2e:	4b07      	ldr	r3, [pc, #28]	@ (8000d4c <uart_init+0x4c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2200      	movs	r2, #0
 8000d34:	731a      	strb	r2, [r3, #12]
    pUARTHandle->USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000d36:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <uart_init+0x4c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	739a      	strb	r2, [r3, #14]

    USART_Init(pUARTHandle);
 8000d3e:	4b03      	ldr	r3, [pc, #12]	@ (8000d4c <uart_init+0x4c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fd3e 	bl	80007c4 <USART_Init>
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	40013800 	.word	0x40013800

08000d54 <main>:

int main(void)
{
 8000d54:	b598      	push	{r3, r4, r7, lr}
 8000d56:	af00      	add	r7, sp, #0
    UART_GPIOInits();
 8000d58:	f7ff ffac 	bl	8000cb4 <UART_GPIOInits>
    uart_init();
 8000d5c:	f7ff ffd0 	bl	8000d00 <uart_init>

    // Enable USART1 interrupt in NVIC
    USART_IRQConfig(IRQ_NO_USART1, 1, ENABLE);
 8000d60:	2201      	movs	r2, #1
 8000d62:	2101      	movs	r1, #1
 8000d64:	2025      	movs	r0, #37	@ 0x25
 8000d66:	f7ff fe77 	bl	8000a58 <USART_IRQConfig>

    while (1)
    {
        txDone = 0;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <main+0x64>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
        rxDone = 0;
 8000d70:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <main+0x68>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]

        // Start interrupt-driven TX and RX
        USART_SendDataIT(pUARTHandle, tx_buffer, strlen((char *)tx_buffer));
 8000d76:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <main+0x6c>)
 8000d78:	681c      	ldr	r4, [r3, #0]
 8000d7a:	4812      	ldr	r0, [pc, #72]	@ (8000dc4 <main+0x70>)
 8000d7c:	f7ff fa26 	bl	80001cc <strlen>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	490f      	ldr	r1, [pc, #60]	@ (8000dc4 <main+0x70>)
 8000d86:	4620      	mov	r0, r4
 8000d88:	f7ff fe1a 	bl	80009c0 <USART_SendDataIT>
        USART_ReceiveDataIT(pUARTHandle, rx_buffer, sizeof(rx_buffer));
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <main+0x6c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2220      	movs	r2, #32
 8000d92:	490d      	ldr	r1, [pc, #52]	@ (8000dc8 <main+0x74>)
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fe39 	bl	8000a0c <USART_ReceiveDataIT>

        // Wait until both complete
        while (!(txDone && rxDone));
 8000d9a:	bf00      	nop
 8000d9c:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <main+0x64>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0fb      	beq.n	8000d9c <main+0x48>
 8000da4:	4b05      	ldr	r3, [pc, #20]	@ (8000dbc <main+0x68>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d0f7      	beq.n	8000d9c <main+0x48>

        delay(1000); // Slow down loop for readability
 8000dac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000db0:	f7ff ff61 	bl	8000c76 <delay>
        txDone = 0;
 8000db4:	e7d9      	b.n	8000d6a <main+0x16>
 8000db6:	bf00      	nop
 8000db8:	20000084 	.word	0x20000084
 8000dbc:	20000085 	.word	0x20000085
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	20000004 	.word	0x20000004
 8000dc8:	20000064 	.word	0x20000064

08000dcc <USART1_IRQHandler>:
    }
}

/* IRQ Handler for USART1 */
void USART1_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
    USART_IRQHandling(pUARTHandle);
 8000dd0:	4b03      	ldr	r3, [pc, #12]	@ (8000de0 <USART1_IRQHandler+0x14>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff febb 	bl	8000b50 <USART_IRQHandling>
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000000 	.word	0x20000000

08000de4 <USART_ApplicationEventCallback>:

/* Application callback */
void USART_ApplicationEventCallback(USART_Handle_t *pUSARTHandle, uint8_t AppEv)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	70fb      	strb	r3, [r7, #3]
    if (AppEv == USART_EVENT_TX_CMPLT)
 8000df0:	78fb      	ldrb	r3, [r7, #3]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d103      	bne.n	8000dfe <USART_ApplicationEventCallback+0x1a>
    {
        txDone = 1; // Transmission done
 8000df6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e24 <USART_ApplicationEventCallback+0x40>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	701a      	strb	r2, [r3, #0]
    {
        rxDone = 1; // Reception done
        // Optionally, send back what was received
        USART_SendDataIT(pUSARTHandle, rx_buffer, strlen((char *)rx_buffer));
    }
}
 8000dfc:	e00e      	b.n	8000e1c <USART_ApplicationEventCallback+0x38>
    else if (AppEv == USART_EVENT_RX_CMPLT)
 8000dfe:	78fb      	ldrb	r3, [r7, #3]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d10b      	bne.n	8000e1c <USART_ApplicationEventCallback+0x38>
        rxDone = 1; // Reception done
 8000e04:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <USART_ApplicationEventCallback+0x44>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	701a      	strb	r2, [r3, #0]
        USART_SendDataIT(pUSARTHandle, rx_buffer, strlen((char *)rx_buffer));
 8000e0a:	4808      	ldr	r0, [pc, #32]	@ (8000e2c <USART_ApplicationEventCallback+0x48>)
 8000e0c:	f7ff f9de 	bl	80001cc <strlen>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	4905      	ldr	r1, [pc, #20]	@ (8000e2c <USART_ApplicationEventCallback+0x48>)
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff fdd2 	bl	80009c0 <USART_SendDataIT>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000084 	.word	0x20000084
 8000e28:	20000085 	.word	0x20000085
 8000e2c:	20000064 	.word	0x20000064

08000e30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e30:	480d      	ldr	r0, [pc, #52]	@ (8000e68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e32:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e34:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e38:	480c      	ldr	r0, [pc, #48]	@ (8000e6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e3a:	490d      	ldr	r1, [pc, #52]	@ (8000e70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <LoopForever+0xe>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e50:	4c0a      	ldr	r4, [pc, #40]	@ (8000e7c <LoopForever+0x16>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000e5e:	f000 f811 	bl	8000e84 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000e62:	f7ff ff77 	bl	8000d54 <main>

08000e66 <LoopForever>:

LoopForever:
  b LoopForever
 8000e66:	e7fe      	b.n	8000e66 <LoopForever>
  ldr   r0, =_estack
 8000e68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000e74:	08000ef4 	.word	0x08000ef4
  ldr r2, =_sbss
 8000e78:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000e7c:	20000088 	.word	0x20000088

08000e80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC1_2_IRQHandler>
	...

08000e84 <__libc_init_array>:
 8000e84:	b570      	push	{r4, r5, r6, lr}
 8000e86:	4d0d      	ldr	r5, [pc, #52]	@ (8000ebc <__libc_init_array+0x38>)
 8000e88:	4c0d      	ldr	r4, [pc, #52]	@ (8000ec0 <__libc_init_array+0x3c>)
 8000e8a:	1b64      	subs	r4, r4, r5
 8000e8c:	10a4      	asrs	r4, r4, #2
 8000e8e:	2600      	movs	r6, #0
 8000e90:	42a6      	cmp	r6, r4
 8000e92:	d109      	bne.n	8000ea8 <__libc_init_array+0x24>
 8000e94:	4d0b      	ldr	r5, [pc, #44]	@ (8000ec4 <__libc_init_array+0x40>)
 8000e96:	4c0c      	ldr	r4, [pc, #48]	@ (8000ec8 <__libc_init_array+0x44>)
 8000e98:	f000 f818 	bl	8000ecc <_init>
 8000e9c:	1b64      	subs	r4, r4, r5
 8000e9e:	10a4      	asrs	r4, r4, #2
 8000ea0:	2600      	movs	r6, #0
 8000ea2:	42a6      	cmp	r6, r4
 8000ea4:	d105      	bne.n	8000eb2 <__libc_init_array+0x2e>
 8000ea6:	bd70      	pop	{r4, r5, r6, pc}
 8000ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eac:	4798      	blx	r3
 8000eae:	3601      	adds	r6, #1
 8000eb0:	e7ee      	b.n	8000e90 <__libc_init_array+0xc>
 8000eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eb6:	4798      	blx	r3
 8000eb8:	3601      	adds	r6, #1
 8000eba:	e7f2      	b.n	8000ea2 <__libc_init_array+0x1e>
 8000ebc:	08000eec 	.word	0x08000eec
 8000ec0:	08000eec 	.word	0x08000eec
 8000ec4:	08000eec 	.word	0x08000eec
 8000ec8:	08000ef0 	.word	0x08000ef0

08000ecc <_init>:
 8000ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ece:	bf00      	nop
 8000ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ed2:	bc08      	pop	{r3}
 8000ed4:	469e      	mov	lr, r3
 8000ed6:	4770      	bx	lr

08000ed8 <_fini>:
 8000ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eda:	bf00      	nop
 8000edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ede:	bc08      	pop	{r3}
 8000ee0:	469e      	mov	lr, r3
 8000ee2:	4770      	bx	lr
