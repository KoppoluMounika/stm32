
04_SPI_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b8c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d18  08000d18  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d18  08000d18  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000d18  08000d18  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000d18  08000d18  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d18  08000d18  00001d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000d1c  08000d1c  00001d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000d20  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000048  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000004c  2000004c  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001689  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004b2  00000000  00000000  000036bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00003b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000010f  00000000  00000000  00003ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000256f  00000000  00000000  00003df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001af4  00000000  00000000  00006366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a26c  00000000  00000000  00007e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000120c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000540  00000000  00000000  0001210c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  0001264c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000004 	.word	0x20000004
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08000d00 	.word	0x08000d00

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000008 	.word	0x20000008
 80001c8:	08000d00 	.word	0x08000d00

080001cc <SPI_PeriClockControl>:
#include "stm32_spi_interrupt.h"

// Peripheral clock setup
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	460b      	mov	r3, r1
 80001d6:	70fb      	strb	r3, [r7, #3]
    if (EnorDi == ENABLE) {
 80001d8:	78fb      	ldrb	r3, [r7, #3]
 80001da:	2b01      	cmp	r3, #1
 80001dc:	d11f      	bne.n	800021e <SPI_PeriClockControl+0x52>
        if (pSPIx == SPI1) {
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	4a12      	ldr	r2, [pc, #72]	@ (800022c <SPI_PeriClockControl+0x60>)
 80001e2:	4293      	cmp	r3, r2
 80001e4:	d106      	bne.n	80001f4 <SPI_PeriClockControl+0x28>
            SPI1_PCLK_EN();
 80001e6:	4b12      	ldr	r3, [pc, #72]	@ (8000230 <SPI_PeriClockControl+0x64>)
 80001e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80001ea:	4a11      	ldr	r2, [pc, #68]	@ (8000230 <SPI_PeriClockControl+0x64>)
 80001ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80001f0:	6613      	str	r3, [r2, #96]	@ 0x60
            SPI3_PCLK_EN();
        }
    } else {

    }
}
 80001f2:	e014      	b.n	800021e <SPI_PeriClockControl+0x52>
        } else if (pSPIx == SPI2) {
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000234 <SPI_PeriClockControl+0x68>)
 80001f8:	4293      	cmp	r3, r2
 80001fa:	d106      	bne.n	800020a <SPI_PeriClockControl+0x3e>
            SPI2_PCLK_EN();
 80001fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000230 <SPI_PeriClockControl+0x64>)
 80001fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000200:	4a0b      	ldr	r2, [pc, #44]	@ (8000230 <SPI_PeriClockControl+0x64>)
 8000202:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000206:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000208:	e009      	b.n	800021e <SPI_PeriClockControl+0x52>
        } else if (pSPIx == SPI3) {
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a0a      	ldr	r2, [pc, #40]	@ (8000238 <SPI_PeriClockControl+0x6c>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d105      	bne.n	800021e <SPI_PeriClockControl+0x52>
            SPI3_PCLK_EN();
 8000212:	4b07      	ldr	r3, [pc, #28]	@ (8000230 <SPI_PeriClockControl+0x64>)
 8000214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000216:	4a06      	ldr	r2, [pc, #24]	@ (8000230 <SPI_PeriClockControl+0x64>)
 8000218:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800021c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40013000 	.word	0x40013000
 8000230:	40021000 	.word	0x40021000
 8000234:	40003800 	.word	0x40003800
 8000238:	40003c00 	.word	0x40003c00

0800023c <SPI_Init>:

// Init and deinit SPI
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	SPI_PeriClockControl(pSPIHandle->pSPIx,ENABLE);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	2101      	movs	r1, #1
 800024a:	4618      	mov	r0, r3
 800024c:	f7ff ffbe 	bl	80001cc <SPI_PeriClockControl>
    uint32_t tempreg = 0;
 8000250:	2300      	movs	r3, #0
 8000252:	60fb      	str	r3, [r7, #12]
    SPI_PeripheralControl(pSPIHandle->pSPIx, DISABLE);
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f000 f865 	bl	800032a <SPI_PeripheralControl>

    // Configure device mode
    tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	791b      	ldrb	r3, [r3, #4]
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	68fa      	ldr	r2, [r7, #12]
 8000268:	4313      	orrs	r3, r2
 800026a:	60fb      	str	r3, [r7, #12]

    // Configure bus config
    if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD) {
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	795b      	ldrb	r3, [r3, #5]
 8000270:	2b01      	cmp	r3, #1
 8000272:	d104      	bne.n	800027e <SPI_Init+0x42>
        tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800027a:	60fb      	str	r3, [r7, #12]
 800027c:	e014      	b.n	80002a8 <SPI_Init+0x6c>
    } else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD) {
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	795b      	ldrb	r3, [r3, #5]
 8000282:	2b02      	cmp	r3, #2
 8000284:	d104      	bne.n	8000290 <SPI_Init+0x54>
        tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	e00b      	b.n	80002a8 <SPI_Init+0x6c>
    } else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_TXONLY) {
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	795b      	ldrb	r3, [r3, #5]
 8000294:	2b03      	cmp	r3, #3
 8000296:	d107      	bne.n	80002a8 <SPI_Init+0x6c>
        tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800029e:	60fb      	str	r3, [r7, #12]
        tempreg |= (1 << SPI_CR1_RXONLY);
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002a6:	60fb      	str	r3, [r7, #12]
    }

    // Configure clock speed
    tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	799b      	ldrb	r3, [r3, #6]
 80002ac:	00db      	lsls	r3, r3, #3
 80002ae:	68fa      	ldr	r2, [r7, #12]
 80002b0:	4313      	orrs	r3, r2
 80002b2:	60fb      	str	r3, [r7, #12]

    // Configure CPOL & CPHA
    tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	7a1b      	ldrb	r3, [r3, #8]
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	68fa      	ldr	r2, [r7, #12]
 80002bc:	4313      	orrs	r3, r2
 80002be:	60fb      	str	r3, [r7, #12]
    tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	7a5b      	ldrb	r3, [r3, #9]
 80002c4:	461a      	mov	r2, r3
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	4313      	orrs	r3, r2
 80002ca:	60fb      	str	r3, [r7, #12]

    tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	7a9b      	ldrb	r3, [r3, #10]
 80002d0:	025b      	lsls	r3, r3, #9
 80002d2:	68fa      	ldr	r2, [r7, #12]
 80002d4:	4313      	orrs	r3, r2
 80002d6:	60fb      	str	r3, [r7, #12]
    // Write to CR1
    pSPIHandle->pSPIx->CR1 = tempreg;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	68fa      	ldr	r2, [r7, #12]
 80002de:	601a      	str	r2, [r3, #0]

    // Configure data size in CR2
    pSPIHandle->pSPIx->CR2 &= ~(0xF << SPI_CR2_DS);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	685a      	ldr	r2, [r3, #4]
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 80002ee:	605a      	str	r2, [r3, #4]
    pSPIHandle->pSPIx->CR2 |= (pSPIHandle->SPIConfig.SPI_DataSize << SPI_CR2_DS);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	6859      	ldr	r1, [r3, #4]
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	79db      	ldrb	r3, [r3, #7]
 80002fa:	021a      	lsls	r2, r3, #8
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	430a      	orrs	r2, r1
 8000302:	605a      	str	r2, [r3, #4]

    if(pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_SSM)) {
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800030e:	2b00      	cmp	r3, #0
 8000310:	d007      	beq.n	8000322 <SPI_Init+0xe6>
    	        pSPIHandle->pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000320:	601a      	str	r2, [r3, #0]
    }

    //SPI_PeripheralControl(pSPIHandle->pSPIx , ENABLE);
}
 8000322:	bf00      	nop
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}

0800032a <SPI_PeripheralControl>:
        len--;
    }
}

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx,uint8_t EnorDi)
{
 800032a:	b480      	push	{r7}
 800032c:	b083      	sub	sp, #12
 800032e:	af00      	add	r7, sp, #0
 8000330:	6078      	str	r0, [r7, #4]
 8000332:	460b      	mov	r3, r1
 8000334:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000336:	78fb      	ldrb	r3, [r7, #3]
 8000338:	2b01      	cmp	r3, #1
 800033a:	d106      	bne.n	800034a <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1  |= (1 << SPI_CR1_SPE);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1  &= ~(1 << SPI_CR1_SPE);
	}
}
 8000348:	e005      	b.n	8000356 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1  &= ~(1 << SPI_CR1_SPE);
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	601a      	str	r2, [r3, #0]
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <SPI_TransmitReceive_IT>:

uint8_t SPI_TransmitReceive_IT(SPI_Handle_t *pSPIHandle,
                               uint8_t *pTxBuffer,
                               uint8_t *pRxBuffer,
                               uint32_t len)
{
 8000362:	b480      	push	{r7}
 8000364:	b085      	sub	sp, #20
 8000366:	af00      	add	r7, sp, #0
 8000368:	60f8      	str	r0, [r7, #12]
 800036a:	60b9      	str	r1, [r7, #8]
 800036c:	607a      	str	r2, [r7, #4]
 800036e:	603b      	str	r3, [r7, #0]
    if (pSPIHandle->TxRxState != SPI_BUSY_IN_TXRX)
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	7f9b      	ldrb	r3, [r3, #30]
 8000374:	2b03      	cmp	r3, #3
 8000376:	d020      	beq.n	80003ba <SPI_TransmitReceive_IT+0x58>
    {
        // Save buffers
        pSPIHandle->pTxBuffer = pTxBuffer;
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	68ba      	ldr	r2, [r7, #8]
 800037c:	60da      	str	r2, [r3, #12]
        pSPIHandle->pRxBuffer = pRxBuffer;
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	611a      	str	r2, [r3, #16]
        pSPIHandle->TxLen = len;
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	683a      	ldr	r2, [r7, #0]
 8000388:	615a      	str	r2, [r3, #20]
        pSPIHandle->RxLen = len;
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	683a      	ldr	r2, [r7, #0]
 800038e:	619a      	str	r2, [r3, #24]

        // Mark busy
        pSPIHandle->TxRxState = SPI_BUSY_IN_TXRX;
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	2203      	movs	r2, #3
 8000394:	779a      	strb	r2, [r3, #30]

        // Enable TXEIE and RXNEIE
        pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_TXEIE);
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	685a      	ldr	r2, [r3, #4]
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80003a4:	605a      	str	r2, [r3, #4]
        pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_RXNEIE);
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	685a      	ldr	r2, [r3, #4]
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80003b4:	605a      	str	r2, [r3, #4]

        return 1;
 80003b6:	2301      	movs	r3, #1
 80003b8:	e000      	b.n	80003bc <SPI_TransmitReceive_IT+0x5a>
    }
    return 0;
 80003ba:	2300      	movs	r3, #0
}
 80003bc:	4618      	mov	r0, r3
 80003be:	3714      	adds	r7, #20
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr

080003c8 <spi_txe_IT_handle>:
    return 0;
}
#endif
//it send and receive
void spi_txe_IT_handle(SPI_Handle_t *pSPIHandle)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	if (pSPIHandle->TxLen > 0)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d00f      	beq.n	80003f8 <spi_txe_IT_handle+0x30>
	{
		pSPIHandle->pSPIx->DR = *(pSPIHandle->pTxBuffer);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	68db      	ldr	r3, [r3, #12]
 80003dc:	781a      	ldrb	r2, [r3, #0]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	60da      	str	r2, [r3, #12]
		pSPIHandle->pTxBuffer++;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	68db      	ldr	r3, [r3, #12]
 80003e8:	1c5a      	adds	r2, r3, #1
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	1e5a      	subs	r2, r3, #1
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	615a      	str	r2, [r3, #20]
	}
	if (pSPIHandle->TxLen == 0)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	695b      	ldr	r3, [r3, #20]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d10e      	bne.n	800041e <spi_txe_IT_handle+0x56>
	{
		// Tx done
		pSPIHandle->pSPIx->CR2 &= ~(1<<SPI_CR2_TXEIE);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	685a      	ldr	r2, [r3, #4]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800040e:	605a      	str	r2, [r3, #4]
		pSPIHandle->TxState = SPI_READY;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	2200      	movs	r2, #0
 8000414:	771a      	strb	r2, [r3, #28]
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_TX_CMPLT);
 8000416:	2101      	movs	r1, #1
 8000418:	6878      	ldr	r0, [r7, #4]
 800041a:	f000 fbf1 	bl	8000c00 <SPI_ApplicationEventCallback>
	}
	if ((pSPIHandle->TxLen == 0) && (pSPIHandle->RxLen == 0))
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d10d      	bne.n	8000442 <spi_txe_IT_handle+0x7a>
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d109      	bne.n	8000442 <spi_txe_IT_handle+0x7a>
	{
		pSPIHandle->TxState = SPI_READY;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	2200      	movs	r2, #0
 8000432:	771a      	strb	r2, [r3, #28]
		pSPIHandle->RxState = SPI_READY;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2200      	movs	r2, #0
 8000438:	775a      	strb	r2, [r3, #29]
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_TXRX_CMPLT);
 800043a:	2103      	movs	r1, #3
 800043c:	6878      	ldr	r0, [r7, #4]
 800043e:	f000 fbdf 	bl	8000c00 <SPI_ApplicationEventCallback>
	}
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <spi_rxe_IT_handle>:

void spi_rxe_IT_handle(SPI_Handle_t *pSPIHandle)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b082      	sub	sp, #8
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
	if (pSPIHandle->RxLen > 0)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d010      	beq.n	800047c <spi_rxe_IT_handle+0x32>
	{
		*(pSPIHandle->pRxBuffer) = pSPIHandle->pSPIx->DR;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	68da      	ldr	r2, [r3, #12]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	691b      	ldr	r3, [r3, #16]
 8000464:	b2d2      	uxtb	r2, r2
 8000466:	701a      	strb	r2, [r3, #0]
		pSPIHandle->pRxBuffer++;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	691b      	ldr	r3, [r3, #16]
 800046c:	1c5a      	adds	r2, r3, #1
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen--;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	1e5a      	subs	r2, r3, #1
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	619a      	str	r2, [r3, #24]
	}
	if (pSPIHandle->RxLen == 0)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d10e      	bne.n	80004a2 <spi_rxe_IT_handle+0x58>
	{
		// Rx done
		pSPIHandle->pSPIx->CR2 &= ~SPI_CR2_RXNEIE;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	685a      	ldr	r2, [r3, #4]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f022 0206 	bic.w	r2, r2, #6
 8000492:	605a      	str	r2, [r3, #4]
		pSPIHandle->TxState = SPI_READY;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2200      	movs	r2, #0
 8000498:	771a      	strb	r2, [r3, #28]
	    SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_RX_CMPLT);
 800049a:	2102      	movs	r1, #2
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f000 fbaf 	bl	8000c00 <SPI_ApplicationEventCallback>
	}
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <SPI_IRQ_interrupt_Config>:
// IRQ config and handling (skeletons)
void SPI_IRQ_interrupt_Config(uint8_t IRQNumber, uint8_t EnorDi)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	460a      	mov	r2, r1
 80004b6:	71fb      	strb	r3, [r7, #7]
 80004b8:	4613      	mov	r3, r2
 80004ba:	71bb      	strb	r3, [r7, #6]
    // TODO: configure NVIC
	if(EnorDi == ENABLE)
 80004bc:	79bb      	ldrb	r3, [r7, #6]
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d120      	bne.n	8000504 <SPI_IRQ_interrupt_Config+0x58>
	{
		if(IRQNumber <= 31){
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	2b1f      	cmp	r3, #31
 80004c6:	d80a      	bhi.n	80004de <SPI_IRQ_interrupt_Config+0x32>
			*NVIC_ISER0 |= (1<<IRQNumber);
 80004c8:	4b21      	ldr	r3, [pc, #132]	@ (8000550 <SPI_IRQ_interrupt_Config+0xa4>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	79fa      	ldrb	r2, [r7, #7]
 80004ce:	2101      	movs	r1, #1
 80004d0:	fa01 f202 	lsl.w	r2, r1, r2
 80004d4:	4611      	mov	r1, r2
 80004d6:	4a1e      	ldr	r2, [pc, #120]	@ (8000550 <SPI_IRQ_interrupt_Config+0xa4>)
 80004d8:	430b      	orrs	r3, r1
 80004da:	6013      	str	r3, [r2, #0]
		}
		else if(IRQNumber >=32 && IRQNumber < 64){
			*NVIC_ICER1 |= (1<<(IRQNumber%32));
		}
	}
}
 80004dc:	e032      	b.n	8000544 <SPI_IRQ_interrupt_Config+0x98>
		else if(IRQNumber >=32 && IRQNumber < 64){
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	2b1f      	cmp	r3, #31
 80004e2:	d92f      	bls.n	8000544 <SPI_IRQ_interrupt_Config+0x98>
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80004e8:	d82c      	bhi.n	8000544 <SPI_IRQ_interrupt_Config+0x98>
			*NVIC_ISER1 |= (1<<(IRQNumber%32));
 80004ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000554 <SPI_IRQ_interrupt_Config+0xa8>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	79fa      	ldrb	r2, [r7, #7]
 80004f0:	f002 021f 	and.w	r2, r2, #31
 80004f4:	2101      	movs	r1, #1
 80004f6:	fa01 f202 	lsl.w	r2, r1, r2
 80004fa:	4611      	mov	r1, r2
 80004fc:	4a15      	ldr	r2, [pc, #84]	@ (8000554 <SPI_IRQ_interrupt_Config+0xa8>)
 80004fe:	430b      	orrs	r3, r1
 8000500:	6013      	str	r3, [r2, #0]
}
 8000502:	e01f      	b.n	8000544 <SPI_IRQ_interrupt_Config+0x98>
		if(IRQNumber <= 31){
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	2b1f      	cmp	r3, #31
 8000508:	d80a      	bhi.n	8000520 <SPI_IRQ_interrupt_Config+0x74>
			*NVIC_ICER0 |= (1<<IRQNumber);
 800050a:	4b13      	ldr	r3, [pc, #76]	@ (8000558 <SPI_IRQ_interrupt_Config+0xac>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	79fa      	ldrb	r2, [r7, #7]
 8000510:	2101      	movs	r1, #1
 8000512:	fa01 f202 	lsl.w	r2, r1, r2
 8000516:	4611      	mov	r1, r2
 8000518:	4a0f      	ldr	r2, [pc, #60]	@ (8000558 <SPI_IRQ_interrupt_Config+0xac>)
 800051a:	430b      	orrs	r3, r1
 800051c:	6013      	str	r3, [r2, #0]
}
 800051e:	e011      	b.n	8000544 <SPI_IRQ_interrupt_Config+0x98>
		else if(IRQNumber >=32 && IRQNumber < 64){
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	2b1f      	cmp	r3, #31
 8000524:	d90e      	bls.n	8000544 <SPI_IRQ_interrupt_Config+0x98>
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	2b3f      	cmp	r3, #63	@ 0x3f
 800052a:	d80b      	bhi.n	8000544 <SPI_IRQ_interrupt_Config+0x98>
			*NVIC_ICER1 |= (1<<(IRQNumber%32));
 800052c:	4b0b      	ldr	r3, [pc, #44]	@ (800055c <SPI_IRQ_interrupt_Config+0xb0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	79fa      	ldrb	r2, [r7, #7]
 8000532:	f002 021f 	and.w	r2, r2, #31
 8000536:	2101      	movs	r1, #1
 8000538:	fa01 f202 	lsl.w	r2, r1, r2
 800053c:	4611      	mov	r1, r2
 800053e:	4a07      	ldr	r2, [pc, #28]	@ (800055c <SPI_IRQ_interrupt_Config+0xb0>)
 8000540:	430b      	orrs	r3, r1
 8000542:	6013      	str	r3, [r2, #0]
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	e000e100 	.word	0xe000e100
 8000554:	e000e104 	.word	0xe000e104
 8000558:	e000e180 	.word	0xe000e180
 800055c:	e000e184 	.word	0xe000e184

08000560 <SPI_IRQ_priority_Config>:

void SPI_IRQ_priority_Config(uint8_t IRQNumber, uint8_t priority)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	460a      	mov	r2, r1
 800056a:	71fb      	strb	r3, [r7, #7]
 800056c:	4613      	mov	r3, r2
 800056e:	71bb      	strb	r3, [r7, #6]
	uint8_t iprx = IRQNumber / 4;
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	089b      	lsrs	r3, r3, #2
 8000574:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	f003 0303 	and.w	r3, r3, #3
 800057c:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount  = (8*iprx_section) + (8-NO_PR_BITS_IMPLEMENTED);
 800057e:	7bbb      	ldrb	r3, [r7, #14]
 8000580:	00db      	lsls	r3, r3, #3
 8000582:	b2db      	uxtb	r3, r3
 8000584:	3304      	adds	r3, #4
 8000586:	737b      	strb	r3, [r7, #13]

	*((NVIC_PR_BASE_ADDR+(iprx*4))) |= (priority << shift_amount);
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	011b      	lsls	r3, r3, #4
 800058c:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000590:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	79b9      	ldrb	r1, [r7, #6]
 8000598:	7b7b      	ldrb	r3, [r7, #13]
 800059a:	fa01 f303 	lsl.w	r3, r1, r3
 800059e:	4619      	mov	r1, r3
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	011b      	lsls	r3, r3, #4
 80005a4:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80005a8:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80005ac:	430a      	orrs	r2, r1
 80005ae:	601a      	str	r2, [r3, #0]

}
 80005b0:	bf00      	nop
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <SPI_IRQHandling>:
        }
    }
}
#endif
void SPI_IRQHandling(SPI_Handle_t *pHandle)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
    uint32_t temp1, temp2;

    // Handle TXE interrupt
    temp1 = pHandle->pSPIx->SR & SPI_TXE_FLAG;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	f003 0302 	and.w	r3, r3, #2
 80005ce:	60fb      	str	r3, [r7, #12]
    temp2 = pHandle->pSPIx->CR2 & (1 << SPI_CR2_TXEIE);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005da:	60bb      	str	r3, [r7, #8]

    if (temp1 && temp2)
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d005      	beq.n	80005ee <SPI_IRQHandling+0x32>
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d002      	beq.n	80005ee <SPI_IRQHandling+0x32>
    {
        spi_txe_IT_handle(pHandle);
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff feed 	bl	80003c8 <spi_txe_IT_handle>
    }

    // Handle RXNE interrupt
    temp1 = pHandle->pSPIx->SR & SPI_RXNE_FLAG;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	60fb      	str	r3, [r7, #12]
    temp2 = pHandle->pSPIx->CR2 & (1 << SPI_CR2_RXNEIE);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000604:	60bb      	str	r3, [r7, #8]

    if (temp1 && temp2)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d005      	beq.n	8000618 <SPI_IRQHandling+0x5c>
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d002      	beq.n	8000618 <SPI_IRQHandling+0x5c>
    {
        spi_rxe_IT_handle(pHandle);
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f7ff ff19 	bl	800044a <spi_rxe_IT_handle>
    }


}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <GPIO_PeriClockControl>:
  * @param[in] pGPIOx  - Base address of GPIO peripheral (e.g., GPIOA, GPIOB, etc.)
  * @param[in] EnorDi  - Enable or disable macros: ENABLE = 1, DISABLE = 0
  * @return    - None
  * @note      - Must be called before accessing GPIO registers.
  */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 800062c:	78fb      	ldrb	r3, [r7, #3]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d157      	bne.n	80006e2 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx==GPIOA){
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000638:	d106      	bne.n	8000648 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800063a:	4b58      	ldr	r3, [pc, #352]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	4a57      	ldr	r2, [pc, #348]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	64d3      	str	r3, [r2, #76]	@ 0x4c
		}
		else if(pGPIOx==GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 8000646:	e0a3      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOB){
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4a55      	ldr	r2, [pc, #340]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d106      	bne.n	800065e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000650:	4b52      	ldr	r3, [pc, #328]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 8000652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000654:	4a51      	ldr	r2, [pc, #324]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 8000656:	f043 0302 	orr.w	r3, r3, #2
 800065a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800065c:	e098      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOC){
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a50      	ldr	r2, [pc, #320]	@ (80007a4 <GPIO_PeriClockControl+0x184>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d106      	bne.n	8000674 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000666:	4b4d      	ldr	r3, [pc, #308]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066a:	4a4c      	ldr	r2, [pc, #304]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000672:	e08d      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOD){
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a4c      	ldr	r2, [pc, #304]	@ (80007a8 <GPIO_PeriClockControl+0x188>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d106      	bne.n	800068a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800067c:	4b47      	ldr	r3, [pc, #284]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 800067e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000680:	4a46      	ldr	r2, [pc, #280]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 8000682:	f043 0308 	orr.w	r3, r3, #8
 8000686:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000688:	e082      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOE){
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4a47      	ldr	r2, [pc, #284]	@ (80007ac <GPIO_PeriClockControl+0x18c>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d106      	bne.n	80006a0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000692:	4b42      	ldr	r3, [pc, #264]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	4a41      	ldr	r2, [pc, #260]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 8000698:	f043 0310 	orr.w	r3, r3, #16
 800069c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800069e:	e077      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOF){
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a43      	ldr	r2, [pc, #268]	@ (80007b0 <GPIO_PeriClockControl+0x190>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d106      	bne.n	80006b6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80006a8:	4b3c      	ldr	r3, [pc, #240]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 80006aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ac:	4a3b      	ldr	r2, [pc, #236]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 80006ae:	f043 0320 	orr.w	r3, r3, #32
 80006b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80006b4:	e06c      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOG){
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a3e      	ldr	r2, [pc, #248]	@ (80007b4 <GPIO_PeriClockControl+0x194>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d106      	bne.n	80006cc <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80006be:	4b37      	ldr	r3, [pc, #220]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	4a36      	ldr	r2, [pc, #216]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 80006c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80006ca:	e061      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOH){
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a3a      	ldr	r2, [pc, #232]	@ (80007b8 <GPIO_PeriClockControl+0x198>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d15d      	bne.n	8000790 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 80006d4:	4b31      	ldr	r3, [pc, #196]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 80006d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d8:	4a30      	ldr	r2, [pc, #192]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 80006da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006de:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80006e0:	e056      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		if(pGPIOx==GPIOA){
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80006e8:	d106      	bne.n	80006f8 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 80006ea:	4b2c      	ldr	r3, [pc, #176]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ee:	4a2b      	ldr	r2, [pc, #172]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 80006f0:	f023 0301 	bic.w	r3, r3, #1
 80006f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80006f6:	e04b      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOB){
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a29      	ldr	r2, [pc, #164]	@ (80007a0 <GPIO_PeriClockControl+0x180>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d106      	bne.n	800070e <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000700:	4b26      	ldr	r3, [pc, #152]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 8000702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000704:	4a25      	ldr	r2, [pc, #148]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 8000706:	f023 0302 	bic.w	r3, r3, #2
 800070a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800070c:	e040      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOC){
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4a24      	ldr	r2, [pc, #144]	@ (80007a4 <GPIO_PeriClockControl+0x184>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d106      	bne.n	8000724 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 8000716:	4b21      	ldr	r3, [pc, #132]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071a:	4a20      	ldr	r2, [pc, #128]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 800071c:	f023 0304 	bic.w	r3, r3, #4
 8000720:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000722:	e035      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOD){
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a20      	ldr	r2, [pc, #128]	@ (80007a8 <GPIO_PeriClockControl+0x188>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d106      	bne.n	800073a <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 800072c:	4b1b      	ldr	r3, [pc, #108]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 800072e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000730:	4a1a      	ldr	r2, [pc, #104]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 8000732:	f023 0308 	bic.w	r3, r3, #8
 8000736:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000738:	e02a      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOE){
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a1b      	ldr	r2, [pc, #108]	@ (80007ac <GPIO_PeriClockControl+0x18c>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d106      	bne.n	8000750 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000742:	4b16      	ldr	r3, [pc, #88]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000746:	4a15      	ldr	r2, [pc, #84]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 8000748:	f023 0310 	bic.w	r3, r3, #16
 800074c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800074e:	e01f      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOF){
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a17      	ldr	r2, [pc, #92]	@ (80007b0 <GPIO_PeriClockControl+0x190>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d106      	bne.n	8000766 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000758:	4b10      	ldr	r3, [pc, #64]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 800075a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075c:	4a0f      	ldr	r2, [pc, #60]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 800075e:	f023 0320 	bic.w	r3, r3, #32
 8000762:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000764:	e014      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOG){
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4a12      	ldr	r2, [pc, #72]	@ (80007b4 <GPIO_PeriClockControl+0x194>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d106      	bne.n	800077c <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	4a0a      	ldr	r2, [pc, #40]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 8000774:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000778:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800077a:	e009      	b.n	8000790 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOH){
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4a0e      	ldr	r2, [pc, #56]	@ (80007b8 <GPIO_PeriClockControl+0x198>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d105      	bne.n	8000790 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000784:	4b05      	ldr	r3, [pc, #20]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 8000786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000788:	4a04      	ldr	r2, [pc, #16]	@ (800079c <GPIO_PeriClockControl+0x17c>)
 800078a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800078e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	40021000 	.word	0x40021000
 80007a0:	48000400 	.word	0x48000400
 80007a4:	48000800 	.word	0x48000800
 80007a8:	48000c00 	.word	0x48000c00
 80007ac:	48001000 	.word	0x48001000
 80007b0:	48001400 	.word	0x48001400
 80007b4:	48001800 	.word	0x48001800
 80007b8:	48001c00 	.word	0x48001c00

080007bc <GPIO_Init>:
  * @param[in] pGPIOHandle - Handle structure that contains GPIO configuration information.
  * @return    - None
  * @note      - Make sure peripheral clock for GPIO is enabled before calling this function.
  */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80007bc:	b480      	push	{r7}
 80007be:	b087      	sub	sp, #28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]

    // 1. Configure the mode of GPIO pin
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	795b      	ldrb	r3, [r3, #5]
 80007cc:	2b03      	cmp	r3, #3
 80007ce:	d822      	bhi.n	8000816 <GPIO_Init+0x5a>
    {
        // non-interrupt mode
        temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	795b      	ldrb	r3, [r3, #5]
 80007d4:	461a      	mov	r2, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	791b      	ldrb	r3, [r3, #4]
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	fa02 f303 	lsl.w	r3, r2, r3
 80007e0:	617b      	str	r3, [r7, #20]
        pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	791b      	ldrb	r3, [r3, #4]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	2103      	movs	r1, #3
 80007f0:	fa01 f303 	lsl.w	r3, r1, r3
 80007f4:	43db      	mvns	r3, r3
 80007f6:	4619      	mov	r1, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	400a      	ands	r2, r1
 80007fe:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= temp;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	6819      	ldr	r1, [r3, #0]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	697a      	ldr	r2, [r7, #20]
 800080c:	430a      	orrs	r2, r1
 800080e:	601a      	str	r2, [r3, #0]
        temp = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	e0cb      	b.n	80009ae <GPIO_Init+0x1f2>
    }
    else
    {
        // interrupt mode
        if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	795b      	ldrb	r3, [r3, #5]
 800081a:	2b04      	cmp	r3, #4
 800081c:	d117      	bne.n	800084e <GPIO_Init+0x92>
        {
        	EXTI->FTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800081e:	4b47      	ldr	r3, [pc, #284]	@ (800093c <GPIO_Init+0x180>)
 8000820:	68db      	ldr	r3, [r3, #12]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	7912      	ldrb	r2, [r2, #4]
 8000826:	4611      	mov	r1, r2
 8000828:	2201      	movs	r2, #1
 800082a:	408a      	lsls	r2, r1
 800082c:	4611      	mov	r1, r2
 800082e:	4a43      	ldr	r2, [pc, #268]	@ (800093c <GPIO_Init+0x180>)
 8000830:	430b      	orrs	r3, r1
 8000832:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR1 &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000834:	4b41      	ldr	r3, [pc, #260]	@ (800093c <GPIO_Init+0x180>)
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	7912      	ldrb	r2, [r2, #4]
 800083c:	4611      	mov	r1, r2
 800083e:	2201      	movs	r2, #1
 8000840:	408a      	lsls	r2, r1
 8000842:	43d2      	mvns	r2, r2
 8000844:	4611      	mov	r1, r2
 8000846:	4a3d      	ldr	r2, [pc, #244]	@ (800093c <GPIO_Init+0x180>)
 8000848:	400b      	ands	r3, r1
 800084a:	6093      	str	r3, [r2, #8]
 800084c:	e035      	b.n	80008ba <GPIO_Init+0xfe>

        }
        else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	795b      	ldrb	r3, [r3, #5]
 8000852:	2b05      	cmp	r3, #5
 8000854:	d117      	bne.n	8000886 <GPIO_Init+0xca>
        {
        	EXTI->RTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000856:	4b39      	ldr	r3, [pc, #228]	@ (800093c <GPIO_Init+0x180>)
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	7912      	ldrb	r2, [r2, #4]
 800085e:	4611      	mov	r1, r2
 8000860:	2201      	movs	r2, #1
 8000862:	408a      	lsls	r2, r1
 8000864:	4611      	mov	r1, r2
 8000866:	4a35      	ldr	r2, [pc, #212]	@ (800093c <GPIO_Init+0x180>)
 8000868:	430b      	orrs	r3, r1
 800086a:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR1 &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800086c:	4b33      	ldr	r3, [pc, #204]	@ (800093c <GPIO_Init+0x180>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	7912      	ldrb	r2, [r2, #4]
 8000874:	4611      	mov	r1, r2
 8000876:	2201      	movs	r2, #1
 8000878:	408a      	lsls	r2, r1
 800087a:	43d2      	mvns	r2, r2
 800087c:	4611      	mov	r1, r2
 800087e:	4a2f      	ldr	r2, [pc, #188]	@ (800093c <GPIO_Init+0x180>)
 8000880:	400b      	ands	r3, r1
 8000882:	60d3      	str	r3, [r2, #12]
 8000884:	e019      	b.n	80008ba <GPIO_Init+0xfe>
        }
        else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	795b      	ldrb	r3, [r3, #5]
 800088a:	2b06      	cmp	r3, #6
 800088c:	d115      	bne.n	80008ba <GPIO_Init+0xfe>
        {
        	EXTI->FTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800088e:	4b2b      	ldr	r3, [pc, #172]	@ (800093c <GPIO_Init+0x180>)
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	7912      	ldrb	r2, [r2, #4]
 8000896:	4611      	mov	r1, r2
 8000898:	2201      	movs	r2, #1
 800089a:	408a      	lsls	r2, r1
 800089c:	4611      	mov	r1, r2
 800089e:	4a27      	ldr	r2, [pc, #156]	@ (800093c <GPIO_Init+0x180>)
 80008a0:	430b      	orrs	r3, r1
 80008a2:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008a4:	4b25      	ldr	r3, [pc, #148]	@ (800093c <GPIO_Init+0x180>)
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	7912      	ldrb	r2, [r2, #4]
 80008ac:	4611      	mov	r1, r2
 80008ae:	2201      	movs	r2, #1
 80008b0:	408a      	lsls	r2, r1
 80008b2:	4611      	mov	r1, r2
 80008b4:	4a21      	ldr	r2, [pc, #132]	@ (800093c <GPIO_Init+0x180>)
 80008b6:	430b      	orrs	r3, r1
 80008b8:	6093      	str	r3, [r2, #8]
        }
        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	791b      	ldrb	r3, [r3, #4]
 80008be:	089b      	lsrs	r3, r3, #2
 80008c0:	74fb      	strb	r3, [r7, #19]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	791b      	ldrb	r3, [r3, #4]
 80008c6:	f003 0303 	and.w	r3, r3, #3
 80008ca:	74bb      	strb	r3, [r7, #18]
        uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80008d4:	d042      	beq.n	800095c <GPIO_Init+0x1a0>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a19      	ldr	r2, [pc, #100]	@ (8000940 <GPIO_Init+0x184>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d02b      	beq.n	8000938 <GPIO_Init+0x17c>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a17      	ldr	r2, [pc, #92]	@ (8000944 <GPIO_Init+0x188>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d024      	beq.n	8000934 <GPIO_Init+0x178>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a16      	ldr	r2, [pc, #88]	@ (8000948 <GPIO_Init+0x18c>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d01d      	beq.n	8000930 <GPIO_Init+0x174>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a14      	ldr	r2, [pc, #80]	@ (800094c <GPIO_Init+0x190>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d016      	beq.n	800092c <GPIO_Init+0x170>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a13      	ldr	r2, [pc, #76]	@ (8000950 <GPIO_Init+0x194>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d00f      	beq.n	8000928 <GPIO_Init+0x16c>
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a11      	ldr	r2, [pc, #68]	@ (8000954 <GPIO_Init+0x198>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d008      	beq.n	8000924 <GPIO_Init+0x168>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a10      	ldr	r2, [pc, #64]	@ (8000958 <GPIO_Init+0x19c>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d101      	bne.n	8000920 <GPIO_Init+0x164>
 800091c:	2307      	movs	r3, #7
 800091e:	e01e      	b.n	800095e <GPIO_Init+0x1a2>
 8000920:	2300      	movs	r3, #0
 8000922:	e01c      	b.n	800095e <GPIO_Init+0x1a2>
 8000924:	2306      	movs	r3, #6
 8000926:	e01a      	b.n	800095e <GPIO_Init+0x1a2>
 8000928:	2305      	movs	r3, #5
 800092a:	e018      	b.n	800095e <GPIO_Init+0x1a2>
 800092c:	2304      	movs	r3, #4
 800092e:	e016      	b.n	800095e <GPIO_Init+0x1a2>
 8000930:	2303      	movs	r3, #3
 8000932:	e014      	b.n	800095e <GPIO_Init+0x1a2>
 8000934:	2302      	movs	r3, #2
 8000936:	e012      	b.n	800095e <GPIO_Init+0x1a2>
 8000938:	2301      	movs	r3, #1
 800093a:	e010      	b.n	800095e <GPIO_Init+0x1a2>
 800093c:	40010400 	.word	0x40010400
 8000940:	48000400 	.word	0x48000400
 8000944:	48000800 	.word	0x48000800
 8000948:	48000c00 	.word	0x48000c00
 800094c:	48001000 	.word	0x48001000
 8000950:	48001400 	.word	0x48001400
 8000954:	48001800 	.word	0x48001800
 8000958:	48001c00 	.word	0x48001c00
 800095c:	2300      	movs	r3, #0
 800095e:	747b      	strb	r3, [r7, #17]
        SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2 * 4));
 8000960:	4a63      	ldr	r2, [pc, #396]	@ (8000af0 <GPIO_Init+0x334>)
 8000962:	7cfb      	ldrb	r3, [r7, #19]
 8000964:	3302      	adds	r3, #2
 8000966:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800096a:	7cbb      	ldrb	r3, [r7, #18]
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	210f      	movs	r1, #15
 8000970:	fa01 f303 	lsl.w	r3, r1, r3
 8000974:	43db      	mvns	r3, r3
 8000976:	4618      	mov	r0, r3
 8000978:	495d      	ldr	r1, [pc, #372]	@ (8000af0 <GPIO_Init+0x334>)
 800097a:	7cfb      	ldrb	r3, [r7, #19]
 800097c:	4002      	ands	r2, r0
 800097e:	3302      	adds	r3, #2
 8000980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        SYSCFG -> EXTICR[temp1] = portcode << (temp2 * 4);
 8000984:	7c7a      	ldrb	r2, [r7, #17]
 8000986:	7cbb      	ldrb	r3, [r7, #18]
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	fa02 f103 	lsl.w	r1, r2, r3
 800098e:	4a58      	ldr	r2, [pc, #352]	@ (8000af0 <GPIO_Init+0x334>)
 8000990:	7cfb      	ldrb	r3, [r7, #19]
 8000992:	3302      	adds	r3, #2
 8000994:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        EXTI -> IMR1 |= 1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000998:	4b56      	ldr	r3, [pc, #344]	@ (8000af4 <GPIO_Init+0x338>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	7912      	ldrb	r2, [r2, #4]
 80009a0:	4611      	mov	r1, r2
 80009a2:	2201      	movs	r2, #1
 80009a4:	408a      	lsls	r2, r1
 80009a6:	4611      	mov	r1, r2
 80009a8:	4a52      	ldr	r2, [pc, #328]	@ (8000af4 <GPIO_Init+0x338>)
 80009aa:	430b      	orrs	r3, r1
 80009ac:	6013      	str	r3, [r2, #0]
    }

    // 2. Configure speed
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	799b      	ldrb	r3, [r3, #6]
 80009b2:	461a      	mov	r2, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	791b      	ldrb	r3, [r3, #4]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	689a      	ldr	r2, [r3, #8]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	791b      	ldrb	r3, [r3, #4]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	2103      	movs	r1, #3
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	4619      	mov	r1, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	400a      	ands	r2, r1
 80009dc:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	6899      	ldr	r1, [r3, #8]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	430a      	orrs	r2, r1
 80009ec:	609a      	str	r2, [r3, #8]
    temp = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]

    // 3. Configure pull-up/pull-down
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	79db      	ldrb	r3, [r3, #7]
 80009f6:	461a      	mov	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	791b      	ldrb	r3, [r3, #4]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	68da      	ldr	r2, [r3, #12]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	791b      	ldrb	r3, [r3, #4]
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	2103      	movs	r1, #3
 8000a12:	fa01 f303 	lsl.w	r3, r1, r3
 8000a16:	43db      	mvns	r3, r3
 8000a18:	4619      	mov	r1, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	400a      	ands	r2, r1
 8000a20:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	68d9      	ldr	r1, [r3, #12]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	60da      	str	r2, [r3, #12]
    temp = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]

    // 4. Configure output type
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	7a1b      	ldrb	r3, [r3, #8]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	791b      	ldrb	r3, [r3, #4]
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	685a      	ldr	r2, [r3, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	791b      	ldrb	r3, [r3, #4]
 8000a50:	4619      	mov	r1, r3
 8000a52:	2301      	movs	r3, #1
 8000a54:	408b      	lsls	r3, r1
 8000a56:	43db      	mvns	r3, r3
 8000a58:	4619      	mov	r1, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	400a      	ands	r2, r1
 8000a60:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	6859      	ldr	r1, [r3, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	605a      	str	r2, [r3, #4]
    temp = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]

    // 5. Configure alternate function if needed
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	795b      	ldrb	r3, [r3, #5]
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d131      	bne.n	8000ae2 <GPIO_Init+0x326>
    {
        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;  // AFR[0] or AFR[1]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	791b      	ldrb	r3, [r3, #4]
 8000a82:	08db      	lsrs	r3, r3, #3
 8000a84:	743b      	strb	r3, [r7, #16]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;  // Position within register
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	791b      	ldrb	r3, [r3, #4]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	73fb      	strb	r3, [r7, #15]

        pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	7c3a      	ldrb	r2, [r7, #16]
 8000a96:	3208      	adds	r2, #8
 8000a98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	220f      	movs	r2, #15
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	7c3a      	ldrb	r2, [r7, #16]
 8000ab0:	4001      	ands	r1, r0
 8000ab2:	3208      	adds	r2, #8
 8000ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	7c3a      	ldrb	r2, [r7, #16]
 8000abe:	3208      	adds	r2, #8
 8000ac0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	7a5b      	ldrb	r3, [r3, #9]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	7c3a      	ldrb	r2, [r7, #16]
 8000ada:	4301      	orrs	r1, r0
 8000adc:	3208      	adds	r2, #8
 8000ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 8000ae2:	bf00      	nop
 8000ae4:	371c      	adds	r7, #28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40010000 	.word	0x40010000
 8000af4:	40010400 	.word	0x40010400

08000af8 <SPI2_GPIOInits>:

volatile uint8_t spi_tx_done = 0;
volatile uint8_t spi_rx_done = 0;

void SPI2_GPIOInits(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
    GPIO_PeriClockControl(GPIOB, ENABLE);
 8000afe:	2101      	movs	r1, #1
 8000b00:	4815      	ldr	r0, [pc, #84]	@ (8000b58 <SPI2_GPIOInits+0x60>)
 8000b02:	f7ff fd8d 	bl	8000620 <GPIO_PeriClockControl>

    GPIO_Handle_t SPIPins;
    SPIPins.pGPIOx = GPIOB;
 8000b06:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <SPI2_GPIOInits+0x60>)
 8000b08:	607b      	str	r3, [r7, #4]
    SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	727b      	strb	r3, [r7, #9]
    SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;  // AF5 for SPI2
 8000b0e:	2305      	movs	r3, #5
 8000b10:	737b      	strb	r3, [r7, #13]
    SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000b12:	2300      	movs	r3, #0
 8000b14:	733b      	strb	r3, [r7, #12]
    SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000b16:	2300      	movs	r3, #0
 8000b18:	72fb      	strb	r3, [r7, #11]
    SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	72bb      	strb	r3, [r7, #10]

    // SCLK -> PB13
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000b1e:	230d      	movs	r3, #13
 8000b20:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fe49 	bl	80007bc <GPIO_Init>

    // MOSI -> PB15
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fe43 	bl	80007bc <GPIO_Init>

    // MISO -> PB14
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000b36:	230e      	movs	r3, #14
 8000b38:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fe3d 	bl	80007bc <GPIO_Init>

    // NSS -> PB12 (optional, not used in loopback)
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000b42:	230c      	movs	r3, #12
 8000b44:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fe37 	bl	80007bc <GPIO_Init>
}
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	48000400 	.word	0x48000400

08000b5c <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
    SPI2handle.pSPIx = SPI2;   //  use SPI2
 8000b60:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <SPI2_Inits+0x38>)
 8000b62:	4a0d      	ldr	r2, [pc, #52]	@ (8000b98 <SPI2_Inits+0x3c>)
 8000b64:	601a      	str	r2, [r3, #0]
    SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <SPI2_Inits+0x38>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	715a      	strb	r2, [r3, #5]
    SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <SPI2_Inits+0x38>)
 8000b6e:	2202      	movs	r2, #2
 8000b70:	719a      	strb	r2, [r3, #6]
    SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000b72:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <SPI2_Inits+0x38>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	721a      	strb	r2, [r3, #8]
    SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <SPI2_Inits+0x38>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	725a      	strb	r2, [r3, #9]
    SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN;   // Software slave select
 8000b7e:	4b05      	ldr	r3, [pc, #20]	@ (8000b94 <SPI2_Inits+0x38>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	729a      	strb	r2, [r3, #10]
    SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000b84:	4b03      	ldr	r3, [pc, #12]	@ (8000b94 <SPI2_Inits+0x38>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	711a      	strb	r2, [r3, #4]

    SPI_Init(&SPI2handle);
 8000b8a:	4802      	ldr	r0, [pc, #8]	@ (8000b94 <SPI2_Inits+0x38>)
 8000b8c:	f7ff fb56 	bl	800023c <SPI_Init>
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000020 	.word	0x20000020
 8000b98:	40003800 	.word	0x40003800

08000b9c <main>:

int main(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
    // Init SPI pins and peripheral
    SPI2_GPIOInits();
 8000ba0:	f7ff ffaa 	bl	8000af8 <SPI2_GPIOInits>
    SPI2_Inits();
 8000ba4:	f7ff ffda 	bl	8000b5c <SPI2_Inits>

    // Enable SPI interrupt in NVIC
    SPI_IRQ_interrupt_Config(IRQ_NO_SPI2, ENABLE);
 8000ba8:	2101      	movs	r1, #1
 8000baa:	2024      	movs	r0, #36	@ 0x24
 8000bac:	f7ff fc7e 	bl	80004ac <SPI_IRQ_interrupt_Config>
    SPI_IRQ_priority_Config(IRQ_NO_SPI2, 1);
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	2024      	movs	r0, #36	@ 0x24
 8000bb4:	f7ff fcd4 	bl	8000560 <SPI_IRQ_priority_Config>

    // Enable SPI
    SPI_PeripheralControl(SPI2, ENABLE);
 8000bb8:	2101      	movs	r1, #1
 8000bba:	480b      	ldr	r0, [pc, #44]	@ (8000be8 <main+0x4c>)
 8000bbc:	f7ff fbb5 	bl	800032a <SPI_PeripheralControl>

    // Start loopback test
    SPI_TransmitReceive_IT(&SPI2handle, tx_data, rx_data, sizeof(rx_data));
 8000bc0:	230a      	movs	r3, #10
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bec <main+0x50>)
 8000bc4:	490a      	ldr	r1, [pc, #40]	@ (8000bf0 <main+0x54>)
 8000bc6:	480b      	ldr	r0, [pc, #44]	@ (8000bf4 <main+0x58>)
 8000bc8:	f7ff fbcb 	bl	8000362 <SPI_TransmitReceive_IT>

    while (!(spi_tx_done || spi_rx_done));
 8000bcc:	bf00      	nop
 8000bce:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <main+0x5c>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d105      	bne.n	8000be4 <main+0x48>
 8000bd8:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <main+0x60>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d0f5      	beq.n	8000bce <main+0x32>
 8000be2:	e7ff      	b.n	8000be4 <main+0x48>

    // Now rx_data[] should contain same as tx_data[]
    while(1);
 8000be4:	e7fe      	b.n	8000be4 <main+0x48>
 8000be6:	bf00      	nop
 8000be8:	40003800 	.word	0x40003800
 8000bec:	20000040 	.word	0x20000040
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000020 	.word	0x20000020
 8000bf8:	2000004a 	.word	0x2000004a
 8000bfc:	2000004b 	.word	0x2000004b

08000c00 <SPI_ApplicationEventCallback>:
}

/* Application Callback */
void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle, uint8_t AppEv)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	70fb      	strb	r3, [r7, #3]
    if(AppEv == SPI_EVENT_TX_CMPLT)
 8000c0c:	78fb      	ldrb	r3, [r7, #3]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d103      	bne.n	8000c1a <SPI_ApplicationEventCallback+0x1a>
    {
        spi_tx_done = 1;
 8000c12:	4b0d      	ldr	r3, [pc, #52]	@ (8000c48 <SPI_ApplicationEventCallback+0x48>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	701a      	strb	r2, [r3, #0]
    else if (AppEv == SPI_EVENT_TXRX_CMPLT)
   {
	   spi_tx_done = 1;
	   spi_rx_done = 1;
   }
}
 8000c18:	e00f      	b.n	8000c3a <SPI_ApplicationEventCallback+0x3a>
    else if(AppEv == SPI_EVENT_RX_CMPLT)
 8000c1a:	78fb      	ldrb	r3, [r7, #3]
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d103      	bne.n	8000c28 <SPI_ApplicationEventCallback+0x28>
        spi_rx_done = 1;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	@ (8000c4c <SPI_ApplicationEventCallback+0x4c>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
}
 8000c26:	e008      	b.n	8000c3a <SPI_ApplicationEventCallback+0x3a>
    else if (AppEv == SPI_EVENT_TXRX_CMPLT)
 8000c28:	78fb      	ldrb	r3, [r7, #3]
 8000c2a:	2b03      	cmp	r3, #3
 8000c2c:	d105      	bne.n	8000c3a <SPI_ApplicationEventCallback+0x3a>
	   spi_tx_done = 1;
 8000c2e:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <SPI_ApplicationEventCallback+0x48>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	701a      	strb	r2, [r3, #0]
	   spi_rx_done = 1;
 8000c34:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <SPI_ApplicationEventCallback+0x4c>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	2000004a 	.word	0x2000004a
 8000c4c:	2000004b 	.word	0x2000004b

08000c50 <SPI2_IRQHandler>:

/* IRQ Handler */
void SPI2_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
    SPI_IRQHandling(&SPI2handle);
 8000c54:	4802      	ldr	r0, [pc, #8]	@ (8000c60 <SPI2_IRQHandler+0x10>)
 8000c56:	f7ff fcb1 	bl	80005bc <SPI_IRQHandling>
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000020 	.word	0x20000020

08000c64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c64:	480d      	ldr	r0, [pc, #52]	@ (8000c9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c66:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c68:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c6c:	480c      	ldr	r0, [pc, #48]	@ (8000ca0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c6e:	490d      	ldr	r1, [pc, #52]	@ (8000ca4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca8 <LoopForever+0xe>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c82:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c84:	4c0a      	ldr	r4, [pc, #40]	@ (8000cb0 <LoopForever+0x16>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000c92:	f000 f811 	bl	8000cb8 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000c96:	f7ff ff81 	bl	8000b9c <main>

08000c9a <LoopForever>:

LoopForever:
  b LoopForever
 8000c9a:	e7fe      	b.n	8000c9a <LoopForever>
  ldr   r0, =_estack
 8000c9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000ca8:	08000d20 	.word	0x08000d20
  ldr r2, =_sbss
 8000cac:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000cb0:	2000004c 	.word	0x2000004c

08000cb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC1_2_IRQHandler>
	...

08000cb8 <__libc_init_array>:
 8000cb8:	b570      	push	{r4, r5, r6, lr}
 8000cba:	4d0d      	ldr	r5, [pc, #52]	@ (8000cf0 <__libc_init_array+0x38>)
 8000cbc:	4c0d      	ldr	r4, [pc, #52]	@ (8000cf4 <__libc_init_array+0x3c>)
 8000cbe:	1b64      	subs	r4, r4, r5
 8000cc0:	10a4      	asrs	r4, r4, #2
 8000cc2:	2600      	movs	r6, #0
 8000cc4:	42a6      	cmp	r6, r4
 8000cc6:	d109      	bne.n	8000cdc <__libc_init_array+0x24>
 8000cc8:	4d0b      	ldr	r5, [pc, #44]	@ (8000cf8 <__libc_init_array+0x40>)
 8000cca:	4c0c      	ldr	r4, [pc, #48]	@ (8000cfc <__libc_init_array+0x44>)
 8000ccc:	f000 f818 	bl	8000d00 <_init>
 8000cd0:	1b64      	subs	r4, r4, r5
 8000cd2:	10a4      	asrs	r4, r4, #2
 8000cd4:	2600      	movs	r6, #0
 8000cd6:	42a6      	cmp	r6, r4
 8000cd8:	d105      	bne.n	8000ce6 <__libc_init_array+0x2e>
 8000cda:	bd70      	pop	{r4, r5, r6, pc}
 8000cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ce0:	4798      	blx	r3
 8000ce2:	3601      	adds	r6, #1
 8000ce4:	e7ee      	b.n	8000cc4 <__libc_init_array+0xc>
 8000ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cea:	4798      	blx	r3
 8000cec:	3601      	adds	r6, #1
 8000cee:	e7f2      	b.n	8000cd6 <__libc_init_array+0x1e>
 8000cf0:	08000d18 	.word	0x08000d18
 8000cf4:	08000d18 	.word	0x08000d18
 8000cf8:	08000d18 	.word	0x08000d18
 8000cfc:	08000d1c 	.word	0x08000d1c

08000d00 <_init>:
 8000d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d02:	bf00      	nop
 8000d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d06:	bc08      	pop	{r3}
 8000d08:	469e      	mov	lr, r3
 8000d0a:	4770      	bx	lr

08000d0c <_fini>:
 8000d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d0e:	bf00      	nop
 8000d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d12:	bc08      	pop	{r3}
 8000d14:	469e      	mov	lr, r3
 8000d16:	4770      	bx	lr
