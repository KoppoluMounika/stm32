
06_I2C_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ab4  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c40  08000c40  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c40  08000c40  00002008  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000c40  08000c40  00001c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000c48  08000c48  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c48  08000c48  00001c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000c4c  08000c4c  00001c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  08000c50  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00002008  2**0
                  CONTENTS
 10 .bss          00000048  20000008  20000008  00002008  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000050  20000050  00002008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY
 13 .debug_info   000015d1  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004fc  00000000  00000000  00003609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000160  00000000  00000000  00003b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000100  00000000  00000000  00003c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000025ce  00000000  00000000  00003d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001be2  00000000  00000000  00006336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a2ef  00000000  00000000  00007f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00012207  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004e0  00000000  00000000  0001224c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0001272c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000008 	.word	0x20000008
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08000c28 	.word	0x08000c28

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	08000c28 	.word	0x08000c28

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <GPIO_PeriClockControl>:
 *
 *  Created on: Oct 13, 2025
 *      Author: KOPPOLU MOUNIKA
 */
#include "stm32l4xx_gpio_driver.h"
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	460b      	mov	r3, r1
 80001e6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80001e8:	78fb      	ldrb	r3, [r7, #3]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d157      	bne.n	800029e <GPIO_PeriClockControl+0xc2>
		if(pGPIOx==GPIOA){
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80001f4:	d106      	bne.n	8000204 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80001f6:	4b58      	ldr	r3, [pc, #352]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80001f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001fa:	4a57      	ldr	r2, [pc, #348]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80001fc:	f043 0301 	orr.w	r3, r3, #1
 8000200:	64d3      	str	r3, [r2, #76]	@ 0x4c
		}
		else if(pGPIOx==GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 8000202:	e0a3      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOB){
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4a55      	ldr	r2, [pc, #340]	@ (800035c <GPIO_PeriClockControl+0x180>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d106      	bne.n	800021a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800020c:	4b52      	ldr	r3, [pc, #328]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800020e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000210:	4a51      	ldr	r2, [pc, #324]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000212:	f043 0302 	orr.w	r3, r3, #2
 8000216:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000218:	e098      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOC){
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4a50      	ldr	r2, [pc, #320]	@ (8000360 <GPIO_PeriClockControl+0x184>)
 800021e:	4293      	cmp	r3, r2
 8000220:	d106      	bne.n	8000230 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000222:	4b4d      	ldr	r3, [pc, #308]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000226:	4a4c      	ldr	r2, [pc, #304]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000228:	f043 0304 	orr.w	r3, r3, #4
 800022c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800022e:	e08d      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOD){
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4a4c      	ldr	r2, [pc, #304]	@ (8000364 <GPIO_PeriClockControl+0x188>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d106      	bne.n	8000246 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000238:	4b47      	ldr	r3, [pc, #284]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800023a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800023c:	4a46      	ldr	r2, [pc, #280]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800023e:	f043 0308 	orr.w	r3, r3, #8
 8000242:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000244:	e082      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOE){
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	4a47      	ldr	r2, [pc, #284]	@ (8000368 <GPIO_PeriClockControl+0x18c>)
 800024a:	4293      	cmp	r3, r2
 800024c:	d106      	bne.n	800025c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800024e:	4b42      	ldr	r3, [pc, #264]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000252:	4a41      	ldr	r2, [pc, #260]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000254:	f043 0310 	orr.w	r3, r3, #16
 8000258:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800025a:	e077      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOF){
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	4a43      	ldr	r2, [pc, #268]	@ (800036c <GPIO_PeriClockControl+0x190>)
 8000260:	4293      	cmp	r3, r2
 8000262:	d106      	bne.n	8000272 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000264:	4b3c      	ldr	r3, [pc, #240]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000268:	4a3b      	ldr	r2, [pc, #236]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800026a:	f043 0320 	orr.w	r3, r3, #32
 800026e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000270:	e06c      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOG){
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4a3e      	ldr	r2, [pc, #248]	@ (8000370 <GPIO_PeriClockControl+0x194>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d106      	bne.n	8000288 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800027a:	4b37      	ldr	r3, [pc, #220]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800027c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800027e:	4a36      	ldr	r2, [pc, #216]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000284:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000286:	e061      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOH){
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4a3a      	ldr	r2, [pc, #232]	@ (8000374 <GPIO_PeriClockControl+0x198>)
 800028c:	4293      	cmp	r3, r2
 800028e:	d15d      	bne.n	800034c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000290:	4b31      	ldr	r3, [pc, #196]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000294:	4a30      	ldr	r2, [pc, #192]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800029a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800029c:	e056      	b.n	800034c <GPIO_PeriClockControl+0x170>
		if(pGPIOx==GPIOA){
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80002a4:	d106      	bne.n	80002b4 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 80002a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002aa:	4a2b      	ldr	r2, [pc, #172]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002ac:	f023 0301 	bic.w	r3, r3, #1
 80002b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002b2:	e04b      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOB){
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4a29      	ldr	r2, [pc, #164]	@ (800035c <GPIO_PeriClockControl+0x180>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d106      	bne.n	80002ca <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80002bc:	4b26      	ldr	r3, [pc, #152]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002c0:	4a25      	ldr	r2, [pc, #148]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002c2:	f023 0302 	bic.w	r3, r3, #2
 80002c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002c8:	e040      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOC){
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4a24      	ldr	r2, [pc, #144]	@ (8000360 <GPIO_PeriClockControl+0x184>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d106      	bne.n	80002e0 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80002d2:	4b21      	ldr	r3, [pc, #132]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002d6:	4a20      	ldr	r2, [pc, #128]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002d8:	f023 0304 	bic.w	r3, r3, #4
 80002dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002de:	e035      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOD){
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4a20      	ldr	r2, [pc, #128]	@ (8000364 <GPIO_PeriClockControl+0x188>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d106      	bne.n	80002f6 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80002e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ec:	4a1a      	ldr	r2, [pc, #104]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 80002ee:	f023 0308 	bic.w	r3, r3, #8
 80002f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002f4:	e02a      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOE){
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000368 <GPIO_PeriClockControl+0x18c>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d106      	bne.n	800030c <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80002fe:	4b16      	ldr	r3, [pc, #88]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000302:	4a15      	ldr	r2, [pc, #84]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000304:	f023 0310 	bic.w	r3, r3, #16
 8000308:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800030a:	e01f      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOF){
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4a17      	ldr	r2, [pc, #92]	@ (800036c <GPIO_PeriClockControl+0x190>)
 8000310:	4293      	cmp	r3, r2
 8000312:	d106      	bne.n	8000322 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000314:	4b10      	ldr	r3, [pc, #64]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000318:	4a0f      	ldr	r2, [pc, #60]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800031a:	f023 0320 	bic.w	r3, r3, #32
 800031e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000320:	e014      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOG){
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4a12      	ldr	r2, [pc, #72]	@ (8000370 <GPIO_PeriClockControl+0x194>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d106      	bne.n	8000338 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 800032a:	4b0b      	ldr	r3, [pc, #44]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800032e:	4a0a      	ldr	r2, [pc, #40]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000330:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000334:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000336:	e009      	b.n	800034c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOH){
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a0e      	ldr	r2, [pc, #56]	@ (8000374 <GPIO_PeriClockControl+0x198>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d105      	bne.n	800034c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000340:	4b05      	ldr	r3, [pc, #20]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000344:	4a04      	ldr	r2, [pc, #16]	@ (8000358 <GPIO_PeriClockControl+0x17c>)
 8000346:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800034a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	40021000 	.word	0x40021000
 800035c:	48000400 	.word	0x48000400
 8000360:	48000800 	.word	0x48000800
 8000364:	48000c00 	.word	0x48000c00
 8000368:	48001000 	.word	0x48001000
 800036c:	48001400 	.word	0x48001400
 8000370:	48001800 	.word	0x48001800
 8000374:	48001c00 	.word	0x48001c00

08000378 <GPIO_Init>:
  * @param[in] pGPIOHandle - Handle structure that contains GPIO configuration information.
  * @return    - None
  * @note      - Make sure peripheral clock for GPIO is enabled before calling this function.
  */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000378:	b480      	push	{r7}
 800037a:	b087      	sub	sp, #28
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]

    // 1. Configure the mode of GPIO pin
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	795b      	ldrb	r3, [r3, #5]
 8000388:	2b03      	cmp	r3, #3
 800038a:	d822      	bhi.n	80003d2 <GPIO_Init+0x5a>
    {
        // non-interrupt mode
        temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	795b      	ldrb	r3, [r3, #5]
 8000390:	461a      	mov	r2, r3
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	791b      	ldrb	r3, [r3, #4]
 8000396:	005b      	lsls	r3, r3, #1
 8000398:	fa02 f303 	lsl.w	r3, r2, r3
 800039c:	617b      	str	r3, [r7, #20]
        pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	791b      	ldrb	r3, [r3, #4]
 80003a8:	005b      	lsls	r3, r3, #1
 80003aa:	2103      	movs	r1, #3
 80003ac:	fa01 f303 	lsl.w	r3, r1, r3
 80003b0:	43db      	mvns	r3, r3
 80003b2:	4619      	mov	r1, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	400a      	ands	r2, r1
 80003ba:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= temp;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	6819      	ldr	r1, [r3, #0]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	697a      	ldr	r2, [r7, #20]
 80003c8:	430a      	orrs	r2, r1
 80003ca:	601a      	str	r2, [r3, #0]
        temp = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
 80003d0:	e0cb      	b.n	800056a <GPIO_Init+0x1f2>
    }
    else
    {
        // interrupt mode
        if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	795b      	ldrb	r3, [r3, #5]
 80003d6:	2b04      	cmp	r3, #4
 80003d8:	d117      	bne.n	800040a <GPIO_Init+0x92>
        {
        	EXTI->FTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003da:	4b47      	ldr	r3, [pc, #284]	@ (80004f8 <GPIO_Init+0x180>)
 80003dc:	68db      	ldr	r3, [r3, #12]
 80003de:	687a      	ldr	r2, [r7, #4]
 80003e0:	7912      	ldrb	r2, [r2, #4]
 80003e2:	4611      	mov	r1, r2
 80003e4:	2201      	movs	r2, #1
 80003e6:	408a      	lsls	r2, r1
 80003e8:	4611      	mov	r1, r2
 80003ea:	4a43      	ldr	r2, [pc, #268]	@ (80004f8 <GPIO_Init+0x180>)
 80003ec:	430b      	orrs	r3, r1
 80003ee:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR1 &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003f0:	4b41      	ldr	r3, [pc, #260]	@ (80004f8 <GPIO_Init+0x180>)
 80003f2:	689b      	ldr	r3, [r3, #8]
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	7912      	ldrb	r2, [r2, #4]
 80003f8:	4611      	mov	r1, r2
 80003fa:	2201      	movs	r2, #1
 80003fc:	408a      	lsls	r2, r1
 80003fe:	43d2      	mvns	r2, r2
 8000400:	4611      	mov	r1, r2
 8000402:	4a3d      	ldr	r2, [pc, #244]	@ (80004f8 <GPIO_Init+0x180>)
 8000404:	400b      	ands	r3, r1
 8000406:	6093      	str	r3, [r2, #8]
 8000408:	e035      	b.n	8000476 <GPIO_Init+0xfe>

        }
        else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	795b      	ldrb	r3, [r3, #5]
 800040e:	2b05      	cmp	r3, #5
 8000410:	d117      	bne.n	8000442 <GPIO_Init+0xca>
        {
        	EXTI->RTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000412:	4b39      	ldr	r3, [pc, #228]	@ (80004f8 <GPIO_Init+0x180>)
 8000414:	689b      	ldr	r3, [r3, #8]
 8000416:	687a      	ldr	r2, [r7, #4]
 8000418:	7912      	ldrb	r2, [r2, #4]
 800041a:	4611      	mov	r1, r2
 800041c:	2201      	movs	r2, #1
 800041e:	408a      	lsls	r2, r1
 8000420:	4611      	mov	r1, r2
 8000422:	4a35      	ldr	r2, [pc, #212]	@ (80004f8 <GPIO_Init+0x180>)
 8000424:	430b      	orrs	r3, r1
 8000426:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR1 &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000428:	4b33      	ldr	r3, [pc, #204]	@ (80004f8 <GPIO_Init+0x180>)
 800042a:	68db      	ldr	r3, [r3, #12]
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	7912      	ldrb	r2, [r2, #4]
 8000430:	4611      	mov	r1, r2
 8000432:	2201      	movs	r2, #1
 8000434:	408a      	lsls	r2, r1
 8000436:	43d2      	mvns	r2, r2
 8000438:	4611      	mov	r1, r2
 800043a:	4a2f      	ldr	r2, [pc, #188]	@ (80004f8 <GPIO_Init+0x180>)
 800043c:	400b      	ands	r3, r1
 800043e:	60d3      	str	r3, [r2, #12]
 8000440:	e019      	b.n	8000476 <GPIO_Init+0xfe>
        }
        else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	795b      	ldrb	r3, [r3, #5]
 8000446:	2b06      	cmp	r3, #6
 8000448:	d115      	bne.n	8000476 <GPIO_Init+0xfe>
        {
        	EXTI->FTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800044a:	4b2b      	ldr	r3, [pc, #172]	@ (80004f8 <GPIO_Init+0x180>)
 800044c:	68db      	ldr	r3, [r3, #12]
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	7912      	ldrb	r2, [r2, #4]
 8000452:	4611      	mov	r1, r2
 8000454:	2201      	movs	r2, #1
 8000456:	408a      	lsls	r2, r1
 8000458:	4611      	mov	r1, r2
 800045a:	4a27      	ldr	r2, [pc, #156]	@ (80004f8 <GPIO_Init+0x180>)
 800045c:	430b      	orrs	r3, r1
 800045e:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000460:	4b25      	ldr	r3, [pc, #148]	@ (80004f8 <GPIO_Init+0x180>)
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	7912      	ldrb	r2, [r2, #4]
 8000468:	4611      	mov	r1, r2
 800046a:	2201      	movs	r2, #1
 800046c:	408a      	lsls	r2, r1
 800046e:	4611      	mov	r1, r2
 8000470:	4a21      	ldr	r2, [pc, #132]	@ (80004f8 <GPIO_Init+0x180>)
 8000472:	430b      	orrs	r3, r1
 8000474:	6093      	str	r3, [r2, #8]
        }
        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	791b      	ldrb	r3, [r3, #4]
 800047a:	089b      	lsrs	r3, r3, #2
 800047c:	74fb      	strb	r3, [r7, #19]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	791b      	ldrb	r3, [r3, #4]
 8000482:	f003 0303 	and.w	r3, r3, #3
 8000486:	74bb      	strb	r3, [r7, #18]
        uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000490:	d042      	beq.n	8000518 <GPIO_Init+0x1a0>
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a19      	ldr	r2, [pc, #100]	@ (80004fc <GPIO_Init+0x184>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d02b      	beq.n	80004f4 <GPIO_Init+0x17c>
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a17      	ldr	r2, [pc, #92]	@ (8000500 <GPIO_Init+0x188>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d024      	beq.n	80004f0 <GPIO_Init+0x178>
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a16      	ldr	r2, [pc, #88]	@ (8000504 <GPIO_Init+0x18c>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d01d      	beq.n	80004ec <GPIO_Init+0x174>
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a14      	ldr	r2, [pc, #80]	@ (8000508 <GPIO_Init+0x190>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d016      	beq.n	80004e8 <GPIO_Init+0x170>
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a13      	ldr	r2, [pc, #76]	@ (800050c <GPIO_Init+0x194>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d00f      	beq.n	80004e4 <GPIO_Init+0x16c>
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a11      	ldr	r2, [pc, #68]	@ (8000510 <GPIO_Init+0x198>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d008      	beq.n	80004e0 <GPIO_Init+0x168>
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a10      	ldr	r2, [pc, #64]	@ (8000514 <GPIO_Init+0x19c>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d101      	bne.n	80004dc <GPIO_Init+0x164>
 80004d8:	2307      	movs	r3, #7
 80004da:	e01e      	b.n	800051a <GPIO_Init+0x1a2>
 80004dc:	2300      	movs	r3, #0
 80004de:	e01c      	b.n	800051a <GPIO_Init+0x1a2>
 80004e0:	2306      	movs	r3, #6
 80004e2:	e01a      	b.n	800051a <GPIO_Init+0x1a2>
 80004e4:	2305      	movs	r3, #5
 80004e6:	e018      	b.n	800051a <GPIO_Init+0x1a2>
 80004e8:	2304      	movs	r3, #4
 80004ea:	e016      	b.n	800051a <GPIO_Init+0x1a2>
 80004ec:	2303      	movs	r3, #3
 80004ee:	e014      	b.n	800051a <GPIO_Init+0x1a2>
 80004f0:	2302      	movs	r3, #2
 80004f2:	e012      	b.n	800051a <GPIO_Init+0x1a2>
 80004f4:	2301      	movs	r3, #1
 80004f6:	e010      	b.n	800051a <GPIO_Init+0x1a2>
 80004f8:	40010400 	.word	0x40010400
 80004fc:	48000400 	.word	0x48000400
 8000500:	48000800 	.word	0x48000800
 8000504:	48000c00 	.word	0x48000c00
 8000508:	48001000 	.word	0x48001000
 800050c:	48001400 	.word	0x48001400
 8000510:	48001800 	.word	0x48001800
 8000514:	48001c00 	.word	0x48001c00
 8000518:	2300      	movs	r3, #0
 800051a:	747b      	strb	r3, [r7, #17]
        SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2 * 4));
 800051c:	4a63      	ldr	r2, [pc, #396]	@ (80006ac <GPIO_Init+0x334>)
 800051e:	7cfb      	ldrb	r3, [r7, #19]
 8000520:	3302      	adds	r3, #2
 8000522:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000526:	7cbb      	ldrb	r3, [r7, #18]
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	210f      	movs	r1, #15
 800052c:	fa01 f303 	lsl.w	r3, r1, r3
 8000530:	43db      	mvns	r3, r3
 8000532:	4618      	mov	r0, r3
 8000534:	495d      	ldr	r1, [pc, #372]	@ (80006ac <GPIO_Init+0x334>)
 8000536:	7cfb      	ldrb	r3, [r7, #19]
 8000538:	4002      	ands	r2, r0
 800053a:	3302      	adds	r3, #2
 800053c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        SYSCFG -> EXTICR[temp1] = portcode << (temp2 * 4);
 8000540:	7c7a      	ldrb	r2, [r7, #17]
 8000542:	7cbb      	ldrb	r3, [r7, #18]
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	fa02 f103 	lsl.w	r1, r2, r3
 800054a:	4a58      	ldr	r2, [pc, #352]	@ (80006ac <GPIO_Init+0x334>)
 800054c:	7cfb      	ldrb	r3, [r7, #19]
 800054e:	3302      	adds	r3, #2
 8000550:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        EXTI -> IMR1 |= 1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000554:	4b56      	ldr	r3, [pc, #344]	@ (80006b0 <GPIO_Init+0x338>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	7912      	ldrb	r2, [r2, #4]
 800055c:	4611      	mov	r1, r2
 800055e:	2201      	movs	r2, #1
 8000560:	408a      	lsls	r2, r1
 8000562:	4611      	mov	r1, r2
 8000564:	4a52      	ldr	r2, [pc, #328]	@ (80006b0 <GPIO_Init+0x338>)
 8000566:	430b      	orrs	r3, r1
 8000568:	6013      	str	r3, [r2, #0]
    }

    // 2. Configure speed
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	799b      	ldrb	r3, [r3, #6]
 800056e:	461a      	mov	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	791b      	ldrb	r3, [r3, #4]
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	fa02 f303 	lsl.w	r3, r2, r3
 800057a:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	689a      	ldr	r2, [r3, #8]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	791b      	ldrb	r3, [r3, #4]
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	2103      	movs	r1, #3
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	43db      	mvns	r3, r3
 8000590:	4619      	mov	r1, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	400a      	ands	r2, r1
 8000598:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	6899      	ldr	r1, [r3, #8]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	697a      	ldr	r2, [r7, #20]
 80005a6:	430a      	orrs	r2, r1
 80005a8:	609a      	str	r2, [r3, #8]
    temp = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]

    // 3. Configure pull-up/pull-down
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	79db      	ldrb	r3, [r3, #7]
 80005b2:	461a      	mov	r2, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	791b      	ldrb	r3, [r3, #4]
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	fa02 f303 	lsl.w	r3, r2, r3
 80005be:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	68da      	ldr	r2, [r3, #12]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	791b      	ldrb	r3, [r3, #4]
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	2103      	movs	r1, #3
 80005ce:	fa01 f303 	lsl.w	r3, r1, r3
 80005d2:	43db      	mvns	r3, r3
 80005d4:	4619      	mov	r1, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	400a      	ands	r2, r1
 80005dc:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	68d9      	ldr	r1, [r3, #12]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	697a      	ldr	r2, [r7, #20]
 80005ea:	430a      	orrs	r2, r1
 80005ec:	60da      	str	r2, [r3, #12]
    temp = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]

    // 4. Configure output type
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7a1b      	ldrb	r3, [r3, #8]
 80005f6:	461a      	mov	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	791b      	ldrb	r3, [r3, #4]
 80005fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000600:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	685a      	ldr	r2, [r3, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	791b      	ldrb	r3, [r3, #4]
 800060c:	4619      	mov	r1, r3
 800060e:	2301      	movs	r3, #1
 8000610:	408b      	lsls	r3, r1
 8000612:	43db      	mvns	r3, r3
 8000614:	4619      	mov	r1, r3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	400a      	ands	r2, r1
 800061c:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	6859      	ldr	r1, [r3, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	697a      	ldr	r2, [r7, #20]
 800062a:	430a      	orrs	r2, r1
 800062c:	605a      	str	r2, [r3, #4]
    temp = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]

    // 5. Configure alternate function if needed
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	795b      	ldrb	r3, [r3, #5]
 8000636:	2b02      	cmp	r3, #2
 8000638:	d131      	bne.n	800069e <GPIO_Init+0x326>
    {
        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;  // AFR[0] or AFR[1]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	791b      	ldrb	r3, [r3, #4]
 800063e:	08db      	lsrs	r3, r3, #3
 8000640:	743b      	strb	r3, [r7, #16]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;  // Position within register
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	791b      	ldrb	r3, [r3, #4]
 8000646:	f003 0307 	and.w	r3, r3, #7
 800064a:	73fb      	strb	r3, [r7, #15]

        pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	7c3a      	ldrb	r2, [r7, #16]
 8000652:	3208      	adds	r2, #8
 8000654:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	220f      	movs	r2, #15
 800065e:	fa02 f303 	lsl.w	r3, r2, r3
 8000662:	43db      	mvns	r3, r3
 8000664:	4618      	mov	r0, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	7c3a      	ldrb	r2, [r7, #16]
 800066c:	4001      	ands	r1, r0
 800066e:	3208      	adds	r2, #8
 8000670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	7c3a      	ldrb	r2, [r7, #16]
 800067a:	3208      	adds	r2, #8
 800067c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	7a5b      	ldrb	r3, [r3, #9]
 8000684:	461a      	mov	r2, r3
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	4618      	mov	r0, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	7c3a      	ldrb	r2, [r7, #16]
 8000696:	4301      	orrs	r1, r0
 8000698:	3208      	adds	r2, #8
 800069a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 800069e:	bf00      	nop
 80006a0:	371c      	adds	r7, #28
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40010000 	.word	0x40010000
 80006b0:	40010400 	.word	0x40010400

080006b4 <I2C_PclkControl>:

#include"stm32l4xx_i2c_driver.h"
#include"stm32l4xx.h"

void I2C_PclkControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	460b      	mov	r3, r1
 80006be:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 80006c0:	78fb      	ldrb	r3, [r7, #3]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d11f      	bne.n	8000706 <I2C_PclkControl+0x52>
    {
        if(pI2Cx == I2C1)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a12      	ldr	r2, [pc, #72]	@ (8000714 <I2C_PclkControl+0x60>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d106      	bne.n	80006dc <I2C_PclkControl+0x28>
        {
            I2C1_PCLK_EN();
 80006ce:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <I2C_PclkControl+0x64>)
 80006d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006d2:	4a11      	ldr	r2, [pc, #68]	@ (8000718 <I2C_PclkControl+0x64>)
 80006d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
    else
    {

    }
}
 80006da:	e014      	b.n	8000706 <I2C_PclkControl+0x52>
        else if(pI2Cx == I2C2)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a0f      	ldr	r2, [pc, #60]	@ (800071c <I2C_PclkControl+0x68>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d106      	bne.n	80006f2 <I2C_PclkControl+0x3e>
            I2C2_PCLK_EN();
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <I2C_PclkControl+0x64>)
 80006e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000718 <I2C_PclkControl+0x64>)
 80006ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006ee:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80006f0:	e009      	b.n	8000706 <I2C_PclkControl+0x52>
        else if(pI2Cx == I2C3)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000720 <I2C_PclkControl+0x6c>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d105      	bne.n	8000706 <I2C_PclkControl+0x52>
            I2C3_PCLK_EN();
 80006fa:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <I2C_PclkControl+0x64>)
 80006fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006fe:	4a06      	ldr	r2, [pc, #24]	@ (8000718 <I2C_PclkControl+0x64>)
 8000700:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000704:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40005400 	.word	0x40005400
 8000718:	40021000 	.word	0x40021000
 800071c:	40005800 	.word	0x40005800
 8000720:	40005c00 	.word	0x40005c00

08000724 <I2C_Init>:
/*
 * I2C Init & Deinit
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	//enable pclk clock for spi
	I2C_PclkControl(pI2CHandle->pI2Cx,ENABLE);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2101      	movs	r1, #1
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ffbe 	bl	80006b4 <I2C_PclkControl>

	//disable the peripheral before configuring
	I2C_PeripheralControl(pI2CHandle->pI2Cx,DISABLE);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f943 	bl	80009ca <I2C_PeripheralControl>

	//configure timing register
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_SM) {
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	4a22      	ldr	r2, [pc, #136]	@ (80007d4 <I2C_Init+0xb0>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d104      	bne.n	8000758 <I2C_Init+0x34>
		pI2CHandle->pI2Cx->TIMINGR = 0x10420A28; // Standard mode
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a21      	ldr	r2, [pc, #132]	@ (80007d8 <I2C_Init+0xb4>)
 8000754:	611a      	str	r2, [r3, #16]
 8000756:	e003      	b.n	8000760 <I2C_Init+0x3c>
	} else {
		pI2CHandle->pI2Cx->TIMINGR = 0x00B1112E; // Fast mode (example value)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a1f      	ldr	r2, [pc, #124]	@ (80007dc <I2C_Init+0xb8>)
 800075e:	611a      	str	r2, [r3, #16]
	}
	//configure own address

	pI2CHandle->pI2Cx->OAR1 &= ~(1<<I2c_OAR1_OA1EN);//disable EN bit first
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	689a      	ldr	r2, [r3, #8]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800076e:	609a      	str	r2, [r3, #8]
	pI2CHandle->pI2Cx->OAR1 |= (0<<10) | (pI2CHandle->I2C_Config.I2C_DeviceAddress<<1);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	6899      	ldr	r1, [r3, #8]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7a1b      	ldrb	r3, [r3, #8]
 800077a:	005a      	lsls	r2, r3, #1
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	430a      	orrs	r2, r1
 8000782:	609a      	str	r2, [r3, #8]
	pI2CHandle->pI2Cx->OAR1 |= (1<<I2c_OAR1_OA1EN);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	689a      	ldr	r2, [r3, #8]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000792:	609a      	str	r2, [r3, #8]

	//enable ACK will be used only for slave mode
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	7a5b      	ldrb	r3, [r3, #9]
 8000798:	2b01      	cmp	r3, #1
 800079a:	d108      	bne.n	80007ae <I2C_Init+0x8a>
	    pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_NACK);  // clear NACK -> allow ACK
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	685a      	ldr	r2, [r3, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	e007      	b.n	80007be <I2C_Init+0x9a>
	else
	    pI2CHandle->pI2Cx->CR2 |=  (1 << I2C_CR2_NACK);  // set NACK -> disable ACK
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	685a      	ldr	r2, [r3, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80007bc:	605a      	str	r2, [r3, #4]

	//enable the peripheral
	I2C_PeripheralControl(pI2CHandle->pI2Cx, ENABLE);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2101      	movs	r1, #1
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 f900 	bl	80009ca <I2C_PeripheralControl>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	000186a0 	.word	0x000186a0
 80007d8:	10420a28 	.word	0x10420a28
 80007dc:	00b1112e 	.word	0x00b1112e

080007e0 <I2C_GenerateStart>:
		I2C3_REG_RESET();
	}
}

void I2C_GenerateStart(I2C_RegDef_t  *pI2Cx)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	pI2Cx->CR2 |= 1<<I2C_CR2_START;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	605a      	str	r2, [r3, #4]
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <I2C_MasterSendData>:
}
/*
 * Data Send and Receive
 */
uint32_t I2C_MasterSendData(I2C_RegDef_t *pI2Cx, uint8_t *pTxBuffer, uint32_t len, uint8_t SlaveAddr)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	70fb      	strb	r3, [r7, #3]
    // 1. Wait until bus is not busy
    uint32_t timeout = 100000;
 800080e:	4b42      	ldr	r3, [pc, #264]	@ (8000918 <I2C_MasterSendData+0x118>)
 8000810:	617b      	str	r3, [r7, #20]
    while(I2C_GetFlagStatus(pI2Cx,I2C_ISR_BUSY));
 8000812:	bf00      	nop
 8000814:	210f      	movs	r1, #15
 8000816:	68f8      	ldr	r0, [r7, #12]
 8000818:	f000 f8f3 	bl	8000a02 <I2C_GetFlagStatus>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d1f8      	bne.n	8000814 <I2C_MasterSendData+0x14>
    // 2. Clear control register and configure transfer
    pI2Cx->CR2 = 0;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	2200      	movs	r2, #0
 8000826:	605a      	str	r2, [r3, #4]
    pI2Cx->CR2 |= (SlaveAddr << 1);          // Set slave address
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	685a      	ldr	r2, [r3, #4]
 800082c:	78fb      	ldrb	r3, [r7, #3]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	431a      	orrs	r2, r3
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	605a      	str	r2, [r3, #4]
    pI2Cx->CR2 |= (len << 16); // Number of bytes
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	041b      	lsls	r3, r3, #16
 800083e:	431a      	orrs	r2, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	605a      	str	r2, [r3, #4]
    pI2Cx->CR2 &= ~(1<<I2C_CR2_RD_WRN);           // Write mode
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	605a      	str	r2, [r3, #4]
	pI2Cx->CR2 |= (1<<I2C_CR2_AUTOEND);
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	605a      	str	r2, [r3, #4]

    I2C_GenerateStart(pI2Cx);         // Generate start
 800085c:	68f8      	ldr	r0, [r7, #12]
 800085e:	f7ff ffbf 	bl	80007e0 <I2C_GenerateStart>

    // 3. Transmit data
    for(uint32_t i = 0; i < len; i++) {
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	e01c      	b.n	80008a2 <I2C_MasterSendData+0xa2>
        timeout = 100000;
 8000868:	4b2b      	ldr	r3, [pc, #172]	@ (8000918 <I2C_MasterSendData+0x118>)
 800086a:	617b      	str	r3, [r7, #20]
        while(!(pI2Cx->ISR & I2C_ISR_TXIS) && timeout--) {
 800086c:	e004      	b.n	8000878 <I2C_MasterSendData+0x78>
            if(timeout == 0) return 1; // Timeout error
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d101      	bne.n	8000878 <I2C_MasterSendData+0x78>
 8000874:	2301      	movs	r3, #1
 8000876:	e04b      	b.n	8000910 <I2C_MasterSendData+0x110>
        while(!(pI2Cx->ISR & I2C_ISR_TXIS) && timeout--) {
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	2b00      	cmp	r3, #0
 8000882:	d104      	bne.n	800088e <I2C_MasterSendData+0x8e>
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	1e5a      	subs	r2, r3, #1
 8000888:	617a      	str	r2, [r7, #20]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1ef      	bne.n	800086e <I2C_MasterSendData+0x6e>
        }
        pI2Cx->TXDR = pTxBuffer[i];
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	4413      	add	r3, r2
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	461a      	mov	r2, r3
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	629a      	str	r2, [r3, #40]	@ 0x28
    for(uint32_t i = 0; i < len; i++) {
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	3301      	adds	r3, #1
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d3de      	bcc.n	8000868 <I2C_MasterSendData+0x68>
    }

    // 4. Wait for transfer complete
    timeout = 100000;
 80008aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000918 <I2C_MasterSendData+0x118>)
 80008ac:	617b      	str	r3, [r7, #20]
    while(!(pI2Cx->ISR & I2C_ISR_TC) && timeout--) {
 80008ae:	e004      	b.n	80008ba <I2C_MasterSendData+0xba>
        if(timeout == 0) return 1; // Timeout error
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d101      	bne.n	80008ba <I2C_MasterSendData+0xba>
 80008b6:	2301      	movs	r3, #1
 80008b8:	e02a      	b.n	8000910 <I2C_MasterSendData+0x110>
    while(!(pI2Cx->ISR & I2C_ISR_TC) && timeout--) {
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	f003 0306 	and.w	r3, r3, #6
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d104      	bne.n	80008d0 <I2C_MasterSendData+0xd0>
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	1e5a      	subs	r2, r3, #1
 80008ca:	617a      	str	r2, [r7, #20]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d1ef      	bne.n	80008b0 <I2C_MasterSendData+0xb0>
    }

    // 5. Generate stop condition
    pI2Cx->CR2 |= (1<<I2C_CR2_STOP);
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	605a      	str	r2, [r3, #4]

    // 6. Wait for stop flag and clear it
    timeout = 100000;
 80008dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <I2C_MasterSendData+0x118>)
 80008de:	617b      	str	r3, [r7, #20]
    while(!(pI2Cx->ISR & I2C_ISR_STOPF) && timeout--) {
 80008e0:	e004      	b.n	80008ec <I2C_MasterSendData+0xec>
        if(timeout == 0) return 1; // Timeout error
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d101      	bne.n	80008ec <I2C_MasterSendData+0xec>
 80008e8:	2301      	movs	r3, #1
 80008ea:	e011      	b.n	8000910 <I2C_MasterSendData+0x110>
    while(!(pI2Cx->ISR & I2C_ISR_STOPF) && timeout--) {
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f003 0305 	and.w	r3, r3, #5
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d104      	bne.n	8000902 <I2C_MasterSendData+0x102>
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	1e5a      	subs	r2, r3, #1
 80008fc:	617a      	str	r2, [r7, #20]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d1ef      	bne.n	80008e2 <I2C_MasterSendData+0xe2>
    }
    pI2Cx->ICR |= (1<<I2C_ICR_STOPCF);
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	f043 0220 	orr.w	r2, r3, #32
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	61da      	str	r2, [r3, #28]
    return 0;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	000186a0 	.word	0x000186a0

0800091c <I2C_MasterReceiveData>:
void I2C_MasterReceiveData(I2C_RegDef_t *pI2Cx, uint8_t *pRxBuffer, uint32_t len,uint8_t SlaveAddr)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
 8000928:	70fb      	strb	r3, [r7, #3]
	//wait until bus is free
	while(I2C_GetFlagStatus(pI2Cx, I2C_FLAG_BUSY));
 800092a:	bf00      	nop
 800092c:	210f      	movs	r1, #15
 800092e:	68f8      	ldr	r0, [r7, #12]
 8000930:	f000 f867 	bl	8000a02 <I2C_GetFlagStatus>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1f8      	bne.n	800092c <I2C_MasterReceiveData+0x10>

	//configure CR2 with slave address
	pI2Cx->CR2 = 0;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	2200      	movs	r2, #0
 800093e:	605a      	str	r2, [r3, #4]

	pI2Cx->CR2 |= (SlaveAddr<<1);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	685a      	ldr	r2, [r3, #4]
 8000944:	78fb      	ldrb	r3, [r7, #3]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	431a      	orrs	r2, r3
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	605a      	str	r2, [r3, #4]
	pI2Cx->CR2 |= (len<<16);
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	685a      	ldr	r2, [r3, #4]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	041b      	lsls	r3, r3, #16
 8000956:	431a      	orrs	r2, r3
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	605a      	str	r2, [r3, #4]
	pI2Cx->CR2 |= (1<<I2C_CR2_RD_WRN);     // Set read mode
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	605a      	str	r2, [r3, #4]
	pI2Cx->CR2 |= (1<<I2C_CR2_AUTOEND);
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	605a      	str	r2, [r3, #4]
	I2C_GenerateStart(pI2Cx);
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f7ff ff33 	bl	80007e0 <I2C_GenerateStart>


	while(len > 0)
 800097a:	e011      	b.n	80009a0 <I2C_MasterReceiveData+0x84>
	{
		while(!(I2C_GetFlagStatus(pI2Cx,I2C_FLAG_RXNE)));
 800097c:	bf00      	nop
 800097e:	2102      	movs	r1, #2
 8000980:	68f8      	ldr	r0, [r7, #12]
 8000982:	f000 f83e 	bl	8000a02 <I2C_GetFlagStatus>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d0f8      	beq.n	800097e <I2C_MasterReceiveData+0x62>
		*pRxBuffer++=pI2Cx->RXDR;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	60ba      	str	r2, [r7, #8]
 8000996:	b2ca      	uxtb	r2, r1
 8000998:	701a      	strb	r2, [r3, #0]
		len--;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3b01      	subs	r3, #1
 800099e:	607b      	str	r3, [r7, #4]
	while(len > 0)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d1ea      	bne.n	800097c <I2C_MasterReceiveData+0x60>
	}
	while(!(I2C_GetFlagStatus(pI2Cx, I2C_FLAG_STOPF)));
 80009a6:	bf00      	nop
 80009a8:	2105      	movs	r1, #5
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f000 f829 	bl	8000a02 <I2C_GetFlagStatus>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d0f8      	beq.n	80009a8 <I2C_MasterReceiveData+0x8c>
	pI2Cx->ICR |= I2C_ICR_STOPCF;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	f043 0205 	orr.w	r2, r3, #5
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	61da      	str	r2, [r3, #28]
}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <I2C_PeripheralControl>:
}
/*
 * Other Peripheral Control API's
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 80009ca:	b480      	push	{r7}
 80009cc:	b083      	sub	sp, #12
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
 80009d2:	460b      	mov	r3, r1
 80009d4:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80009d6:	78fb      	ldrb	r3, [r7, #3]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d106      	bne.n	80009ea <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1<<I2C_CR1_PE);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f043 0201 	orr.w	r2, r3, #1
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	601a      	str	r2, [r3, #0]
	else
		pI2Cx->CR1 &= ~(1<<I2C_CR1_PE);
}
 80009e8:	e005      	b.n	80009f6 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1<<I2C_CR1_PE);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f023 0201 	bic.w	r2, r3, #1
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	601a      	str	r2, [r3, #0]
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <I2C_GetFlagStatus>:

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	6039      	str	r1, [r7, #0]
	if((pI2Cx->ISR >> FlagName)&1)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	699a      	ldr	r2, [r3, #24]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	fa22 f303 	lsr.w	r3, r2, r3
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <I2C_GetFlagStatus+0x20>
	{
		return SET;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e000      	b.n	8000a24 <I2C_GetFlagStatus+0x22>
	}
	return RESET;
 8000a22:	2300      	movs	r3, #0
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <delay>:

I2C_Handle_t i2c1;
#define SLAVE_ADDR	0x55

void delay(uint32_t n)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0; i<n;i++)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	e00c      	b.n	8000a58 <delay+0x28>
		for(j=0;j<1000;j++);
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	e002      	b.n	8000a4a <delay+0x1a>
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	3301      	adds	r3, #1
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a50:	d3f8      	bcc.n	8000a44 <delay+0x14>
	for(i=0; i<n;i++)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	3301      	adds	r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d3ee      	bcc.n	8000a3e <delay+0xe>
}
 8000a60:	bf00      	nop
 8000a62:	bf00      	nop
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
	...

08000a70 <I2C1_GPIOInits>:

void I2C1_GPIOInits(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
	GPIO_PeriClockControl(GPIOB, ENABLE);
 8000a76:	2101      	movs	r1, #1
 8000a78:	480f      	ldr	r0, [pc, #60]	@ (8000ab8 <I2C1_GPIOInits+0x48>)
 8000a7a:	f7ff fbaf 	bl	80001dc <GPIO_PeriClockControl>

	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab8 <I2C1_GPIOInits+0x48>)
 8000a80:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000a82:	2302      	movs	r3, #2
 8000a84:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000a86:	2304      	movs	r3, #4
 8000a88:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 8000a92:	2302      	movs	r3, #2
 8000a94:	72bb      	strb	r3, [r7, #10]

	//I2C_CLK
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 8000a96:	2308      	movs	r3, #8
 8000a98:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fc6b 	bl	8000378 <GPIO_Init>

	//I2C_SDA
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 8000aa2:	2309      	movs	r3, #9
 8000aa4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fc65 	bl	8000378 <GPIO_Init>
}
 8000aae:	bf00      	nop
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	48000400 	.word	0x48000400

08000abc <btn_init>:
void btn_init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
	GPIO_Handle_t pGPIOBtn;

	GPIO_PeriClockControl(GPIOC, ENABLE);
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	480a      	ldr	r0, [pc, #40]	@ (8000af0 <btn_init+0x34>)
 8000ac6:	f7ff fb89 	bl	80001dc <GPIO_PeriClockControl>


	pGPIOBtn.pGPIOx = GPIOC;
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <btn_init+0x34>)
 8000acc:	607b      	str	r3, [r7, #4]
	pGPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000ace:	230d      	movs	r3, #13
 8000ad0:	723b      	strb	r3, [r7, #8]
	pGPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	727b      	strb	r3, [r7, #9]
	pGPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	72bb      	strb	r3, [r7, #10]
	pGPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000ada:	2300      	movs	r3, #0
 8000adc:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&pGPIOBtn);
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fc49 	bl	8000378 <GPIO_Init>
}
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	48000800 	.word	0x48000800

08000af4 <I2C1_Inits>:
void I2C1_Inits(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	i2c1.pI2Cx = I2C1;
 8000af8:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <I2C1_Inits+0x1c>)
 8000afa:	4a06      	ldr	r2, [pc, #24]	@ (8000b14 <I2C1_Inits+0x20>)
 8000afc:	601a      	str	r2, [r3, #0]
	i2c1.I2C_Config.I2C_DeviceAddress = 0x60;
 8000afe:	4b04      	ldr	r3, [pc, #16]	@ (8000b10 <I2C1_Inits+0x1c>)
 8000b00:	2260      	movs	r2, #96	@ 0x60
 8000b02:	721a      	strb	r2, [r3, #8]

	I2C_Init(&i2c1);
 8000b04:	4802      	ldr	r0, [pc, #8]	@ (8000b10 <I2C1_Inits+0x1c>)
 8000b06:	f7ff fe0d 	bl	8000724 <I2C_Init>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000024 	.word	0x20000024
 8000b14:	40005400 	.word	0x40005400

08000b18 <main>:
uint8_t buffer[] = "Hello";
uint8_t rx_buffer[20];
uint32_t scl;
uint32_t sda;
int main(void)
{
 8000b18:	b598      	push	{r3, r4, r7, lr}
 8000b1a:	af00      	add	r7, sp, #0

    I2C1_GPIOInits();
 8000b1c:	f7ff ffa8 	bl	8000a70 <I2C1_GPIOInits>
    I2C1_Inits();
 8000b20:	f7ff ffe8 	bl	8000af4 <I2C1_Inits>
    btn_init();
 8000b24:	f7ff ffca 	bl	8000abc <btn_init>
    scl = (GPIOB->IDR >> 8) & 1;
 8000b28:	4b13      	ldr	r3, [pc, #76]	@ (8000b78 <main+0x60>)
 8000b2a:	691b      	ldr	r3, [r3, #16]
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	4a12      	ldr	r2, [pc, #72]	@ (8000b7c <main+0x64>)
 8000b34:	6013      	str	r3, [r2, #0]
    sda = (GPIOB->IDR >> 9) & 1;
 8000b36:	4b10      	ldr	r3, [pc, #64]	@ (8000b78 <main+0x60>)
 8000b38:	691b      	ldr	r3, [r3, #16]
 8000b3a:	0a5b      	lsrs	r3, r3, #9
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	4a0f      	ldr	r2, [pc, #60]	@ (8000b80 <main+0x68>)
 8000b42:	6013      	str	r3, [r2, #0]
    	//Waits until button is pressed
    	//while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) == SET);

    	//delay(100);

    	I2C_MasterSendData(i2c1.pI2Cx, buffer, strlen((char*)buffer), SLAVE_ADDR);
 8000b44:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <main+0x6c>)
 8000b46:	681c      	ldr	r4, [r3, #0]
 8000b48:	480f      	ldr	r0, [pc, #60]	@ (8000b88 <main+0x70>)
 8000b4a:	f7ff fb3f 	bl	80001cc <strlen>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	2355      	movs	r3, #85	@ 0x55
 8000b52:	490d      	ldr	r1, [pc, #52]	@ (8000b88 <main+0x70>)
 8000b54:	4620      	mov	r0, r4
 8000b56:	f7ff fe53 	bl	8000800 <I2C_MasterSendData>
    	delay(100);
 8000b5a:	2064      	movs	r0, #100	@ 0x64
 8000b5c:	f7ff ff68 	bl	8000a30 <delay>
    	I2C_MasterReceiveData(i2c1.pI2Cx,buffer,sizeof(rx_buffer),SLAVE_ADDR);
 8000b60:	4b08      	ldr	r3, [pc, #32]	@ (8000b84 <main+0x6c>)
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	2355      	movs	r3, #85	@ 0x55
 8000b66:	2214      	movs	r2, #20
 8000b68:	4907      	ldr	r1, [pc, #28]	@ (8000b88 <main+0x70>)
 8000b6a:	f7ff fed7 	bl	800091c <I2C_MasterReceiveData>
    	delay(100);
 8000b6e:	2064      	movs	r0, #100	@ 0x64
 8000b70:	f7ff ff5e 	bl	8000a30 <delay>
    	I2C_MasterSendData(i2c1.pI2Cx, buffer, strlen((char*)buffer), SLAVE_ADDR);
 8000b74:	bf00      	nop
 8000b76:	e7e5      	b.n	8000b44 <main+0x2c>
 8000b78:	48000400 	.word	0x48000400
 8000b7c:	20000048 	.word	0x20000048
 8000b80:	2000004c 	.word	0x2000004c
 8000b84:	20000024 	.word	0x20000024
 8000b88:	20000000 	.word	0x20000000

08000b8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b8c:	480d      	ldr	r0, [pc, #52]	@ (8000bc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b8e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b90:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b94:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b96:	490d      	ldr	r1, [pc, #52]	@ (8000bcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b98:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd0 <LoopForever+0xe>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bac:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd8 <LoopForever+0x16>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000bba:	f000 f811 	bl	8000be0 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000bbe:	f7ff ffab 	bl	8000b18 <main>

08000bc2 <LoopForever>:

LoopForever:
  b LoopForever
 8000bc2:	e7fe      	b.n	8000bc2 <LoopForever>
  ldr   r0, =_estack
 8000bc4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000bd0:	08000c50 	.word	0x08000c50
  ldr r2, =_sbss
 8000bd4:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000bd8:	20000050 	.word	0x20000050

08000bdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_2_IRQHandler>
	...

08000be0 <__libc_init_array>:
 8000be0:	b570      	push	{r4, r5, r6, lr}
 8000be2:	4d0d      	ldr	r5, [pc, #52]	@ (8000c18 <__libc_init_array+0x38>)
 8000be4:	4c0d      	ldr	r4, [pc, #52]	@ (8000c1c <__libc_init_array+0x3c>)
 8000be6:	1b64      	subs	r4, r4, r5
 8000be8:	10a4      	asrs	r4, r4, #2
 8000bea:	2600      	movs	r6, #0
 8000bec:	42a6      	cmp	r6, r4
 8000bee:	d109      	bne.n	8000c04 <__libc_init_array+0x24>
 8000bf0:	4d0b      	ldr	r5, [pc, #44]	@ (8000c20 <__libc_init_array+0x40>)
 8000bf2:	4c0c      	ldr	r4, [pc, #48]	@ (8000c24 <__libc_init_array+0x44>)
 8000bf4:	f000 f818 	bl	8000c28 <_init>
 8000bf8:	1b64      	subs	r4, r4, r5
 8000bfa:	10a4      	asrs	r4, r4, #2
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	42a6      	cmp	r6, r4
 8000c00:	d105      	bne.n	8000c0e <__libc_init_array+0x2e>
 8000c02:	bd70      	pop	{r4, r5, r6, pc}
 8000c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c08:	4798      	blx	r3
 8000c0a:	3601      	adds	r6, #1
 8000c0c:	e7ee      	b.n	8000bec <__libc_init_array+0xc>
 8000c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c12:	4798      	blx	r3
 8000c14:	3601      	adds	r6, #1
 8000c16:	e7f2      	b.n	8000bfe <__libc_init_array+0x1e>
 8000c18:	08000c48 	.word	0x08000c48
 8000c1c:	08000c48 	.word	0x08000c48
 8000c20:	08000c48 	.word	0x08000c48
 8000c24:	08000c4c 	.word	0x08000c4c

08000c28 <_init>:
 8000c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c2a:	bf00      	nop
 8000c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c2e:	bc08      	pop	{r3}
 8000c30:	469e      	mov	lr, r3
 8000c32:	4770      	bx	lr

08000c34 <_fini>:
 8000c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c36:	bf00      	nop
 8000c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c3a:	bc08      	pop	{r3}
 8000c3c:	469e      	mov	lr, r3
 8000c3e:	4770      	bx	lr
