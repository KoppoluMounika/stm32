
07_I2C_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bd4  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d60  08000d60  00002014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d60  08000d60  00002014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000d60  08000d60  00001d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000d68  08000d68  00002014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d68  08000d68  00001d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000d6c  08000d6c  00001d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08000d70  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00002014  2**0
                  CONTENTS
 10 .bss          00000064  20000014  20000014  00002014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  00002014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000162f  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000050d  00000000  00000000  00003673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000170  00000000  00000000  00003b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000010d  00000000  00000000  00003cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000026e2  00000000  00000000  00003dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001c90  00000000  00000000  000064df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a951  00000000  00000000  0000816f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00012ac0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000520  00000000  00000000  00012b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  00013024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000014 	.word	0x20000014
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08000d48 	.word	0x08000d48

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000018 	.word	0x20000018
 80001c8:	08000d48 	.word	0x08000d48

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <GPIO_Init>:
  * @param[in] pGPIOHandle - Handle structure that contains GPIO configuration information.
  * @return    - None
  * @note      - Make sure peripheral clock for GPIO is enabled before calling this function.
  */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80001dc:	b480      	push	{r7}
 80001de:	b087      	sub	sp, #28
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 80001e4:	2300      	movs	r3, #0
 80001e6:	617b      	str	r3, [r7, #20]

    // 1. Configure the mode of GPIO pin
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	795b      	ldrb	r3, [r3, #5]
 80001ec:	2b03      	cmp	r3, #3
 80001ee:	d822      	bhi.n	8000236 <GPIO_Init+0x5a>
    {
        // non-interrupt mode
        temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	795b      	ldrb	r3, [r3, #5]
 80001f4:	461a      	mov	r2, r3
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	791b      	ldrb	r3, [r3, #4]
 80001fa:	005b      	lsls	r3, r3, #1
 80001fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000200:	617b      	str	r3, [r7, #20]
        pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	791b      	ldrb	r3, [r3, #4]
 800020c:	005b      	lsls	r3, r3, #1
 800020e:	2103      	movs	r1, #3
 8000210:	fa01 f303 	lsl.w	r3, r1, r3
 8000214:	43db      	mvns	r3, r3
 8000216:	4619      	mov	r1, r3
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	400a      	ands	r2, r1
 800021e:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= temp;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	6819      	ldr	r1, [r3, #0]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	697a      	ldr	r2, [r7, #20]
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
        temp = 0;
 8000230:	2300      	movs	r3, #0
 8000232:	617b      	str	r3, [r7, #20]
 8000234:	e0cb      	b.n	80003ce <GPIO_Init+0x1f2>
    }
    else
    {
        // interrupt mode
        if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	795b      	ldrb	r3, [r3, #5]
 800023a:	2b04      	cmp	r3, #4
 800023c:	d117      	bne.n	800026e <GPIO_Init+0x92>
        {
        	EXTI->FTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800023e:	4b47      	ldr	r3, [pc, #284]	@ (800035c <GPIO_Init+0x180>)
 8000240:	68db      	ldr	r3, [r3, #12]
 8000242:	687a      	ldr	r2, [r7, #4]
 8000244:	7912      	ldrb	r2, [r2, #4]
 8000246:	4611      	mov	r1, r2
 8000248:	2201      	movs	r2, #1
 800024a:	408a      	lsls	r2, r1
 800024c:	4611      	mov	r1, r2
 800024e:	4a43      	ldr	r2, [pc, #268]	@ (800035c <GPIO_Init+0x180>)
 8000250:	430b      	orrs	r3, r1
 8000252:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR1 &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000254:	4b41      	ldr	r3, [pc, #260]	@ (800035c <GPIO_Init+0x180>)
 8000256:	689b      	ldr	r3, [r3, #8]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	7912      	ldrb	r2, [r2, #4]
 800025c:	4611      	mov	r1, r2
 800025e:	2201      	movs	r2, #1
 8000260:	408a      	lsls	r2, r1
 8000262:	43d2      	mvns	r2, r2
 8000264:	4611      	mov	r1, r2
 8000266:	4a3d      	ldr	r2, [pc, #244]	@ (800035c <GPIO_Init+0x180>)
 8000268:	400b      	ands	r3, r1
 800026a:	6093      	str	r3, [r2, #8]
 800026c:	e035      	b.n	80002da <GPIO_Init+0xfe>

        }
        else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	795b      	ldrb	r3, [r3, #5]
 8000272:	2b05      	cmp	r3, #5
 8000274:	d117      	bne.n	80002a6 <GPIO_Init+0xca>
        {
        	EXTI->RTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000276:	4b39      	ldr	r3, [pc, #228]	@ (800035c <GPIO_Init+0x180>)
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	7912      	ldrb	r2, [r2, #4]
 800027e:	4611      	mov	r1, r2
 8000280:	2201      	movs	r2, #1
 8000282:	408a      	lsls	r2, r1
 8000284:	4611      	mov	r1, r2
 8000286:	4a35      	ldr	r2, [pc, #212]	@ (800035c <GPIO_Init+0x180>)
 8000288:	430b      	orrs	r3, r1
 800028a:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR1 &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800028c:	4b33      	ldr	r3, [pc, #204]	@ (800035c <GPIO_Init+0x180>)
 800028e:	68db      	ldr	r3, [r3, #12]
 8000290:	687a      	ldr	r2, [r7, #4]
 8000292:	7912      	ldrb	r2, [r2, #4]
 8000294:	4611      	mov	r1, r2
 8000296:	2201      	movs	r2, #1
 8000298:	408a      	lsls	r2, r1
 800029a:	43d2      	mvns	r2, r2
 800029c:	4611      	mov	r1, r2
 800029e:	4a2f      	ldr	r2, [pc, #188]	@ (800035c <GPIO_Init+0x180>)
 80002a0:	400b      	ands	r3, r1
 80002a2:	60d3      	str	r3, [r2, #12]
 80002a4:	e019      	b.n	80002da <GPIO_Init+0xfe>
        }
        else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	795b      	ldrb	r3, [r3, #5]
 80002aa:	2b06      	cmp	r3, #6
 80002ac:	d115      	bne.n	80002da <GPIO_Init+0xfe>
        {
        	EXTI->FTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80002ae:	4b2b      	ldr	r3, [pc, #172]	@ (800035c <GPIO_Init+0x180>)
 80002b0:	68db      	ldr	r3, [r3, #12]
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	7912      	ldrb	r2, [r2, #4]
 80002b6:	4611      	mov	r1, r2
 80002b8:	2201      	movs	r2, #1
 80002ba:	408a      	lsls	r2, r1
 80002bc:	4611      	mov	r1, r2
 80002be:	4a27      	ldr	r2, [pc, #156]	@ (800035c <GPIO_Init+0x180>)
 80002c0:	430b      	orrs	r3, r1
 80002c2:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80002c4:	4b25      	ldr	r3, [pc, #148]	@ (800035c <GPIO_Init+0x180>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	7912      	ldrb	r2, [r2, #4]
 80002cc:	4611      	mov	r1, r2
 80002ce:	2201      	movs	r2, #1
 80002d0:	408a      	lsls	r2, r1
 80002d2:	4611      	mov	r1, r2
 80002d4:	4a21      	ldr	r2, [pc, #132]	@ (800035c <GPIO_Init+0x180>)
 80002d6:	430b      	orrs	r3, r1
 80002d8:	6093      	str	r3, [r2, #8]
        }
        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	791b      	ldrb	r3, [r3, #4]
 80002de:	089b      	lsrs	r3, r3, #2
 80002e0:	74fb      	strb	r3, [r7, #19]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	791b      	ldrb	r3, [r3, #4]
 80002e6:	f003 0303 	and.w	r3, r3, #3
 80002ea:	74bb      	strb	r3, [r7, #18]
        uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80002f4:	d042      	beq.n	800037c <GPIO_Init+0x1a0>
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a19      	ldr	r2, [pc, #100]	@ (8000360 <GPIO_Init+0x184>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d02b      	beq.n	8000358 <GPIO_Init+0x17c>
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a17      	ldr	r2, [pc, #92]	@ (8000364 <GPIO_Init+0x188>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d024      	beq.n	8000354 <GPIO_Init+0x178>
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a16      	ldr	r2, [pc, #88]	@ (8000368 <GPIO_Init+0x18c>)
 8000310:	4293      	cmp	r3, r2
 8000312:	d01d      	beq.n	8000350 <GPIO_Init+0x174>
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a14      	ldr	r2, [pc, #80]	@ (800036c <GPIO_Init+0x190>)
 800031a:	4293      	cmp	r3, r2
 800031c:	d016      	beq.n	800034c <GPIO_Init+0x170>
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4a13      	ldr	r2, [pc, #76]	@ (8000370 <GPIO_Init+0x194>)
 8000324:	4293      	cmp	r3, r2
 8000326:	d00f      	beq.n	8000348 <GPIO_Init+0x16c>
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a11      	ldr	r2, [pc, #68]	@ (8000374 <GPIO_Init+0x198>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d008      	beq.n	8000344 <GPIO_Init+0x168>
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4a10      	ldr	r2, [pc, #64]	@ (8000378 <GPIO_Init+0x19c>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d101      	bne.n	8000340 <GPIO_Init+0x164>
 800033c:	2307      	movs	r3, #7
 800033e:	e01e      	b.n	800037e <GPIO_Init+0x1a2>
 8000340:	2300      	movs	r3, #0
 8000342:	e01c      	b.n	800037e <GPIO_Init+0x1a2>
 8000344:	2306      	movs	r3, #6
 8000346:	e01a      	b.n	800037e <GPIO_Init+0x1a2>
 8000348:	2305      	movs	r3, #5
 800034a:	e018      	b.n	800037e <GPIO_Init+0x1a2>
 800034c:	2304      	movs	r3, #4
 800034e:	e016      	b.n	800037e <GPIO_Init+0x1a2>
 8000350:	2303      	movs	r3, #3
 8000352:	e014      	b.n	800037e <GPIO_Init+0x1a2>
 8000354:	2302      	movs	r3, #2
 8000356:	e012      	b.n	800037e <GPIO_Init+0x1a2>
 8000358:	2301      	movs	r3, #1
 800035a:	e010      	b.n	800037e <GPIO_Init+0x1a2>
 800035c:	40010400 	.word	0x40010400
 8000360:	48000400 	.word	0x48000400
 8000364:	48000800 	.word	0x48000800
 8000368:	48000c00 	.word	0x48000c00
 800036c:	48001000 	.word	0x48001000
 8000370:	48001400 	.word	0x48001400
 8000374:	48001800 	.word	0x48001800
 8000378:	48001c00 	.word	0x48001c00
 800037c:	2300      	movs	r3, #0
 800037e:	747b      	strb	r3, [r7, #17]
        SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2 * 4));
 8000380:	4a63      	ldr	r2, [pc, #396]	@ (8000510 <GPIO_Init+0x334>)
 8000382:	7cfb      	ldrb	r3, [r7, #19]
 8000384:	3302      	adds	r3, #2
 8000386:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800038a:	7cbb      	ldrb	r3, [r7, #18]
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	210f      	movs	r1, #15
 8000390:	fa01 f303 	lsl.w	r3, r1, r3
 8000394:	43db      	mvns	r3, r3
 8000396:	4618      	mov	r0, r3
 8000398:	495d      	ldr	r1, [pc, #372]	@ (8000510 <GPIO_Init+0x334>)
 800039a:	7cfb      	ldrb	r3, [r7, #19]
 800039c:	4002      	ands	r2, r0
 800039e:	3302      	adds	r3, #2
 80003a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        SYSCFG -> EXTICR[temp1] = portcode << (temp2 * 4);
 80003a4:	7c7a      	ldrb	r2, [r7, #17]
 80003a6:	7cbb      	ldrb	r3, [r7, #18]
 80003a8:	009b      	lsls	r3, r3, #2
 80003aa:	fa02 f103 	lsl.w	r1, r2, r3
 80003ae:	4a58      	ldr	r2, [pc, #352]	@ (8000510 <GPIO_Init+0x334>)
 80003b0:	7cfb      	ldrb	r3, [r7, #19]
 80003b2:	3302      	adds	r3, #2
 80003b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        EXTI -> IMR1 |= 1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80003b8:	4b56      	ldr	r3, [pc, #344]	@ (8000514 <GPIO_Init+0x338>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	7912      	ldrb	r2, [r2, #4]
 80003c0:	4611      	mov	r1, r2
 80003c2:	2201      	movs	r2, #1
 80003c4:	408a      	lsls	r2, r1
 80003c6:	4611      	mov	r1, r2
 80003c8:	4a52      	ldr	r2, [pc, #328]	@ (8000514 <GPIO_Init+0x338>)
 80003ca:	430b      	orrs	r3, r1
 80003cc:	6013      	str	r3, [r2, #0]
    }

    // 2. Configure speed
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	799b      	ldrb	r3, [r3, #6]
 80003d2:	461a      	mov	r2, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	791b      	ldrb	r3, [r3, #4]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	fa02 f303 	lsl.w	r3, r2, r3
 80003de:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	689a      	ldr	r2, [r3, #8]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	791b      	ldrb	r3, [r3, #4]
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	2103      	movs	r1, #3
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	43db      	mvns	r3, r3
 80003f4:	4619      	mov	r1, r3
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	400a      	ands	r2, r1
 80003fc:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	6899      	ldr	r1, [r3, #8]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	697a      	ldr	r2, [r7, #20]
 800040a:	430a      	orrs	r2, r1
 800040c:	609a      	str	r2, [r3, #8]
    temp = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]

    // 3. Configure pull-up/pull-down
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	79db      	ldrb	r3, [r3, #7]
 8000416:	461a      	mov	r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	791b      	ldrb	r3, [r3, #4]
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	fa02 f303 	lsl.w	r3, r2, r3
 8000422:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	68da      	ldr	r2, [r3, #12]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	791b      	ldrb	r3, [r3, #4]
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	2103      	movs	r1, #3
 8000432:	fa01 f303 	lsl.w	r3, r1, r3
 8000436:	43db      	mvns	r3, r3
 8000438:	4619      	mov	r1, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	400a      	ands	r2, r1
 8000440:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	68d9      	ldr	r1, [r3, #12]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	697a      	ldr	r2, [r7, #20]
 800044e:	430a      	orrs	r2, r1
 8000450:	60da      	str	r2, [r3, #12]
    temp = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]

    // 4. Configure output type
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	7a1b      	ldrb	r3, [r3, #8]
 800045a:	461a      	mov	r2, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	791b      	ldrb	r3, [r3, #4]
 8000460:	fa02 f303 	lsl.w	r3, r2, r3
 8000464:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	685a      	ldr	r2, [r3, #4]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	791b      	ldrb	r3, [r3, #4]
 8000470:	4619      	mov	r1, r3
 8000472:	2301      	movs	r3, #1
 8000474:	408b      	lsls	r3, r1
 8000476:	43db      	mvns	r3, r3
 8000478:	4619      	mov	r1, r3
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	400a      	ands	r2, r1
 8000480:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	6859      	ldr	r1, [r3, #4]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	697a      	ldr	r2, [r7, #20]
 800048e:	430a      	orrs	r2, r1
 8000490:	605a      	str	r2, [r3, #4]
    temp = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]

    // 5. Configure alternate function if needed
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	795b      	ldrb	r3, [r3, #5]
 800049a:	2b02      	cmp	r3, #2
 800049c:	d131      	bne.n	8000502 <GPIO_Init+0x326>
    {
        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;  // AFR[0] or AFR[1]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	791b      	ldrb	r3, [r3, #4]
 80004a2:	08db      	lsrs	r3, r3, #3
 80004a4:	743b      	strb	r3, [r7, #16]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;  // Position within register
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	791b      	ldrb	r3, [r3, #4]
 80004aa:	f003 0307 	and.w	r3, r3, #7
 80004ae:	73fb      	strb	r3, [r7, #15]

        pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	7c3a      	ldrb	r2, [r7, #16]
 80004b6:	3208      	adds	r2, #8
 80004b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80004bc:	7bfb      	ldrb	r3, [r7, #15]
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	220f      	movs	r2, #15
 80004c2:	fa02 f303 	lsl.w	r3, r2, r3
 80004c6:	43db      	mvns	r3, r3
 80004c8:	4618      	mov	r0, r3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	7c3a      	ldrb	r2, [r7, #16]
 80004d0:	4001      	ands	r1, r0
 80004d2:	3208      	adds	r2, #8
 80004d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	7c3a      	ldrb	r2, [r7, #16]
 80004de:	3208      	adds	r2, #8
 80004e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	7a5b      	ldrb	r3, [r3, #9]
 80004e8:	461a      	mov	r2, r3
 80004ea:	7bfb      	ldrb	r3, [r7, #15]
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	fa02 f303 	lsl.w	r3, r2, r3
 80004f2:	4618      	mov	r0, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	7c3a      	ldrb	r2, [r7, #16]
 80004fa:	4301      	orrs	r1, r0
 80004fc:	3208      	adds	r2, #8
 80004fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 8000502:	bf00      	nop
 8000504:	371c      	adds	r7, #28
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40010000 	.word	0x40010000
 8000514:	40010400 	.word	0x40010400

08000518 <I2C_PclkControl>:

#include"stm32l4xx_i2c_driver.h"
#include"stm32l4xx.h"

void I2C_PclkControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	460b      	mov	r3, r1
 8000522:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 8000524:	78fb      	ldrb	r3, [r7, #3]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d11f      	bne.n	800056a <I2C_PclkControl+0x52>
    {
        if(pI2Cx == I2C1)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a12      	ldr	r2, [pc, #72]	@ (8000578 <I2C_PclkControl+0x60>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d106      	bne.n	8000540 <I2C_PclkControl+0x28>
        {
            I2C1_PCLK_EN();
 8000532:	4b12      	ldr	r3, [pc, #72]	@ (800057c <I2C_PclkControl+0x64>)
 8000534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000536:	4a11      	ldr	r2, [pc, #68]	@ (800057c <I2C_PclkControl+0x64>)
 8000538:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800053c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
    else
    {

    }
}
 800053e:	e014      	b.n	800056a <I2C_PclkControl+0x52>
        else if(pI2Cx == I2C2)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4a0f      	ldr	r2, [pc, #60]	@ (8000580 <I2C_PclkControl+0x68>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d106      	bne.n	8000556 <I2C_PclkControl+0x3e>
            I2C2_PCLK_EN();
 8000548:	4b0c      	ldr	r3, [pc, #48]	@ (800057c <I2C_PclkControl+0x64>)
 800054a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800054c:	4a0b      	ldr	r2, [pc, #44]	@ (800057c <I2C_PclkControl+0x64>)
 800054e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000552:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000554:	e009      	b.n	800056a <I2C_PclkControl+0x52>
        else if(pI2Cx == I2C3)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a0a      	ldr	r2, [pc, #40]	@ (8000584 <I2C_PclkControl+0x6c>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d105      	bne.n	800056a <I2C_PclkControl+0x52>
            I2C3_PCLK_EN();
 800055e:	4b07      	ldr	r3, [pc, #28]	@ (800057c <I2C_PclkControl+0x64>)
 8000560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000562:	4a06      	ldr	r2, [pc, #24]	@ (800057c <I2C_PclkControl+0x64>)
 8000564:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000568:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	40005400 	.word	0x40005400
 800057c:	40021000 	.word	0x40021000
 8000580:	40005800 	.word	0x40005800
 8000584:	40005c00 	.word	0x40005c00

08000588 <I2C_Init>:
/*
 * I2C Init & Deinit
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	//enable pclk clock for spi
	I2C_PclkControl(pI2CHandle->pI2Cx,ENABLE);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2101      	movs	r1, #1
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff ffbe 	bl	8000518 <I2C_PclkControl>

	//disable the peripheral before configuring
	I2C_PeripheralControl(pI2CHandle->pI2Cx,DISABLE);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fa45 	bl	8000a32 <I2C_PeripheralControl>

	//configure timing register
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_SM) {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	4a22      	ldr	r2, [pc, #136]	@ (8000638 <I2C_Init+0xb0>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d104      	bne.n	80005bc <I2C_Init+0x34>
		pI2CHandle->pI2Cx->TIMINGR = 0x10420A28; // Standard mode
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a21      	ldr	r2, [pc, #132]	@ (800063c <I2C_Init+0xb4>)
 80005b8:	611a      	str	r2, [r3, #16]
 80005ba:	e003      	b.n	80005c4 <I2C_Init+0x3c>
	} else {
		pI2CHandle->pI2Cx->TIMINGR = 0x00B1112E; // Fast mode (example value)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a1f      	ldr	r2, [pc, #124]	@ (8000640 <I2C_Init+0xb8>)
 80005c2:	611a      	str	r2, [r3, #16]
	}
	//configure own address

	pI2CHandle->pI2Cx->OAR1 &= ~(1<<I2c_OAR1_OA1EN);//disable EN bit first
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	689a      	ldr	r2, [r3, #8]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80005d2:	609a      	str	r2, [r3, #8]
	pI2CHandle->pI2Cx->OAR1 |= (0<<10) | (pI2CHandle->I2C_Config.I2C_DeviceAddress<<1);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	6899      	ldr	r1, [r3, #8]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	7a1b      	ldrb	r3, [r3, #8]
 80005de:	005a      	lsls	r2, r3, #1
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	430a      	orrs	r2, r1
 80005e6:	609a      	str	r2, [r3, #8]
	pI2CHandle->pI2Cx->OAR1 |= (1<<I2c_OAR1_OA1EN);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	689a      	ldr	r2, [r3, #8]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80005f6:	609a      	str	r2, [r3, #8]

	//enable ACK will be used only for slave mode
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	7a5b      	ldrb	r3, [r3, #9]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d108      	bne.n	8000612 <I2C_Init+0x8a>
	    pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_NACK);  // clear NACK -> allow ACK
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	685a      	ldr	r2, [r3, #4]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	e007      	b.n	8000622 <I2C_Init+0x9a>
	else
	    pI2CHandle->pI2Cx->CR2 |=  (1 << I2C_CR2_NACK);  // set NACK -> disable ACK
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	685a      	ldr	r2, [r3, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000620:	605a      	str	r2, [r3, #4]

	//enable the peripheral
	I2C_PeripheralControl(pI2CHandle->pI2Cx, ENABLE);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2101      	movs	r1, #1
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fa02 	bl	8000a32 <I2C_PeripheralControl>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	000186a0 	.word	0x000186a0
 800063c:	10420a28 	.word	0x10420a28
 8000640:	00b1112e 	.word	0x00b1112e

08000644 <I2C_MasterSendData_IT>:
}
/*
 * Interrupt mode Transmission and Reception
 */
uint8_t I2C_MasterSendData_IT(I2C_Handle_t *pI2CHandle,uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	70fb      	strb	r3, [r7, #3]
	if(pI2CHandle->TxRxState != I2C_READY)
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	7f1b      	ldrb	r3, [r3, #28]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <I2C_MasterSendData_IT+0x1a>
		return I2C_BUSY;
 800065a:	2303      	movs	r3, #3
 800065c:	e032      	b.n	80006c4 <I2C_MasterSendData_IT+0x80>

	pI2CHandle->pTxBuffer = pTxBuffer;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	68ba      	ldr	r2, [r7, #8]
 8000662:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = Len;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	615a      	str	r2, [r3, #20]
	pI2CHandle->TxRxState = I2C_BUSY_IN_TX;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	2202      	movs	r2, #2
 800066e:	771a      	strb	r2, [r3, #28]
	pI2CHandle->DevAddr = SlaveAddr;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	78fa      	ldrb	r2, [r7, #3]
 8000674:	775a      	strb	r2, [r3, #29]

	// 1. Configure CR2
	pI2CHandle->pI2Cx->CR2 = 0;
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2200      	movs	r2, #0
 800067c:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 |= (SlaveAddr << 1);
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	6859      	ldr	r1, [r3, #4]
 8000684:	78fb      	ldrb	r3, [r7, #3]
 8000686:	005a      	lsls	r2, r3, #1
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	430a      	orrs	r2, r1
 800068e:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 |= (Len << 16);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	6859      	ldr	r1, [r3, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	041a      	lsls	r2, r3, #16
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	430a      	orrs	r2, r1
 80006a0:	605a      	str	r2, [r3, #4]
	//pI2CHandle->pI2Cx->CR2 |= (1<<I2C_CR2_AUTOEND);

	pI2CHandle->pI2Cx->CR2 |= 1 << I2C_CR2_START;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	685a      	ldr	r2, [r3, #4]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80006b0:	605a      	str	r2, [r3, #4]

	// 2. Enable TXIE and STOPIE
	pI2CHandle->pI2Cx->CR1 |= (1<<I2C_CR1_TXIE) | (1<<I2C_CR1_STOPIE) | (1<<I2C_CR1_ERRIE) | (1<<I2C_CR1_TCIE);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f042 02e2 	orr.w	r2, r2, #226	@ 0xe2
 80006c0:	601a      	str	r2, [r3, #0]

	return 0;
 80006c2:	2300      	movs	r3, #0
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <I2C_MasterReceiveData_IT>:

uint8_t I2C_MasterReceiveData_IT(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint32_t Len, uint8_t SlaveAddr)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
 80006dc:	70fb      	strb	r3, [r7, #3]
	if(pI2CHandle->TxRxState != I2C_READY)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	7f1b      	ldrb	r3, [r3, #28]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <I2C_MasterReceiveData_IT+0x1a>
		return I2C_BUSY;
 80006e6:	2303      	movs	r3, #3
 80006e8:	e042      	b.n	8000770 <I2C_MasterReceiveData_IT+0xa0>

	pI2CHandle->pRxBuffer = pRxBuffer;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	68ba      	ldr	r2, [r7, #8]
 80006ee:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = Len;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	619a      	str	r2, [r3, #24]
	pI2CHandle->TxRxState = I2C_BUSY_IN_RX;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	2201      	movs	r2, #1
 80006fa:	771a      	strb	r2, [r3, #28]
	pI2CHandle->DevAddr = SlaveAddr;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	78fa      	ldrb	r2, [r7, #3]
 8000700:	775a      	strb	r2, [r3, #29]

	// 1. Configure CR2
	pI2CHandle->pI2Cx->CR2 = 0;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2200      	movs	r2, #0
 8000708:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 |= (SlaveAddr << 1);
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	6859      	ldr	r1, [r3, #4]
 8000710:	78fb      	ldrb	r3, [r7, #3]
 8000712:	005a      	lsls	r2, r3, #1
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	430a      	orrs	r2, r1
 800071a:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 |= (Len << 16);
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	6859      	ldr	r1, [r3, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	041a      	lsls	r2, r3, #16
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	430a      	orrs	r2, r1
 800072c:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 |= (1<<I2C_CR2_RD_WRN);
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	685a      	ldr	r2, [r3, #4]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800073c:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 |= (1<<I2C_CR2_AUTOEND);
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	685a      	ldr	r2, [r3, #4]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800074c:	605a      	str	r2, [r3, #4]

	pI2CHandle->pI2Cx->CR2 |= 1 << I2C_CR2_START;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	685a      	ldr	r2, [r3, #4]
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800075c:	605a      	str	r2, [r3, #4]

	// 2. Enable RXIE and STOPIE
	pI2CHandle->pI2Cx->CR1 |= (1<<I2C_CR1_RXIE) | (1<<I2C_CR1_STOPIE) | (1<<I2C_CR1_ERRIE);
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f042 02a4 	orr.w	r2, r2, #164	@ 0xa4
 800076c:	601a      	str	r2, [r3, #0]

	return 0;
 800076e:	2300      	movs	r3, #0
}
 8000770:	4618      	mov	r0, r3
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <I2C_IRQConfig>:

/*
 * IRQ Configuration and ISR handling
 */
void I2C_IRQConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	460a      	mov	r2, r1
 8000786:	71fb      	strb	r3, [r7, #7]
 8000788:	4613      	mov	r3, r2
 800078a:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 800078c:	79bb      	ldrb	r3, [r7, #6]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d133      	bne.n	80007fa <I2C_IRQConfig+0x7e>
	{
		if(IRQNumber <= 31){
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b1f      	cmp	r3, #31
 8000796:	d80a      	bhi.n	80007ae <I2C_IRQConfig+0x32>
			*NVIC_ISER0 |= (1<<IRQNumber);
 8000798:	4b35      	ldr	r3, [pc, #212]	@ (8000870 <I2C_IRQConfig+0xf4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	79fa      	ldrb	r2, [r7, #7]
 800079e:	2101      	movs	r1, #1
 80007a0:	fa01 f202 	lsl.w	r2, r1, r2
 80007a4:	4611      	mov	r1, r2
 80007a6:	4a32      	ldr	r2, [pc, #200]	@ (8000870 <I2C_IRQConfig+0xf4>)
 80007a8:	430b      	orrs	r3, r1
 80007aa:	6013      	str	r3, [r2, #0]
		}
		else if(IRQNumber >=64 && IRQNumber < 96){
			*NVIC_ICER2 |= (1<<(IRQNumber%32));
		}
	}
}
 80007ac:	e059      	b.n	8000862 <I2C_IRQConfig+0xe6>
		else if(IRQNumber >=32 && IRQNumber < 64){
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b1f      	cmp	r3, #31
 80007b2:	d90f      	bls.n	80007d4 <I2C_IRQConfig+0x58>
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80007b8:	d80c      	bhi.n	80007d4 <I2C_IRQConfig+0x58>
			*NVIC_ISER1 |= (1<<(IRQNumber%32));
 80007ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000874 <I2C_IRQConfig+0xf8>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	79fa      	ldrb	r2, [r7, #7]
 80007c0:	f002 021f 	and.w	r2, r2, #31
 80007c4:	2101      	movs	r1, #1
 80007c6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ca:	4611      	mov	r1, r2
 80007cc:	4a29      	ldr	r2, [pc, #164]	@ (8000874 <I2C_IRQConfig+0xf8>)
 80007ce:	430b      	orrs	r3, r1
 80007d0:	6013      	str	r3, [r2, #0]
 80007d2:	e046      	b.n	8000862 <I2C_IRQConfig+0xe6>
		else if(IRQNumber >=64 && IRQNumber < 96){
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80007d8:	d943      	bls.n	8000862 <I2C_IRQConfig+0xe6>
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b5f      	cmp	r3, #95	@ 0x5f
 80007de:	d840      	bhi.n	8000862 <I2C_IRQConfig+0xe6>
			*NVIC_ISER2 |= (1<<(IRQNumber%32));
 80007e0:	4b25      	ldr	r3, [pc, #148]	@ (8000878 <I2C_IRQConfig+0xfc>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	79fa      	ldrb	r2, [r7, #7]
 80007e6:	f002 021f 	and.w	r2, r2, #31
 80007ea:	2101      	movs	r1, #1
 80007ec:	fa01 f202 	lsl.w	r2, r1, r2
 80007f0:	4611      	mov	r1, r2
 80007f2:	4a21      	ldr	r2, [pc, #132]	@ (8000878 <I2C_IRQConfig+0xfc>)
 80007f4:	430b      	orrs	r3, r1
 80007f6:	6013      	str	r3, [r2, #0]
}
 80007f8:	e033      	b.n	8000862 <I2C_IRQConfig+0xe6>
		if(IRQNumber <= 31){
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b1f      	cmp	r3, #31
 80007fe:	d80a      	bhi.n	8000816 <I2C_IRQConfig+0x9a>
			*NVIC_ICER0 |= (1<<IRQNumber);
 8000800:	4b1e      	ldr	r3, [pc, #120]	@ (800087c <I2C_IRQConfig+0x100>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	79fa      	ldrb	r2, [r7, #7]
 8000806:	2101      	movs	r1, #1
 8000808:	fa01 f202 	lsl.w	r2, r1, r2
 800080c:	4611      	mov	r1, r2
 800080e:	4a1b      	ldr	r2, [pc, #108]	@ (800087c <I2C_IRQConfig+0x100>)
 8000810:	430b      	orrs	r3, r1
 8000812:	6013      	str	r3, [r2, #0]
}
 8000814:	e025      	b.n	8000862 <I2C_IRQConfig+0xe6>
		else if(IRQNumber >=32 && IRQNumber < 64){
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b1f      	cmp	r3, #31
 800081a:	d90f      	bls.n	800083c <I2C_IRQConfig+0xc0>
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000820:	d80c      	bhi.n	800083c <I2C_IRQConfig+0xc0>
			*NVIC_ICER1 |= (1<<(IRQNumber%32));
 8000822:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <I2C_IRQConfig+0x104>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	79fa      	ldrb	r2, [r7, #7]
 8000828:	f002 021f 	and.w	r2, r2, #31
 800082c:	2101      	movs	r1, #1
 800082e:	fa01 f202 	lsl.w	r2, r1, r2
 8000832:	4611      	mov	r1, r2
 8000834:	4a12      	ldr	r2, [pc, #72]	@ (8000880 <I2C_IRQConfig+0x104>)
 8000836:	430b      	orrs	r3, r1
 8000838:	6013      	str	r3, [r2, #0]
 800083a:	e012      	b.n	8000862 <I2C_IRQConfig+0xe6>
		else if(IRQNumber >=64 && IRQNumber < 96){
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000840:	d90f      	bls.n	8000862 <I2C_IRQConfig+0xe6>
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	2b5f      	cmp	r3, #95	@ 0x5f
 8000846:	d80c      	bhi.n	8000862 <I2C_IRQConfig+0xe6>
			*NVIC_ICER2 |= (1<<(IRQNumber%32));
 8000848:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <I2C_IRQConfig+0x108>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	79fa      	ldrb	r2, [r7, #7]
 800084e:	f002 021f 	and.w	r2, r2, #31
 8000852:	2101      	movs	r1, #1
 8000854:	fa01 f202 	lsl.w	r2, r1, r2
 8000858:	4611      	mov	r1, r2
 800085a:	4a0a      	ldr	r2, [pc, #40]	@ (8000884 <I2C_IRQConfig+0x108>)
 800085c:	430b      	orrs	r3, r1
 800085e:	6013      	str	r3, [r2, #0]
}
 8000860:	e7ff      	b.n	8000862 <I2C_IRQConfig+0xe6>
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000e100 	.word	0xe000e100
 8000874:	e000e104 	.word	0xe000e104
 8000878:	e000e108 	.word	0xe000e108
 800087c:	e000e180 	.word	0xe000e180
 8000880:	e000e184 	.word	0xe000e184
 8000884:	e000e188 	.word	0xe000e188

08000888 <I2C_IRQHandling>:
	*((volatile uint32_t*)(NVIC_PR_BASE_ADDR+(iprx*4))) |= (priority << shift_amount);

}

void I2C_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
    uint32_t temp1, temp2;
    uint8_t event = I2C_EVENT_ERROR; // Initialize with error
 8000890:	2302      	movs	r3, #2
 8000892:	75fb      	strb	r3, [r7, #23]

    // Handle TXIS (Transmit Interrupt Status)
    temp1 = (pI2CHandle->pI2Cx->CR1 & (1 << I2C_CR1_TXIE));
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	613b      	str	r3, [r7, #16]
    temp2 = (pI2CHandle->pI2Cx->ISR & (1 << I2C_ISR_TXIS));
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	60fb      	str	r3, [r7, #12]
    if(temp1 && temp2)
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d020      	beq.n	80008f4 <I2C_IRQHandling+0x6c>
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d01d      	beq.n	80008f4 <I2C_IRQHandling+0x6c>
    {
        // Check if there's more data to send
        if(pI2CHandle->TxLen > 0)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d019      	beq.n	80008f4 <I2C_IRQHandling+0x6c>
        {
            pI2CHandle->pI2Cx->TXDR = *(pI2CHandle->pTxBuffer++);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	1c59      	adds	r1, r3, #1
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	60d1      	str	r1, [r2, #12]
 80008ca:	781a      	ldrb	r2, [r3, #0]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	629a      	str	r2, [r3, #40]	@ 0x28
            pI2CHandle->TxLen--;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	1e5a      	subs	r2, r3, #1
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	615a      	str	r2, [r3, #20]

            // If this was the last byte, disable TXIE
            if(pI2CHandle->TxLen == 0)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	695b      	ldr	r3, [r3, #20]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d107      	bne.n	80008f4 <I2C_IRQHandling+0x6c>
            {
                pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_TXIE);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f022 0202 	bic.w	r2, r2, #2
 80008f2:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Handle RXNE (Receive Data Register Not Empty)
    temp1 = (pI2CHandle->pI2Cx->CR1 & (1 << I2C_CR1_RXIE));
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	613b      	str	r3, [r7, #16]
    temp2 = (pI2CHandle->pI2Cx->ISR & (1 << I2C_ISR_RXNE));
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	60fb      	str	r3, [r7, #12]
    if(temp1 && temp2)
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d021      	beq.n	8000956 <I2C_IRQHandling+0xce>
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d01e      	beq.n	8000956 <I2C_IRQHandling+0xce>
    {
        // Check if we're expecting more data
        if(pI2CHandle->RxLen > 0)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d01a      	beq.n	8000956 <I2C_IRQHandling+0xce>
        {
            *(pI2CHandle->pRxBuffer++) = pI2CHandle->pI2Cx->RXDR;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	691b      	ldr	r3, [r3, #16]
 800092a:	1c59      	adds	r1, r3, #1
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	6111      	str	r1, [r2, #16]
 8000930:	b2c2      	uxtb	r2, r0
 8000932:	701a      	strb	r2, [r3, #0]
            pI2CHandle->RxLen--;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	1e5a      	subs	r2, r3, #1
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	619a      	str	r2, [r3, #24]

            // If this was the last byte, disable RXIE
            if(pI2CHandle->RxLen == 0)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d107      	bne.n	8000956 <I2C_IRQHandling+0xce>
            {
                pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_RXIE);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f022 0204 	bic.w	r2, r2, #4
 8000954:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Handle TC (Transfer Complete) - Important for the end of transmission
    temp1 = (pI2CHandle->pI2Cx->CR1 & (1 << I2C_CR1_TCIE));
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000960:	613b      	str	r3, [r7, #16]
    temp2 = (pI2CHandle->pI2Cx->ISR & (1 << I2C_ISR_TC));
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800096c:	60fb      	str	r3, [r7, #12]
        // Transfer complete, but we might not have STOP condition yet
        // You might want to handle this depending on your use case
    }

    // Handle STOPF (Stop Detection Flag)
    temp1 = (pI2CHandle->pI2Cx->CR1 & (1 << I2C_CR1_STOPIE));
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f003 0320 	and.w	r3, r3, #32
 8000978:	613b      	str	r3, [r7, #16]
    temp2 = (pI2CHandle->pI2Cx->ISR & (1 << I2C_ISR_STOPF));
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0320 	and.w	r3, r3, #32
 8000984:	60fb      	str	r3, [r7, #12]
    if(temp1 && temp2)
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d030      	beq.n	80009ee <I2C_IRQHandling+0x166>
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d02d      	beq.n	80009ee <I2C_IRQHandling+0x166>
    {
        // Clear STOP flag
        pI2CHandle->pI2Cx->ICR |= (1 << I2C_ICR_STOPCF);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	69da      	ldr	r2, [r3, #28]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f042 0220 	orr.w	r2, r2, #32
 80009a0:	61da      	str	r2, [r3, #28]

        // Determine which event completed
        if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	7f1b      	ldrb	r3, [r3, #28]
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d102      	bne.n	80009b0 <I2C_IRQHandling+0x128>
        {
            event = I2C_EV_TX_CMPLT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	75fb      	strb	r3, [r7, #23]
 80009ae:	e005      	b.n	80009bc <I2C_IRQHandling+0x134>
        }
        else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	7f1b      	ldrb	r3, [r3, #28]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d101      	bne.n	80009bc <I2C_IRQHandling+0x134>
        {
            event = I2C_EV_RX_CMPLT;
 80009b8:	2301      	movs	r3, #1
 80009ba:	75fb      	strb	r3, [r7, #23]
        }

        // Reset state
        pI2CHandle->TxRxState = I2C_READY;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	771a      	strb	r2, [r3, #28]

        // Notify application - do this BEFORE clearing buffers
        if(pI2CHandle->ApplicationCallback)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6a1b      	ldr	r3, [r3, #32]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d005      	beq.n	80009d6 <I2C_IRQHandling+0x14e>
        {
            pI2CHandle->ApplicationCallback(pI2CHandle, event);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6a1b      	ldr	r3, [r3, #32]
 80009ce:	7dfa      	ldrb	r2, [r7, #23]
 80009d0:	4611      	mov	r1, r2
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	4798      	blx	r3
        }

        // Clear buffers after callback (in case callback needs them)
        pI2CHandle->pTxBuffer = NULL;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
        pI2CHandle->pRxBuffer = NULL;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
        pI2CHandle->TxLen = 0;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
        pI2CHandle->RxLen = 0;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
    }
    if ((pI2CHandle->pI2Cx->CR1 & (1 << I2C_CR1_TCIE)) &&
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d016      	beq.n	8000a2a <I2C_IRQHandling+0x1a2>
        (pI2CHandle->pI2Cx->ISR & (1 << I2C_ISR_TC))) {
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((pI2CHandle->pI2Cx->CR1 & (1 << I2C_CR1_TCIE)) &&
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d00f      	beq.n	8000a2a <I2C_IRQHandling+0x1a2>

        if (pI2CHandle->TxRxState == I2C_BUSY_IN_TX && pI2CHandle->TxLen == 0) {
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	7f1b      	ldrb	r3, [r3, #28]
 8000a0e:	2b02      	cmp	r3, #2
 8000a10:	d10b      	bne.n	8000a2a <I2C_IRQHandling+0x1a2>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d107      	bne.n	8000a2a <I2C_IRQHandling+0x1a2>
            pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_STOP);  // generate STOP
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	685a      	ldr	r2, [r3, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000a28:	605a      	str	r2, [r3, #4]
            // (STOPF interrupt you already handle will fire and call the app callback)
        }
    }
}
 8000a2a:	bf00      	nop
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <I2C_PeripheralControl>:
/*
 * Other Peripheral Control API's
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000a3e:	78fb      	ldrb	r3, [r7, #3]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d106      	bne.n	8000a52 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1<<I2C_CR1_PE);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f043 0201 	orr.w	r2, r3, #1
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	601a      	str	r2, [r3, #0]
	else
		pI2Cx->CR1 &= ~(1<<I2C_CR1_PE);
}
 8000a50:	e005      	b.n	8000a5e <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1<<I2C_CR1_PE);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f023 0201 	bic.w	r2, r3, #1
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	601a      	str	r2, [r3, #0]
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <delay>:

// Flags for completion (set in IRQ handler)
volatile uint8_t txDone = 0;
volatile uint8_t rxDone = 0;

void delay(void) {
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
    for (uint32_t i = 0; i < 500000; i++);
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	e002      	b.n	8000a7e <delay+0x12>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a04      	ldr	r2, [pc, #16]	@ (8000a94 <delay+0x28>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d9f8      	bls.n	8000a78 <delay+0xc>
}
 8000a86:	bf00      	nop
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	0007a11f 	.word	0x0007a11f

08000a98 <I2C1_GPIOInits>:

// Configure GPIO pins for I2C1 (PB6=SCL, PB7=SDA)
void I2C1_GPIOInits(void) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
    GPIO_Handle_t I2CPins;

    I2CPins.pGPIOx = GPIOB;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <I2C1_GPIOInits+0x40>)
 8000aa0:	607b      	str	r3, [r7, #4]
    I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	727b      	strb	r3, [r7, #9]
    I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4; // I2C1 AF4
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	737b      	strb	r3, [r7, #13]
    I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	733b      	strb	r3, [r7, #12]
    I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	72fb      	strb	r3, [r7, #11]
    I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	72bb      	strb	r3, [r7, #10]

    // SCL
    I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 8000ab6:	2308      	movs	r3, #8
 8000ab8:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2CPins);
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fb8d 	bl	80001dc <GPIO_Init>

    // SDA
    I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 8000ac2:	2309      	movs	r3, #9
 8000ac4:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&I2CPins);
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fb87 	bl	80001dc <GPIO_Init>
}
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	48000400 	.word	0x48000400

08000adc <I2C1_Inits>:

void I2C1_Inits(void) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
    I2C1Handle.pI2Cx = I2C1;
 8000ae0:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <I2C1_Inits+0x28>)
 8000ae2:	4a09      	ldr	r2, [pc, #36]	@ (8000b08 <I2C1_Inits+0x2c>)
 8000ae4:	601a      	str	r2, [r3, #0]
    I2C1Handle.I2C_Config.I2C_DeviceAddress = 0x61;   // STM32 own address (not used in master mode)
 8000ae6:	4b07      	ldr	r3, [pc, #28]	@ (8000b04 <I2C1_Inits+0x28>)
 8000ae8:	2261      	movs	r2, #97	@ 0x61
 8000aea:	721a      	strb	r2, [r3, #8]
    I2C1Handle.I2C_Config.I2C_ACKControl   = I2C_ACK_ENABLE;
 8000aec:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <I2C1_Inits+0x28>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	725a      	strb	r2, [r3, #9]
    I2C1Handle.I2C_Config.I2C_SCLSpeed     = I2C_SCL_SPEED_SM;
 8000af2:	4b04      	ldr	r3, [pc, #16]	@ (8000b04 <I2C1_Inits+0x28>)
 8000af4:	4a05      	ldr	r2, [pc, #20]	@ (8000b0c <I2C1_Inits+0x30>)
 8000af6:	605a      	str	r2, [r3, #4]

    I2C_Init(&I2C1Handle);
 8000af8:	4802      	ldr	r0, [pc, #8]	@ (8000b04 <I2C1_Inits+0x28>)
 8000afa:	f7ff fd45 	bl	8000588 <I2C_Init>
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000030 	.word	0x20000030
 8000b08:	40005400 	.word	0x40005400
 8000b0c:	000186a0 	.word	0x000186a0

08000b10 <I2C_ApplicationCallback>:
void I2C_ApplicationCallback(I2C_Handle_t *pI2CHandle, uint8_t AppEv)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	70fb      	strb	r3, [r7, #3]
    switch(AppEv)
 8000b1c:	78fb      	ldrb	r3, [r7, #3]
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d00e      	beq.n	8000b40 <I2C_ApplicationCallback+0x30>
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	dc13      	bgt.n	8000b4e <I2C_ApplicationCallback+0x3e>
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d002      	beq.n	8000b30 <I2C_ApplicationCallback+0x20>
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d004      	beq.n	8000b38 <I2C_ApplicationCallback+0x28>
            // Handle error
            txDone = 1;
            rxDone = 1;
            break;
    }
}
 8000b2e:	e00e      	b.n	8000b4e <I2C_ApplicationCallback+0x3e>
            txDone = 1;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <I2C_ApplicationCallback+0x4c>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
            break;
 8000b36:	e00a      	b.n	8000b4e <I2C_ApplicationCallback+0x3e>
            rxDone = 1;
 8000b38:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <I2C_ApplicationCallback+0x50>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	701a      	strb	r2, [r3, #0]
            break;
 8000b3e:	e006      	b.n	8000b4e <I2C_ApplicationCallback+0x3e>
            txDone = 1;
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <I2C_ApplicationCallback+0x4c>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
            rxDone = 1;
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <I2C_ApplicationCallback+0x50>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]
            break;
 8000b4c:	bf00      	nop
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000074 	.word	0x20000074
 8000b60:	20000075 	.word	0x20000075

08000b64 <main>:
int main(void) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
    // Init GPIO + I2C
    I2C1_GPIOInits();
 8000b68:	f7ff ff96 	bl	8000a98 <I2C1_GPIOInits>
    I2C1_Inits();
 8000b6c:	f7ff ffb6 	bl	8000adc <I2C1_Inits>

    I2C1Handle.ApplicationCallback = I2C_ApplicationCallback;
 8000b70:	4b14      	ldr	r3, [pc, #80]	@ (8000bc4 <main+0x60>)
 8000b72:	4a15      	ldr	r2, [pc, #84]	@ (8000bc8 <main+0x64>)
 8000b74:	621a      	str	r2, [r3, #32]

    // Enable I2C1 interrupts in NVIC
    I2C_IRQConfig(IRQ_NO_I2C1_EV, ENABLE);
 8000b76:	2101      	movs	r1, #1
 8000b78:	201f      	movs	r0, #31
 8000b7a:	f7ff fdff 	bl	800077c <I2C_IRQConfig>
    I2C_IRQConfig(IRQ_NO_I2C1_ER, ENABLE);
 8000b7e:	2101      	movs	r1, #1
 8000b80:	2020      	movs	r0, #32
 8000b82:	f7ff fdfb 	bl	800077c <I2C_IRQConfig>

    // Send data to Arduino slave (address 0x08)
    I2C_MasterSendData_IT(&I2C1Handle, txBuffer, strlen((char*)txBuffer), SLAVE_ADDR);
 8000b86:	4811      	ldr	r0, [pc, #68]	@ (8000bcc <main+0x68>)
 8000b88:	f7ff fb20 	bl	80001cc <strlen>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	2355      	movs	r3, #85	@ 0x55
 8000b90:	490e      	ldr	r1, [pc, #56]	@ (8000bcc <main+0x68>)
 8000b92:	480c      	ldr	r0, [pc, #48]	@ (8000bc4 <main+0x60>)
 8000b94:	f7ff fd56 	bl	8000644 <I2C_MasterSendData_IT>

    while (!txDone);   // wait until TX complete
 8000b98:	bf00      	nop
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <main+0x6c>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d0fa      	beq.n	8000b9a <main+0x36>

    delay(); // small delay
 8000ba4:	f7ff ff62 	bl	8000a6c <delay>

    // Receive data from Arduino slave (address 0x08)
    I2C_MasterReceiveData_IT(&I2C1Handle, rxBuffer, sizeof(rxBuffer), SLAVE_ADDR);
 8000ba8:	2355      	movs	r3, #85	@ 0x55
 8000baa:	2220      	movs	r2, #32
 8000bac:	4909      	ldr	r1, [pc, #36]	@ (8000bd4 <main+0x70>)
 8000bae:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <main+0x60>)
 8000bb0:	f7ff fd8e 	bl	80006d0 <I2C_MasterReceiveData_IT>

    while (!rxDone);   // wait until RX complete
 8000bb4:	bf00      	nop
 8000bb6:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <main+0x74>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d0fa      	beq.n	8000bb6 <main+0x52>

    // Here rxBuffer holds the received string
    while (1);
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <main+0x5c>
 8000bc4:	20000030 	.word	0x20000030
 8000bc8:	08000b11 	.word	0x08000b11
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	20000074 	.word	0x20000074
 8000bd4:	20000054 	.word	0x20000054
 8000bd8:	20000075 	.word	0x20000075

08000bdc <I2C1_EV_IRQHandler>:
}

/*
 * IRQ Handlers
 */
void I2C1_EV_IRQHandler(void) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
    I2C_IRQHandling(&I2C1Handle);
 8000be0:	4802      	ldr	r0, [pc, #8]	@ (8000bec <I2C1_EV_IRQHandler+0x10>)
 8000be2:	f7ff fe51 	bl	8000888 <I2C_IRQHandling>

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000030 	.word	0x20000030

08000bf0 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
    uint32_t isr = I2C1->ISR;
 8000bf6:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca4 <I2C1_ER_IRQHandler+0xb4>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	603b      	str	r3, [r7, #0]
    uint8_t error_event = I2C_EVENT_ERROR;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	71fb      	strb	r3, [r7, #7]

    if(isr & (1 << I2C_ISR_BERR)) {
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d007      	beq.n	8000c1a <I2C1_ER_IRQHandler+0x2a>
        I2C1->ICR |= (1 << I2C_ICR_BERRCF);
 8000c0a:	4b26      	ldr	r3, [pc, #152]	@ (8000ca4 <I2C1_ER_IRQHandler+0xb4>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	4a25      	ldr	r2, [pc, #148]	@ (8000ca4 <I2C1_ER_IRQHandler+0xb4>)
 8000c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c14:	61d3      	str	r3, [r2, #28]
        error_event = I2C_ERROR_BERR;
 8000c16:	2303      	movs	r3, #3
 8000c18:	71fb      	strb	r3, [r7, #7]
    }
    if(isr & (1 << I2C_ISR_ARLO)) {
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d007      	beq.n	8000c34 <I2C1_ER_IRQHandler+0x44>
        I2C1->ICR |= (1 << I2C_ICR_ARLOCF);
 8000c24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca4 <I2C1_ER_IRQHandler+0xb4>)
 8000c26:	69db      	ldr	r3, [r3, #28]
 8000c28:	4a1e      	ldr	r2, [pc, #120]	@ (8000ca4 <I2C1_ER_IRQHandler+0xb4>)
 8000c2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c2e:	61d3      	str	r3, [r2, #28]
        error_event = I2C_ERROR_ARLO;
 8000c30:	2304      	movs	r3, #4
 8000c32:	71fb      	strb	r3, [r7, #7]
    }
    if(isr & (1 << I2C_ISR_NACKF)) {
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	f003 0310 	and.w	r3, r3, #16
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d007      	beq.n	8000c4e <I2C1_ER_IRQHandler+0x5e>
        I2C1->ICR |= (1 << I2C_ICR_NACKCF);
 8000c3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <I2C1_ER_IRQHandler+0xb4>)
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	4a18      	ldr	r2, [pc, #96]	@ (8000ca4 <I2C1_ER_IRQHandler+0xb4>)
 8000c44:	f043 0310 	orr.w	r3, r3, #16
 8000c48:	61d3      	str	r3, [r2, #28]
        error_event = I2C_ERROR_AF;
 8000c4a:	2305      	movs	r3, #5
 8000c4c:	71fb      	strb	r3, [r7, #7]
    }
    if(isr & (1 << I2C_ISR_OVR)) {
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d007      	beq.n	8000c68 <I2C1_ER_IRQHandler+0x78>
        I2C1->ICR |= (1 << I2C_ICR_OVRCF);
 8000c58:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <I2C1_ER_IRQHandler+0xb4>)
 8000c5a:	69db      	ldr	r3, [r3, #28]
 8000c5c:	4a11      	ldr	r2, [pc, #68]	@ (8000ca4 <I2C1_ER_IRQHandler+0xb4>)
 8000c5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c62:	61d3      	str	r3, [r2, #28]
        error_event = I2C_ERROR_OVR;
 8000c64:	2306      	movs	r3, #6
 8000c66:	71fb      	strb	r3, [r7, #7]
    }
    if(isr & (1 << I2C_ISR_TIMEOUT)) {
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d007      	beq.n	8000c82 <I2C1_ER_IRQHandler+0x92>
        I2C1->ICR |= (1 << I2C_ICR_TIMOUTCF);
 8000c72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <I2C1_ER_IRQHandler+0xb4>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca4 <I2C1_ER_IRQHandler+0xb4>)
 8000c78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c7c:	61d3      	str	r3, [r2, #28]
        error_event = I2C_ERROR_TIMEOUT;
 8000c7e:	2307      	movs	r3, #7
 8000c80:	71fb      	strb	r3, [r7, #7]
    }

    // Reset state and notify application
    I2C1Handle.TxRxState = I2C_READY;
 8000c82:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <I2C1_ER_IRQHandler+0xb8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	771a      	strb	r2, [r3, #28]
    if(I2C1Handle.ApplicationCallback)
 8000c88:	4b07      	ldr	r3, [pc, #28]	@ (8000ca8 <I2C1_ER_IRQHandler+0xb8>)
 8000c8a:	6a1b      	ldr	r3, [r3, #32]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d005      	beq.n	8000c9c <I2C1_ER_IRQHandler+0xac>
    {
        I2C1Handle.ApplicationCallback(&I2C1Handle, error_event);
 8000c90:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <I2C1_ER_IRQHandler+0xb8>)
 8000c92:	6a1b      	ldr	r3, [r3, #32]
 8000c94:	79fa      	ldrb	r2, [r7, #7]
 8000c96:	4611      	mov	r1, r2
 8000c98:	4803      	ldr	r0, [pc, #12]	@ (8000ca8 <I2C1_ER_IRQHandler+0xb8>)
 8000c9a:	4798      	blx	r3
    }
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40005400 	.word	0x40005400
 8000ca8:	20000030 	.word	0x20000030

08000cac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cac:	480d      	ldr	r0, [pc, #52]	@ (8000ce4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cb0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb4:	480c      	ldr	r0, [pc, #48]	@ (8000ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cb6:	490d      	ldr	r1, [pc, #52]	@ (8000cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf0 <LoopForever+0xe>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ccc:	4c0a      	ldr	r4, [pc, #40]	@ (8000cf8 <LoopForever+0x16>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000cda:	f000 f811 	bl	8000d00 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000cde:	f7ff ff41 	bl	8000b64 <main>

08000ce2 <LoopForever>:

LoopForever:
  b LoopForever
 8000ce2:	e7fe      	b.n	8000ce2 <LoopForever>
  ldr   r0, =_estack
 8000ce4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000cf0:	08000d70 	.word	0x08000d70
  ldr r2, =_sbss
 8000cf4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000cf8:	20000078 	.word	0x20000078

08000cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC1_2_IRQHandler>
	...

08000d00 <__libc_init_array>:
 8000d00:	b570      	push	{r4, r5, r6, lr}
 8000d02:	4d0d      	ldr	r5, [pc, #52]	@ (8000d38 <__libc_init_array+0x38>)
 8000d04:	4c0d      	ldr	r4, [pc, #52]	@ (8000d3c <__libc_init_array+0x3c>)
 8000d06:	1b64      	subs	r4, r4, r5
 8000d08:	10a4      	asrs	r4, r4, #2
 8000d0a:	2600      	movs	r6, #0
 8000d0c:	42a6      	cmp	r6, r4
 8000d0e:	d109      	bne.n	8000d24 <__libc_init_array+0x24>
 8000d10:	4d0b      	ldr	r5, [pc, #44]	@ (8000d40 <__libc_init_array+0x40>)
 8000d12:	4c0c      	ldr	r4, [pc, #48]	@ (8000d44 <__libc_init_array+0x44>)
 8000d14:	f000 f818 	bl	8000d48 <_init>
 8000d18:	1b64      	subs	r4, r4, r5
 8000d1a:	10a4      	asrs	r4, r4, #2
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	42a6      	cmp	r6, r4
 8000d20:	d105      	bne.n	8000d2e <__libc_init_array+0x2e>
 8000d22:	bd70      	pop	{r4, r5, r6, pc}
 8000d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d28:	4798      	blx	r3
 8000d2a:	3601      	adds	r6, #1
 8000d2c:	e7ee      	b.n	8000d0c <__libc_init_array+0xc>
 8000d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d32:	4798      	blx	r3
 8000d34:	3601      	adds	r6, #1
 8000d36:	e7f2      	b.n	8000d1e <__libc_init_array+0x1e>
 8000d38:	08000d68 	.word	0x08000d68
 8000d3c:	08000d68 	.word	0x08000d68
 8000d40:	08000d68 	.word	0x08000d68
 8000d44:	08000d6c 	.word	0x08000d6c

08000d48 <_init>:
 8000d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d4a:	bf00      	nop
 8000d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d4e:	bc08      	pop	{r3}
 8000d50:	469e      	mov	lr, r3
 8000d52:	4770      	bx	lr

08000d54 <_fini>:
 8000d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d56:	bf00      	nop
 8000d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d5a:	bc08      	pop	{r3}
 8000d5c:	469e      	mov	lr, r3
 8000d5e:	4770      	bx	lr
